final enum class Main$Sort extends java.lang.Enum
{
    public static final enum jprtlogparser.Main$Sort NO;
    public static final enum jprtlogparser.Main$Sort NAME;
    public static final enum jprtlogparser.Main$Sort FAST;
    public static final enum jprtlogparser.Main$Sort SLOW;
    private static final jprtlogparser.Main$Sort[] $VALUES;

    public static jprtlogparser.Main$Sort[] values()
    {
        jprtlogparser.Main$Sort[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (jprtlogparser.Main$Sort[]) $r1;

        return $r2;
    }

    public static jprtlogparser.Main$Sort valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        jprtlogparser.Main$Sort $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Ljprtlogparser/Main$Sort;", r0);

        $r2 = (jprtlogparser.Main$Sort) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        Main$Sort r0;

        r0 := @this: Main$Sort;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        jprtlogparser.Main$Sort $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        jprtlogparser.Main$Sort[] $r4;

        $r0 = new jprtlogparser.Main$Sort;

        specialinvoke $r0.<jprtlogparser.Main$Sort: void <init>(java.lang.String,int)>("NO", 0);

        <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort NO> = $r0;

        $r1 = new jprtlogparser.Main$Sort;

        specialinvoke $r1.<jprtlogparser.Main$Sort: void <init>(java.lang.String,int)>("NAME", 1);

        <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort NAME> = $r1;

        $r2 = new jprtlogparser.Main$Sort;

        specialinvoke $r2.<jprtlogparser.Main$Sort: void <init>(java.lang.String,int)>("FAST", 2);

        <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort FAST> = $r2;

        $r3 = new jprtlogparser.Main$Sort;

        specialinvoke $r3.<jprtlogparser.Main$Sort: void <init>(java.lang.String,int)>("SLOW", 3);

        <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort SLOW> = $r3;

        $r4 = newarray (jprtlogparser.Main$Sort)[4];

        $r5 = <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort NO>;

        $r4[0] = $r5;

        $r6 = <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort NAME>;

        $r4[1] = $r6;

        $r7 = <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort FAST>;

        $r4[2] = $r7;

        $r8 = <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort SLOW>;

        $r4[3] = $r8;

        <jprtlogparser.Main$Sort: jprtlogparser.Main$Sort[] $VALUES> = $r4;

        return;
    }
}
