public class StressMe extends java.lang.Object
{
    static volatile int count;
    static boolean DEBUG;

    public void <init>()
    {
        StressMe r0;

        r0 := @this: StressMe;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0, $i1, $i2, i3;
        java.lang.String $r4, $r6, $r11;
        boolean $z0, $z1;
        java.io.PrintStream $r2, $r8, $r12;
        java.lang.StringBuilder $r1, $r3, $r5, $r7, $r9, $r10;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <StressMe: boolean DEBUG> = $z1;

        $z0 = <StressMe: boolean DEBUG>;

        if $z0 == 0 goto label3;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("start");

     label3:
        i3 = 0;

     label4:
        if i3 >= 20 goto label5;

        staticinvoke <StressMe: void spawn()>();

        i3 = i3 + 1;

        goto label4;

     label5:
        $i1 = <StressMe: int count>;

        if $i1 <= 1800 goto label6;

        goto label5;

     label6:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading jdk/internal/math/FDBigInteger: ");

        $r4 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(1.0F);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remaining threads ");

        $i2 = <StressMe: int count>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

        return;
    }

    public static void spawn()
    {
        java.io.PrintStream $r2;
        int[] r0;
        int $i0, $i1;
        StressMe$1 $r1;
        boolean $z0;

        $z0 = <StressMe: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $i1 = <StressMe: int count>;

        virtualinvoke $r2.<java.io.PrintStream: void println(int)>($i1);

     label1:
        $i0 = <StressMe: int count>;

        if $i0 <= 0 goto label2;

        r0 = newarray (int)[10];

        $r1 = new StressMe$1;

        specialinvoke $r1.<StressMe$1: void <init>()>();

        virtualinvoke $r1.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r1.<java.lang.Thread: void start()>();

     label2:
        return;
    }

    static void <clinit>()
    {
        <StressMe: int count> = 2000;

        return;
    }
}
