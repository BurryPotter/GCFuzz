public class TestMxBean extends java.lang.Object implements javax.management.NotificationListener
{
    private java.util.concurrent.atomic.AtomicLong value;
    private static final java.lang.String PS_OLD_GENERATION_BEAN_NAME;
    private static final java.lang.String CMS_OLD_GENERATION_BEAN_NAME;
    private static final java.lang.String PS_OLD_GENERATION_NOTIFICATION_NAME;
    private static final java.lang.String CMS_OLD_GENERATION_NOTIFICATION_NAME;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        TestMxBean r0;

        r0 := @this: TestMxBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<TestMxBean: java.util.concurrent.atomic.AtomicLong value> = $r1;

        return;
    }

    private void runTest()
    {
        java.io.PrintStream $r0, $r1;
        java.util.HashSet $r2;
        int i0, i1;
        java.lang.String $r3;
        TestMxBean r4;

        r4 := @this: TestMxBean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Before ");

        i0 = 0;

     label1:
        if i0 >= 200 goto label4;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        i1 = 0;

     label2:
        if i1 >= 10050000 goto label3;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("After");

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.InterruptedException
    {
        java.lang.String[] r1;
        TestMxBean $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new TestMxBean;

        specialinvoke $r0.<TestMxBean: void <init>()>();

        staticinvoke <TestMxBean: void registerSelf(TestMxBean)>($r0);

        specialinvoke $r0.<TestMxBean: void runTest()>();

        return;
    }

    private static void registerSelf(TestMxBean)
    {
        javax.management.NotificationEmitter r13;
        java.lang.management.GarbageCollectorMXBean r3;
        byte b1;
        int $i0;
        java.lang.String $r4, $r8, $r10, r12, r14, r15;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r6;
        java.util.Iterator $r1;
        java.util.List $r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5, $r7, $r9;
        TestMxBean r11;

        r11 := @parameter0: TestMxBean;

        $r0 = staticinvoke <java.lang.management.ManagementFactory: java.util.List getGarbageCollectorMXBeans()>();

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.management.GarbageCollectorMXBean) $r2;

        $z1 = r3 instanceof javax.management.NotificationEmitter;

        if $z1 == 0 goto label8;

        r12 = null;

        r15 = null;

        r14 = null;

        $r4 = interfaceinvoke r3.<java.lang.management.GarbageCollectorMXBean: java.lang.String getName()>();

        b1 = -1;

        $i0 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1022169080: goto label3;
            case 1973769762: goto label2;
            default: goto label4;
        };

     label2:
        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("PS MarkSweep");

        if $z2 == 0 goto label4;

        b1 = 0;

        goto label4;

     label3:
        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("ConcurrentMarkSweep");

        if $z3 == 0 goto label4;

        b1 = 1;

     label4:
        lookupswitch(b1)
        {
            case 0: goto label5;
            case 1: goto label6;
            default: goto label7;
        };

     label5:
        r12 = "PS Old Gen";

        r15 = "PS Old Gen";

        r14 = "PS Old Gen";

        goto label7;

     label6:
        r12 = "CMS Old Gen";

        r15 = "CMS Old Gen";

        r14 = "CMS Old Gen";

     label7:
        if r15 == null goto label8;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bean name: ");

        $r8 = interfaceinvoke r3.<java.lang.management.GarbageCollectorMXBean: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

        r13 = (javax.management.NotificationEmitter) r3;

        interfaceinvoke r13.<javax.management.NotificationEmitter: void addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>(r11, null, r14);

     label8:
        goto label1;

     label9:
        return;
    }

    public void handleNotification(javax.management.Notification, java.lang.Object)
    {
        com.sun.management.GarbageCollectionNotificationInfo $r4;
        java.util.Map $r6;
        java.lang.String $r1, $r15;
        java.lang.management.MemoryUsage r9;
        boolean $z0;
        java.io.PrintStream $r11;
        javax.management.openmbean.CompositeData $r3;
        javax.management.Notification r0;
        java.lang.Object $r2, r7, $r8;
        java.lang.StringBuilder $r10, $r12, $r13, $r14;
        com.sun.management.GcInfo $r5;
        TestMxBean r16;

        r16 := @this: TestMxBean;

        r0 := @parameter0: javax.management.Notification;

        r7 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<javax.management.Notification: java.lang.String getType()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("com.sun.management.gc.notification");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<javax.management.Notification: java.lang.Object getUserData()>();

        $r3 = (javax.management.openmbean.CompositeData) $r2;

        $r4 = staticinvoke <com.sun.management.GarbageCollectionNotificationInfo: com.sun.management.GarbageCollectionNotificationInfo 'from'(javax.management.openmbean.CompositeData)>($r3);

        $r5 = virtualinvoke $r4.<com.sun.management.GarbageCollectionNotificationInfo: com.sun.management.GcInfo getGcInfo()>();

        $r6 = virtualinvoke $r5.<com.sun.management.GcInfo: java.util.Map getMemoryUsageAfterGc()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r9 = (java.lang.management.MemoryUsage) $r8;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label1:
        return;
    }

    private static double round(double, int)
    {
        long $l1;
        int i0;
        double $d0, $d1, d2, $d3, $d4, $d5;

        d2 := @parameter0: double;

        i0 := @parameter1: int;

        $d0 = (double) i0;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0);

        $d3 = d2 * $d1;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d3);

        $d4 = (double) $l1;

        $d5 = $d4 / $d1;

        return $d5;
    }
}
