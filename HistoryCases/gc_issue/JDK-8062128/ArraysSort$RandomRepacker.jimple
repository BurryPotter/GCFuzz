final class ArraysSort$RandomRepacker extends java.util.concurrent.CountedCompleter
{
    final java.lang.Long[] src;
    final java.lang.Long[] dst;
    final int lo;
    final int hi;
    final int size;

    void <init>(java.util.concurrent.CountedCompleter, java.lang.Long[], java.lang.Long[], int, int, int)
    {
        java.lang.Long[] r2, r3;
        java.util.concurrent.CountedCompleter r1;
        ArraysSort$RandomRepacker r0;
        int i0, i1, i2;

        r0 := @this: ArraysSort$RandomRepacker;

        r1 := @parameter0: java.util.concurrent.CountedCompleter;

        r2 := @parameter1: java.lang.Long[];

        r3 := @parameter2: java.lang.Long[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        specialinvoke r0.<java.util.concurrent.CountedCompleter: void <init>(java.util.concurrent.CountedCompleter)>(r1);

        r0.<ArraysSort$RandomRepacker: java.lang.Long[] src> = r2;

        r0.<ArraysSort$RandomRepacker: java.lang.Long[] dst> = r3;

        r0.<ArraysSort$RandomRepacker: int lo> = i0;

        r0.<ArraysSort$RandomRepacker: int hi> = i1;

        r0.<ArraysSort$RandomRepacker: int size> = i2;

        return;
    }

    public final void compute()
    {
        java.lang.Long r3, $r4, r7;
        java.util.concurrent.ThreadLocalRandom $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12;
        java.lang.Long[] r1, r6;
        ArraysSort$RandomRepacker r0, $r5;

        r0 := @this: ArraysSort$RandomRepacker;

        r6 = r0.<ArraysSort$RandomRepacker: java.lang.Long[] src>;

        r1 = r0.<ArraysSort$RandomRepacker: java.lang.Long[] dst>;

        i6 = r0.<ArraysSort$RandomRepacker: int lo>;

        i7 = r0.<ArraysSort$RandomRepacker: int hi>;

        i0 = r0.<ArraysSort$RandomRepacker: int size>;

     label1:
        $i3 = i7 - i6;

        $i1 = <ArraysSort: int THRESHOLD>;

        $i2 = $i1 << 1;

        if $i3 <= $i2 goto label2;

        virtualinvoke r0.<ArraysSort$RandomRepacker: void addToPendingCount(int)>(1);

        $r5 = new ArraysSort$RandomRepacker;

        $i5 = i6 + i7;

        i8 = $i5 >>> 1;

        specialinvoke $r5.<ArraysSort$RandomRepacker: void <init>(java.util.concurrent.CountedCompleter,java.lang.Long[],java.lang.Long[],int,int,int)>(r0, r6, r1, i8, i7, i0);

        virtualinvoke $r5.<ArraysSort$RandomRepacker: java.util.concurrent.ForkJoinTask fork()>();

        i7 = i8;

        goto label1;

     label2:
        $r2 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        r3 = r1[i6];

        if r3 != null goto label3;

        i9 = i7;

        goto label4;

     label3:
        i9 = virtualinvoke $r2.<java.util.concurrent.ThreadLocalRandom: int nextInt(int,int)>(i6, i7);

     label4:
        i10 = i9;

        i11 = i6;

     label5:
        if i11 >= i10 goto label6;

        $i4 = virtualinvoke $r2.<java.util.concurrent.ThreadLocalRandom: int nextInt(int)>(i0);

        $r4 = r6[$i4];

        r1[i11] = $r4;

        i11 = i11 + 1;

        goto label5;

     label6:
        if r3 == null goto label8;

        r7 = r1[i6];

        i12 = i10;

     label7:
        if i12 >= i7 goto label8;

        r1[i12] = r7;

        i12 = i12 + 1;

        goto label7;

     label8:
        virtualinvoke r0.<ArraysSort$RandomRepacker: void tryComplete()>();

        return;
    }
}
