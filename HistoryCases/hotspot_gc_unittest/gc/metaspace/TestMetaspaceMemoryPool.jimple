public class TestMetaspaceMemoryPool extends java.lang.Object
{

    public void <init>()
    {
        TestMetaspaceMemoryPool r0;

        r0 := @this: TestMetaspaceMemoryPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.management.MemoryPoolMXBean $r0, $r1;
        java.lang.String[] r2;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: java.lang.String[];

        staticinvoke <gc.metaspace.TestMetaspaceMemoryPool: void verifyThatMetaspaceMemoryManagerExists()>();

        $z0 = staticinvoke <gc.metaspace.InputArguments: boolean containsPrefix(java.lang.String)>("-XX:MaxMetaspaceSize");

        $r0 = staticinvoke <gc.metaspace.TestMetaspaceMemoryPool: java.lang.management.MemoryPoolMXBean getMemoryPool(java.lang.String)>("Metaspace");

        staticinvoke <gc.metaspace.TestMetaspaceMemoryPool: void verifyMemoryPool(java.lang.management.MemoryPoolMXBean,boolean)>($r0, $z0);

        $z1 = staticinvoke <jdk.test.lib.Platform: boolean is64bit()>();

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <gc.metaspace.InputArguments: boolean contains(java.lang.String)>("-XX:+UseCompressedOops");

        if $z2 == 0 goto label1;

        $r1 = staticinvoke <gc.metaspace.TestMetaspaceMemoryPool: java.lang.management.MemoryPoolMXBean getMemoryPool(java.lang.String)>("Compressed Class Space");

        staticinvoke <gc.metaspace.TestMetaspaceMemoryPool: void verifyMemoryPool(java.lang.management.MemoryPoolMXBean,boolean)>($r1, 1);

     label1:
        return;
    }

    private static void verifyThatMetaspaceMemoryManagerExists()
    {
        java.util.Iterator $r1;
        java.lang.management.MemoryManagerMXBean r3;
        java.lang.RuntimeException $r5;
        java.util.List $r0;
        java.lang.Object $r2;
        java.lang.String $r4;
        boolean $z0, $z1;

        $r0 = staticinvoke <java.lang.management.ManagementFactory: java.util.List getMemoryManagerMXBeans()>();

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.management.MemoryManagerMXBean) $r2;

        $r4 = interfaceinvoke r3.<java.lang.management.MemoryManagerMXBean: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("Metaspace Manager");

        if $z1 == 0 goto label2;

        return;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Expected to find a metaspace memory manager");

        throw $r5;
    }

    private static java.lang.management.MemoryPoolMXBean getMemoryPool(java.lang.String)
    {
        java.util.Iterator $r1;
        java.lang.RuntimeException $r6;
        java.util.List $r0;
        java.lang.management.MemoryPoolMXBean r3;
        java.lang.Object $r2;
        java.lang.StringBuilder $r7, $r8;
        java.lang.String $r4, r5, $r9;
        boolean $z0, $z1;

        r5 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.management.ManagementFactory: java.util.List getMemoryPoolMXBeans()>();

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.management.MemoryPoolMXBean) $r2;

        $r4 = interfaceinvoke r3.<java.lang.management.MemoryPoolMXBean: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected to find a memory pool with name ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r6;
    }

    private static void verifyMemoryPool(java.lang.management.MemoryPoolMXBean, boolean)
    {
        long $l0, $l1, $l2, $l3;
        java.lang.management.MemoryPoolMXBean r0;
        java.lang.Long $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.management.MemoryUsage $r1;
        boolean z0;

        r0 := @parameter0: java.lang.management.MemoryPoolMXBean;

        z0 := @parameter1: boolean;

        $r1 = interfaceinvoke r0.<java.lang.management.MemoryPoolMXBean: java.lang.management.MemoryUsage getUsage()>();

        $l0 = virtualinvoke $r1.<java.lang.management.MemoryUsage: long getInit()>();

        $l1 = virtualinvoke $r1.<java.lang.management.MemoryUsage: long getUsed()>();

        $l2 = virtualinvoke $r1.<java.lang.management.MemoryUsage: long getCommitted()>();

        $l3 = virtualinvoke $r1.<java.lang.management.MemoryUsage: long getMax()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        staticinvoke <jdk.test.lib.Asserts: void assertGTE(java.lang.Comparable,java.lang.Comparable)>($r2, $r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        staticinvoke <jdk.test.lib.Asserts: void assertGTE(java.lang.Comparable,java.lang.Comparable)>($r4, $r5);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        staticinvoke <jdk.test.lib.Asserts: void assertGTE(java.lang.Comparable,java.lang.Comparable)>($r6, $r7);

        if z0 == 0 goto label1;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        staticinvoke <jdk.test.lib.Asserts: void assertGTE(java.lang.Comparable,java.lang.Comparable)>($r10, $r11);

        goto label2;

     label1:
        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        staticinvoke <jdk.test.lib.Asserts: void assertEQ(java.lang.Object,java.lang.Object)>($r8, $r9);

     label2:
        return;
    }
}
