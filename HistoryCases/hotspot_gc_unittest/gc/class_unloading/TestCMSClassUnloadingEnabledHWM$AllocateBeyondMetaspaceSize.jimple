public class TestCMSClassUnloadingEnabledHWM$AllocateBeyondMetaspaceSize extends java.lang.Object
{

    public void <init>()
    {
        TestCMSClassUnloadingEnabledHWM$AllocateBeyondMetaspaceSize r0;

        r0 := @this: TestCMSClassUnloadingEnabledHWM$AllocateBeyondMetaspaceSize;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        sun.hotspot.WhiteBox $r1;
        long $l1, l2, $l3, $l4;
        java.lang.IllegalArgumentException $r4;
        java.lang.management.GarbageCollectorMXBean $r3;
        byte $b5;
        int $i0;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Usage: <MetaspaceSize>");

        throw $r4;

     label1:
        $r1 = staticinvoke <sun.hotspot.WhiteBox: sun.hotspot.WhiteBox getWhiteBox()>();

        $r2 = r0[0];

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        l2 = $l1 * 2L;

        $l3 = virtualinvoke $r1.<sun.hotspot.WhiteBox: long allocateMetaspace(java.lang.ClassLoader,long)>(null, l2);

        $r3 = staticinvoke <gc.class_unloading.TestCMSClassUnloadingEnabledHWM$AllocateBeyondMetaspaceSize: java.lang.management.GarbageCollectorMXBean getCMSGCBean()>();

        goto label3;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label3:
        $l4 = interfaceinvoke $r3.<java.lang.management.GarbageCollectorMXBean: long getCollectionCount()>();

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label2;

        virtualinvoke $r1.<sun.hotspot.WhiteBox: void freeMetaspace(java.lang.ClassLoader,long,long)>(null, $l3, $l3);

        return;
    }

    private static java.lang.management.GarbageCollectorMXBean getCMSGCBean()
    {
        java.util.Iterator $r1;
        javax.management.ObjectName $r4;
        java.util.List $r0;
        java.lang.management.GarbageCollectorMXBean r3;
        java.lang.Object $r2;
        java.lang.String $r5;
        boolean $z0, $z1;

        $r0 = staticinvoke <java.lang.management.ManagementFactory: java.util.List getGarbageCollectorMXBeans()>();

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.management.GarbageCollectorMXBean) $r2;

        $r4 = interfaceinvoke r3.<java.lang.management.GarbageCollectorMXBean: javax.management.ObjectName getObjectName()>();

        $r5 = virtualinvoke $r4.<javax.management.ObjectName: java.lang.String toString()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("java.lang:type=GarbageCollector,name=ConcurrentMarkSweep");

        if $z1 == 0 goto label2;

        return r3;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;
    }
}
