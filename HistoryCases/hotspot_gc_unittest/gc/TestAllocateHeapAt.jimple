public class TestAllocateHeapAt extends java.lang.Object
{

    public void <init>()
    {
        TestAllocateHeapAt r0;

        r0 := @this: TestAllocateHeapAt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        boolean $z0;
        java.lang.Process $r24;
        jdk.test.lib.process.OutputAnalyzer $r23;
        java.lang.StringBuilder $r4, $r5, $r7, $r10, $r12, $r16, $r25, $r28;
        java.lang.Object[] $r20;
        java.lang.String[] $r3, $r19, $r21, $r30, r31;
        java.util.ArrayList $r0;
        int $i0, $i1, i2;
        java.lang.String $r1, $r2, $r6, $r9, $r11, $r15, $r17, $r27, $r29;
        java.lang.ProcessBuilder $r22;
        java.io.PrintStream $r8, $r13, $r18, $r26;
        java.lang.Object $r14;

        r31 := @parameter0: java.lang.String[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("test.java.opts");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r30 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, $r30);

     label1:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("test.dir", ".");

        $r3 = newarray (java.lang.String)[5];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:AllocateHeapAt=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[0] = $r6;

        $r3[1] = "-Xlog:gc+heap=info";

        $r3[2] = "-Xmx32m";

        $r3[3] = "-Xms32m";

        $r3[4] = "-version";

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, $r3);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Testing:\n");

        $r9 = staticinvoke <jdk.test.lib.JDKToolFinder: java.lang.String getJDKTool(java.lang.String)>("java");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void print(java.lang.String)>($r11);

        i2 = 0;

        goto label3;

     label2:
        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");

        $r14 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r15 = (java.lang.String) $r14;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void print(java.lang.String)>($r17);

        i2 = i2 + 1;

     label3:
        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        if i2 < $i0 goto label2;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r18.<java.io.PrintStream: void println()>();

        $i1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $r19 = newarray (java.lang.String)[$i1];

        $r20 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r21 = (java.lang.String[]) $r20;

        $r22 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r21);

        $r23 = new jdk.test.lib.process.OutputAnalyzer;

        $r24 = virtualinvoke $r22.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r23.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r24);

        $r26 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Output:\n");

        $r27 = virtualinvoke $r23.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r29);

        virtualinvoke $r23.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("Successfully allocated Java heap at location");

        virtualinvoke $r23.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        return;
    }
}
