public class TestDisableExplicitGC extends java.lang.Object
{

    public void <init>()
    {
        TestDisableExplicitGC r0;

        r0 := @this: TestDisableExplicitGC;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.InterruptedException
    {
        java.util.List $r0;
        java.lang.Long $r1, $r2;
        long $l0, $l1;
        java.lang.String[] r3;

        r3 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <java.lang.management.ManagementFactory: java.util.List getGarbageCollectorMXBeans()>();

        $l0 = staticinvoke <gc.TestDisableExplicitGC: long getCollectionCount(java.util.List)>($r0);

        staticinvoke <java.lang.System: void gc()>();

        $l1 = staticinvoke <gc.TestDisableExplicitGC: long getCollectionCount(java.util.List)>($r0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        staticinvoke <jdk.test.lib.Asserts: void assertLT(java.lang.Comparable,java.lang.Comparable)>($r1, $r2);

        return;
    }

    private static long getCollectionCount(java.util.List)
    {
        java.util.Iterator $r1;
        long $l0, $l1, $l2, $l3;
        java.util.List r0;
        java.lang.management.GarbageCollectorMXBean r3;
        int i4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        i4 = 0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.management.GarbageCollectorMXBean) $r2;

        $l0 = (long) i4;

        $l1 = interfaceinvoke r3.<java.lang.management.GarbageCollectorMXBean: long getCollectionCount()>();

        $l2 = $l0 + $l1;

        i4 = (int) $l2;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $l3 = (long) i4;

        return $l3;
    }
}
