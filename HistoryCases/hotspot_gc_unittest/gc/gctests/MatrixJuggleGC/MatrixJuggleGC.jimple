public class MatrixJuggleGC extends nsk.share.gc.GCTestBase
{
    private int threadCount;
    private nsk.share.gc.Matrix cm;
    private java.util.Stack emptiedLocations;

    public void <init>()
    {
        MatrixJuggleGC r0;
        nsk.share.gc.Matrix $r3;
        java.util.Stack $r4;
        gc.gctests.MatrixJuggleGC.MatrixJuggleGC $r5, $r6, $r7;

        r0 := @this: MatrixJuggleGC;

        specialinvoke r0.<nsk.share.gc.GCTestBase: void <init>()>();

        $r5 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $r5.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount> = 5;

        $r3 = new nsk.share.gc.Matrix;

        specialinvoke $r3.<nsk.share.gc.Matrix: void <init>(int,int)>(100, 100);

        $r6 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $r6.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: nsk.share.gc.Matrix cm> = $r3;

        $r4 = new java.util.Stack;

        specialinvoke $r4.<java.util.Stack: void <init>()>();

        $r7 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $r7.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: java.util.Stack emptiedLocations> = $r4;

        return;
    }

    private void runIteration()
    {
        nsk.share.gc.Matrix $r9;
        gc.gctests.MatrixJuggleGC.MatrixJuggleGC$CellRefiller $r13;
        java.lang.Thread $r18, $r20, $r24, $r26;
        gc.gctests.MatrixJuggleGC.MatrixJuggleGC$CellEmptier $r12;
        gc.gctests.MatrixJuggleGC.MatrixJuggleGC $r14, $r15, $r16, $r17, $r19, $r21, $r22, $r23, $r25, $r27, $r28;
        java.lang.Object[] r1, r2;
        MatrixJuggleGC r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9, i10, i11, i12, $i13;
        java.lang.InterruptedException $r10, $r11;
        java.lang.Object $r4, $r5, $r7, $r8;

        r0 := @this: MatrixJuggleGC;

        $r14 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $i0 = $r14.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount>;

        r1 = newarray (java.lang.Thread)[$i0];

        $r15 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $i1 = $r15.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount>;

        r2 = newarray (java.lang.Thread)[$i1];

        i6 = 0;

        goto label02;

     label01:
        $r12 = new gc.gctests.MatrixJuggleGC.MatrixJuggleGC$CellEmptier;

        $r16 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        specialinvoke $r12.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC$CellEmptier: void <init>(gc.gctests.MatrixJuggleGC.MatrixJuggleGC)>($r16);

        r1[i6] = $r12;

        i6 = i6 + 1;

     label02:
        $r17 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $i2 = $r17.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount>;

        if i6 < $i2 goto label01;

        i7 = 0;

        goto label04;

     label03:
        $r4 = r1[i7];

        $r18 = (java.lang.Thread) $r4;

        virtualinvoke $r18.<java.lang.Thread: void start()>();

        i7 = i7 + 1;

     label04:
        $r19 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $i3 = $r19.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount>;

        if i7 < $i3 goto label03;

        i8 = 0;

        goto label09;

     label05:
        $r5 = r1[i8];

        $r20 = (java.lang.Thread) $r5;

        virtualinvoke $r20.<java.lang.Thread: void join()>();

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

     label08:
        i8 = i8 + 1;

     label09:
        $r21 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $i9 = $r21.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount>;

        if i8 < $i9 goto label05;

        i10 = 0;

        goto label11;

     label10:
        $r13 = new gc.gctests.MatrixJuggleGC.MatrixJuggleGC$CellRefiller;

        $r22 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        specialinvoke $r13.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC$CellRefiller: void <init>(gc.gctests.MatrixJuggleGC.MatrixJuggleGC)>($r22);

        r2[i10] = $r13;

        i10 = i10 + 1;

     label11:
        $r23 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $i4 = $r23.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount>;

        if i10 < $i4 goto label10;

        i11 = 0;

        goto label13;

     label12:
        $r7 = r2[i11];

        $r24 = (java.lang.Thread) $r7;

        virtualinvoke $r24.<java.lang.Thread: void start()>();

        i11 = i11 + 1;

     label13:
        $r25 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $i5 = $r25.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount>;

        if i11 < $i5 goto label12;

        i12 = 0;

        goto label18;

     label14:
        $r8 = r2[i12];

        $r26 = (java.lang.Thread) $r8;

        virtualinvoke $r26.<java.lang.Thread: void join()>();

     label15:
        goto label17;

     label16:
        $r10 := @caughtexception;

     label17:
        i12 = i12 + 1;

     label18:
        $r27 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $i13 = $r27.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount>;

        if i12 < $i13 goto label14;

        $r28 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $r9 = $r28.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: nsk.share.gc.Matrix cm>;

        virtualinvoke $r9.<nsk.share.gc.Matrix: void resetCellCount()>();

        return;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.InterruptedException from label14 to label15 with label16;
    }

    public void run()
    {
        nsk.share.runner.RunParams $r1, $r3, $r5;
        long $l1;
        gc.gctests.MatrixJuggleGC.MatrixJuggleGC $r7, $r8, $r9, $r10, $r11;
        nsk.share.test.StressOptions $r4;
        nsk.share.test.Stresser $r6;
        MatrixJuggleGC r0;
        int $i0;
        boolean $z0;

        r0 := @this: MatrixJuggleGC;

        $r7 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $r1 = $r7.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: nsk.share.runner.RunParams runParams>;

        $i0 = virtualinvoke $r1.<nsk.share.runner.RunParams: int getNumberOfThreads()>();

        $r8 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $r8.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: int threadCount> = $i0;

        $r6 = new nsk.share.test.Stresser;

        $r9 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $r3 = $r9.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: nsk.share.runner.RunParams runParams>;

        $r4 = virtualinvoke $r3.<nsk.share.runner.RunParams: nsk.share.test.StressOptions getStressOptions()>();

        specialinvoke $r6.<nsk.share.test.Stresser: void <init>(nsk.share.test.StressOptions)>($r4);

        $r10 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        $r5 = $r10.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: nsk.share.runner.RunParams runParams>;

        $l1 = virtualinvoke $r5.<nsk.share.runner.RunParams: long getIterations()>();

        virtualinvoke $r6.<nsk.share.test.Stresser: void start(long)>($l1);

        goto label2;

     label1:
        $r11 = (gc.gctests.MatrixJuggleGC.MatrixJuggleGC) r0;

        virtualinvoke $r11.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: void runIteration()>();

     label2:
        $z0 = virtualinvoke $r6.<nsk.share.test.Stresser: boolean iteration()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r6.<nsk.share.test.Stresser: void finish()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;
        nsk.share.test.Test $r3;
        gc.gctests.MatrixJuggleGC.MatrixJuggleGC $r2;

        r1 := @parameter0: java.lang.String[];

        $r2 = new gc.gctests.MatrixJuggleGC.MatrixJuggleGC;

        specialinvoke $r2.<gc.gctests.MatrixJuggleGC.MatrixJuggleGC: void <init>()>();

        $r3 = (nsk.share.test.Test) $r2;

        staticinvoke <nsk.share.gc.GC: void runTest(nsk.share.test.Test,java.lang.String[])>($r3, r1);

        return;
    }
}
