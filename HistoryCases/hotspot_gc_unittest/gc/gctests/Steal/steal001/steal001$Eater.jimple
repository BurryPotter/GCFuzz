class steal001$Eater extends java.lang.Object implements java.lang.Runnable
{
    private int nodeSize;
    private java.util.List list;
    int processors;
    nsk.share.test.ExecutionController stresser;
    final gc.gctests.Steal.steal001.steal001 this$0;

    public void <init>(gc.gctests.Steal.steal001.steal001, int)
    {
        steal001$Eater r0;
        gc.gctests.Steal.steal001.steal001$Eater $r5, $r6, $r7, $r8;
        java.lang.Runtime $r2;
        gc.gctests.Steal.steal001.steal001 r1;
        java.util.ArrayList $r4;
        int $i0, i1;

        r0 := @this: steal001$Eater;

        r1 := @parameter0: gc.gctests.Steal.steal001.steal001;

        i1 := @parameter1: int;

        $r5 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r5.<gc.gctests.Steal.steal001.steal001$Eater: gc.gctests.Steal.steal001.steal001 this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r2.<java.lang.Runtime: int availableProcessors()>();

        $r6 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r6.<gc.gctests.Steal.steal001.steal001$Eater: int processors> = $i0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r7 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r7.<gc.gctests.Steal.steal001.steal001$Eater: java.util.List list> = $r4;

        $r8 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r8.<gc.gctests.Steal.steal001.steal001$Eater: int nodeSize> = i1;

        return;
    }

    public void run()
    {
        steal001$Eater r0;
        gc.gctests.Steal.steal001.steal001$Eater $r5, $r6, $r7, $r8, $r9, $r10;
        nsk.share.test.ExecutionController $r1, $r3, $r4;
        gc.gctests.Steal.steal001.steal001 $r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: steal001$Eater;

        $r5 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r1 = $r5.<gc.gctests.Steal.steal001.steal001$Eater: nsk.share.test.ExecutionController stresser>;

        if $r1 != null goto label1;

        $r6 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r2 = $r6.<gc.gctests.Steal.steal001.steal001$Eater: gc.gctests.Steal.steal001.steal001 this$0>;

        $r3 = staticinvoke <gc.gctests.Steal.steal001.steal001: nsk.share.test.ExecutionController access$0(gc.gctests.Steal.steal001.steal001)>($r2);

        $r7 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r7.<gc.gctests.Steal.steal001.steal001$Eater: nsk.share.test.ExecutionController stresser> = $r3;

     label1:
        i0 = 500;

        goto label5;

     label2:
        $r8 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        virtualinvoke $r8.<gc.gctests.Steal.steal001.steal001$Eater: void fillHeap(int)>(i0);

        $r9 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        virtualinvoke $r9.<gc.gctests.Steal.steal001.steal001$Eater: void removeElements()>();

        if i0 != 1 goto label3;

        $i1 = 1;

        goto label4;

     label3:
        $i1 = i0 - 1;

     label4:
        i0 = $i1;

     label5:
        $r10 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r4 = $r10.<gc.gctests.Steal.steal001.steal001$Eater: nsk.share.test.ExecutionController stresser>;

        $z0 = interfaceinvoke $r4.<nsk.share.test.ExecutionController: boolean continueExecution()>();

        if $z0 != 0 goto label2;

        return;
    }

    private void fillHeap(int)
    {
        steal001$Eater r0;
        nsk.share.gc.NonbranchyTree $r6;
        gc.gctests.Steal.steal001.steal001$Eater $r7, $r8, $r9, $r10;
        nsk.share.test.ExecutionController $r1, $r3;
        java.util.List $r4;
        int i0, $i1;
        java.lang.OutOfMemoryError $r5;
        boolean $z0;

        r0 := @this: steal001$Eater;

        i0 := @parameter0: int;

     label1:
        goto label3;

     label2:
        $r7 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r4 = $r7.<gc.gctests.Steal.steal001.steal001$Eater: java.util.List list>;

        $r6 = new nsk.share.gc.NonbranchyTree;

        $r8 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $i1 = $r8.<gc.gctests.Steal.steal001.steal001$Eater: int nodeSize>;

        $r9 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r3 = $r9.<gc.gctests.Steal.steal001.steal001$Eater: nsk.share.test.ExecutionController stresser>;

        specialinvoke $r6.<nsk.share.gc.NonbranchyTree: void <init>(int,float,int,nsk.share.test.ExecutionController)>(i0, 0.3F, $i1, $r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        $r10 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r1 = $r10.<gc.gctests.Steal.steal001.steal001$Eater: nsk.share.test.ExecutionController stresser>;

        $z0 = interfaceinvoke $r1.<nsk.share.test.ExecutionController: boolean continueExecution()>();

        if $z0 != 0 goto label2;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        return;

        catch java.lang.OutOfMemoryError from label1 to label4 with label5;
    }

    private void removeElements()
    {
        steal001$Eater r0;
        gc.gctests.Steal.steal001.steal001$Eater $r4, $r5, $r6;
        nsk.share.test.ExecutionController $r3;
        java.util.List $r1, $r2;
        int $i0;

        r0 := @this: steal001$Eater;

        $r4 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r1 = $r4.<gc.gctests.Steal.steal001.steal001$Eater: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 > 0 goto label1;

        return;

     label1:
        $r5 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r2 = $r5.<gc.gctests.Steal.steal001.steal001$Eater: java.util.List list>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0);

        $r6 = (gc.gctests.Steal.steal001.steal001$Eater) r0;

        $r3 = $r6.<gc.gctests.Steal.steal001.steal001$Eater: nsk.share.test.ExecutionController stresser>;

        staticinvoke <nsk.share.gc.gp.GarbageUtils: int eatMemory(nsk.share.test.ExecutionController)>($r3);

        return;
    }
}
