class large001$Worker extends java.lang.Object implements java.lang.Runnable
{
    int id;
    final gc.gctests.LargeObjects.large001.large001 this$0;

    public void <init>(gc.gctests.LargeObjects.large001.large001, int)
    {
        gc.gctests.LargeObjects.large001.large001$Worker $r2, $r3;
        gc.gctests.LargeObjects.large001.large001 r1;
        int i0;
        large001$Worker r0;

        r0 := @this: large001$Worker;

        r1 := @parameter0: gc.gctests.LargeObjects.large001.large001;

        i0 := @parameter1: int;

        $r2 = (gc.gctests.LargeObjects.large001.large001$Worker) r0;

        $r2.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = (gc.gctests.LargeObjects.large001.large001$Worker) r0;

        $r3.<gc.gctests.LargeObjects.large001.large001$Worker: int id> = i0;

        return;
    }

    public void run()
    {
        java.lang.Exception $r78, $r79;
        java.lang.StringBuilder $r9, $r10, $r18, $r19, $r27, $r28, $r38, $r39, $r50, $r51, $r59, $r60, $r61, $r62, $r63, $r73, $r74, $r75, $r77, $r80, $r81;
        nsk.share.ClassUnloader $r72;
        java.lang.Throwable $r65, $r103;
        nsk.share.test.ExecutionController $r33, $r54;
        java.util.ArrayList $r76;
        gc.gctests.LargeObjects.large001.large001$Worker $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102;
        java.lang.String r4, $r8, $r11, $r13, $r17, $r20, $r26, $r29, $r37, $r40, $r49, $r52, $r58, $r64;
        large001$Worker r1;
        nsk.share.TestFailure $r82;
        java.lang.OutOfMemoryError $r67;
        nsk.share.runner.RunParams $r69;
        gc.gctests.LargeObjects.large001.large001 $r2, $r5, $r12, $r14, $r23, $r30, $r32, $r34, $r46, $r53, $r55, $r68;
        boolean $z0, $z1, $z2;
        java.lang.String[] r3, $r70;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.ref.WeakReference r71;
        java.util.Iterator $r42;
        nsk.share.log.Log $r6, $r15, $r24, $r35, $r47, $r56;
        java.lang.Class $r21;
        java.lang.Object $r22, $r43, $r44;

        r1 := @this: large001$Worker;

     label01:
        $r72 = new nsk.share.ClassUnloader;

        specialinvoke $r72.<nsk.share.ClassUnloader: void <init>()>();

        $r83 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r2 = $r83.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $z0 = $r2.<gc.gctests.LargeObjects.large001.large001: boolean isOverLimitFields>;

        if $z0 == 0 goto label02;

        $r70 = <gc.gctests.LargeObjects.large001.large001: java.lang.String[] LCLASSES>;

        goto label03;

     label02:
        $r70 = <gc.gctests.LargeObjects.large001.large001: java.lang.String[] SCLASSES>;

     label03:
        r3 = $r70;

        $i7 = lengthof $r70;

        i9 = 0;

        goto label09;

     label04:
        r4 = r3[i9];

        $r84 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r5 = $r84.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r6 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.log.Log access$0(gc.gctests.LargeObjects.large001.large001)>($r5);

        $r73 = new java.lang.StringBuilder;

        $r85 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $i0 = $r85.<gc.gctests.LargeObjects.large001.large001$Worker: int id>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r73.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Loading class: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<nsk.share.log.Log: void debug(java.lang.Object)>($r11);

        $r86 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r12 = $r86.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r13 = $r12.<gc.gctests.LargeObjects.large001.large001: java.lang.String largeClassesPath>;

        virtualinvoke $r72.<nsk.share.ClassUnloader: void loadClass(java.lang.String,java.lang.String)>(r4, $r13);

        $r87 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r14 = $r87.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r15 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.log.Log access$0(gc.gctests.LargeObjects.large001.large001)>($r14);

        $r74 = new java.lang.StringBuilder;

        $r88 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $i1 = $r88.<gc.gctests.LargeObjects.large001.large001$Worker: int id>;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        specialinvoke $r74.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Class loaded: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<nsk.share.log.Log: void debug(java.lang.Object)>($r20);

        $r21 = virtualinvoke $r72.<nsk.share.ClassUnloader: java.lang.Class getLoadedClass()>();

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.Object newInstance()>();

        $r89 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r23 = $r89.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r24 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.log.Log access$0(gc.gctests.LargeObjects.large001.large001)>($r23);

        $r75 = new java.lang.StringBuilder;

        $r90 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $i2 = $r90.<gc.gctests.LargeObjects.large001.large001$Worker: int id>;

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        specialinvoke $r75.<java.lang.StringBuilder: void <init>(java.lang.String)>($r26);

        $r27 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Instance of the class: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<nsk.share.log.Log: void debug(java.lang.Object)>($r29);

        $r91 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r30 = $r91.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        i3 = $r30.<gc.gctests.LargeObjects.large001.large001: int aggregationDepth>;

        $r76 = new java.util.ArrayList;

        specialinvoke $r76.<java.util.ArrayList: void <init>(int)>(i3);

        $r92 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        virtualinvoke $r92.<gc.gctests.LargeObjects.large001.large001$Worker: void addObjRef(java.lang.Object,java.lang.Class,int,java.util.List)>($r22, $r21, i3, $r76);

        $r93 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r32 = $r93.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r33 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.test.ExecutionController access$1(gc.gctests.LargeObjects.large001.large001)>($r32);

        staticinvoke <nsk.share.gc.Algorithms: void eatMemory(nsk.share.test.ExecutionController)>($r33);

        $r94 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r34 = $r94.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r35 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.log.Log access$0(gc.gctests.LargeObjects.large001.large001)>($r34);

        $r77 = new java.lang.StringBuilder;

        $r95 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $i4 = $r95.<gc.gctests.LargeObjects.large001.large001$Worker: int id>;

        $r37 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4);

        specialinvoke $r77.<java.lang.StringBuilder: void <init>(java.lang.String)>($r37);

        $r38 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Testing non-null after GC force for: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<nsk.share.log.Log: void debug(java.lang.Object)>($r40);

        if $r21 == null goto label05;

        if $r22 != null goto label06;

     label05:
        $r78 = new java.lang.Exception;

        specialinvoke $r78.<java.lang.Exception: void <init>(java.lang.String)>("Null class");

        throw $r78;

     label06:
        $r96 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        virtualinvoke $r96.<gc.gctests.LargeObjects.large001.large001$Worker: void verifyObjRef(java.lang.Object,int)>($r22, i3);

        $r42 = interfaceinvoke $r76.<java.util.List: java.util.Iterator iterator()>();

        goto label08;

     label07:
        $r43 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        r71 = (java.lang.ref.WeakReference) $r43;

        $r44 = virtualinvoke r71.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r44 != null goto label08;

        $r79 = new java.lang.Exception;

        specialinvoke $r79.<java.lang.Exception: void <init>(java.lang.String)>("Unexpected null reference");

        throw $r79;

     label08:
        $z1 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label07;

        $r97 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r46 = $r97.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r47 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.log.Log access$0(gc.gctests.LargeObjects.large001.large001)>($r46);

        $r80 = new java.lang.StringBuilder;

        $r98 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $i5 = $r98.<gc.gctests.LargeObjects.large001.large001$Worker: int id>;

        $r49 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i5);

        specialinvoke $r80.<java.lang.StringBuilder: void <init>(java.lang.String)>($r49);

        $r50 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Unloading class: ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<nsk.share.log.Log: void debug(java.lang.Object)>($r52);

        $r99 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r53 = $r99.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r54 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.test.ExecutionController access$1(gc.gctests.LargeObjects.large001.large001)>($r53);

        $z2 = virtualinvoke $r72.<nsk.share.ClassUnloader: boolean unloadClass(nsk.share.test.ExecutionController)>($r54);

        $r100 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r55 = $r100.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r56 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.log.Log access$0(gc.gctests.LargeObjects.large001.large001)>($r55);

        $r81 = new java.lang.StringBuilder;

        $r101 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $i6 = $r101.<gc.gctests.LargeObjects.large001.large001$Worker: int id>;

        $r58 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i6);

        specialinvoke $r81.<java.lang.StringBuilder: void <init>(java.lang.String)>($r58);

        $r59 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Result of uloading ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("class ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r56.<nsk.share.log.Log: void debug(java.lang.Object)>($r64);

        i9 = i9 + 1;

     label09:
        if i9 < $i7 goto label04;

     label10:
        goto label13;

     label11:
        $r67 := @caughtexception;

        $r102 = (gc.gctests.LargeObjects.large001.large001$Worker) r1;

        $r68 = $r102.<gc.gctests.LargeObjects.large001.large001$Worker: gc.gctests.LargeObjects.large001.large001 this$0>;

        $r69 = staticinvoke <gc.gctests.LargeObjects.large001.large001: nsk.share.runner.RunParams access$2(gc.gctests.LargeObjects.large001.large001)>($r68);

        $i8 = virtualinvoke $r69.<nsk.share.runner.RunParams: int getNumberOfThreads()>();

        if $i8 != 1 goto label13;

        throw $r67;

     label12:
        $r65 := @caughtexception;

        $r82 = new nsk.share.TestFailure;

        specialinvoke $r82.<nsk.share.TestFailure: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception: ", $r65);

        $r103 = (java.lang.Throwable) $r82;

        throw $r103;

     label13:
        return;

        catch java.lang.OutOfMemoryError from label01 to label10 with label11;
        catch java.lang.Throwable from label01 to label10 with label12;
    }

    public void addObjRef(java.lang.Object, java.lang.Class, int, java.util.List) throws java.lang.Throwable
    {
        gc.gctests.LargeObjects.large001.large001$Worker $r19;
        int i0, i1, $i2, i3;
        java.lang.String $r4, $r9, $r13;
        java.lang.ref.WeakReference $r18;
        boolean $z0;
        java.io.PrintStream $r8;
        java.lang.reflect.Field r3;
        large001$Worker r14;
        java.lang.reflect.Field[] $r2;
        java.util.List r15;
        java.lang.Object r0, $r6;
        java.lang.Class $r1, r5;
        java.lang.StringBuilder $r10, $r11, $r12, $r17;

        r14 := @this: large001$Worker;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        r15 := @parameter3: java.util.List;

        if i0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i1 = lengthof $r2;

        i3 = 0;

        goto label4;

     label2:
        r3 = $r2[i3];

        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("obj");

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.Object newInstance()>();

        virtualinvoke r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r6);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Added field ");

        $r9 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  .... ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $i2 = i0 - 1;

        $r19 = (gc.gctests.LargeObjects.large001.large001$Worker) r14;

        virtualinvoke $r19.<gc.gctests.LargeObjects.large001.large001$Worker: void addObjRef(java.lang.Object,java.lang.Class,int,java.util.List)>($r6, r5, $i2, r15);

        $r18 = new java.lang.ref.WeakReference;

        specialinvoke $r18.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r6);

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r18);

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i1 goto label2;

        return;
    }

    public void verifyObjRef(java.lang.Object, int) throws java.lang.Throwable
    {
        java.lang.reflect.Field r3;
        large001$Worker r6;
        java.lang.reflect.Field[] $r2;
        gc.gctests.LargeObjects.large001.large001$Worker $r7;
        int i0, i1, $i2, i3;
        java.lang.Object r0, $r5;
        java.lang.Class $r1;
        java.lang.String $r4;
        boolean $z0;

        r6 := @this: large001$Worker;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i1 = lengthof $r2;

        i3 = 0;

        goto label4;

     label2:
        r3 = $r2[i3];

        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("obj");

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $i2 = i0 - 1;

        $r7 = (gc.gctests.LargeObjects.large001.large001$Worker) r6;

        virtualinvoke $r7.<gc.gctests.LargeObjects.large001.large001$Worker: void verifyObjRef(java.lang.Object,int)>($r5, $i2);

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i1 goto label2;

        return;
    }
}
