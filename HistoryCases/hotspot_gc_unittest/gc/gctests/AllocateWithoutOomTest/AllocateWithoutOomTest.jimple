public class AllocateWithoutOomTest extends nsk.share.gc.GCTestBase
{

    public void <init>()
    {
        AllocateWithoutOomTest r0;

        r0 := @this: AllocateWithoutOomTest;

        specialinvoke r0.<nsk.share.gc.GCTestBase: void <init>()>();

        return;
    }

    public void run()
    {
        byte[] r21, $r23;
        nsk.share.runner.RunParams $r3, $r4, $r5, $r7;
        gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest $r31, $r32, $r33, $r34, $r36;
        java.util.Random $r25;
        byte $b6, $b16, $b19;
        boolean $z0;
        nsk.share.test.Stresser $r26;
        java.lang.StringBuilder $r12, $r13, $r19, $r28, $r29;
        java.lang.Throwable $r15, $r35, $r37;
        AllocateWithoutOomTest r2;
        long l0, $l1, $l2, $l3, l4, l5, $l8, l12, l14, $l18;
        java.util.ArrayList $r24;
        nsk.share.test.StressOptions $r8;
        int $i7, $i9, $i10, $i11, i13, i15, $i17, $i21, $i22, $i23;
        java.lang.String $r14, $r20;
        double $d0, $d1, $d2;
        nsk.share.TestFailure $r27, $r30;
        nsk.share.log.Log $r11;
        java.lang.Object $r22;
        java.lang.OutOfMemoryError $r16;

        r2 := @this: AllocateWithoutOomTest;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        l0 = (long) 30720;

        $r25 = new java.util.Random;

        $r31 = (gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest) r2;

        $r3 = $r31.<gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest: nsk.share.runner.RunParams runParams>;

        $l1 = virtualinvoke $r3.<nsk.share.runner.RunParams: long getSeed()>();

        specialinvoke $r25.<java.util.Random: void <init>(long)>($l1);

        $r32 = (gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest) r2;

        $r4 = $r32.<gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest: nsk.share.runner.RunParams runParams>;

        $l2 = virtualinvoke $r4.<nsk.share.runner.RunParams: long getTestMemory()>();

        $r33 = (gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest) r2;

        $r5 = $r33.<gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest: nsk.share.runner.RunParams runParams>;

        $l3 = virtualinvoke $r5.<nsk.share.runner.RunParams: long getTestMemory()>();

        l4 = $l3 / 3L;

        l5 = $l2 - l4;

        l12 = 0L;

        $i21 = (int) -1;

        i13 = $i21;

        l14 = 1L;

     label01:
        $r26 = new nsk.share.test.Stresser;

        $r34 = (gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest) r2;

        $r7 = $r34.<gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest: nsk.share.runner.RunParams runParams>;

        $r8 = virtualinvoke $r7.<nsk.share.runner.RunParams: nsk.share.test.StressOptions getStressOptions()>();

        specialinvoke $r26.<nsk.share.test.Stresser: void <init>(nsk.share.test.StressOptions)>($r8);

        virtualinvoke $r26.<nsk.share.test.Stresser: void start(long)>(0L);

        goto label10;

     label02:
        $d0 = virtualinvoke $r25.<java.util.Random: double nextDouble()>();

        $d1 = (double) l0;

        $d2 = $d0 * $d1;

        $i7 = (int) $d2;

        i13 = $i7 + 2048;

        r21 = newarray (byte)[i13];

        $l8 = (long) i13;

        l12 = l12 + $l8;

        virtualinvoke $r24.<java.util.ArrayList: boolean add(java.lang.Object)>(r21);

     label03:
        $b6 = l12 cmp $l2;

        $i22 = (int) $b6;

        if $i22 < 0 goto label02;

        i15 = 1;

        goto label09;

     label04:
        $i9 = virtualinvoke $r24.<java.util.ArrayList: int size()>();

        if $i9 != 0 goto label05;

        $r27 = new nsk.share.TestFailure;

        specialinvoke $r27.<nsk.share.TestFailure: void <init>(java.lang.String)>("No more objects to free, so we can\'t continue");

        $r35 = (java.lang.Throwable) $r27;

        throw $r35;

     label05:
        $i10 = virtualinvoke $r24.<java.util.ArrayList: int size()>();

        if i15 < $i10 goto label08;

        $i11 = virtualinvoke $r24.<java.util.ArrayList: int size()>();

        if $i11 != 1 goto label06;

        $b16 = 0;

        goto label07;

     label06:
        $b16 = 1;

     label07:
        i15 = $b16;

     label08:
        $r22 = virtualinvoke $r24.<java.util.ArrayList: java.lang.Object remove(int)>(i15);

        $r23 = (byte[]) $r22;

        $i17 = lengthof $r23;

        $l18 = (long) $i17;

        l12 = l12 - $l18;

        i15 = i15 + 1;

     label09:
        $b19 = l12 cmp l5;

        $i23 = (int) $b19;

        if $i23 > 0 goto label04;

        l14 = l14 + 1L;

     label10:
        $z0 = virtualinvoke $r26.<nsk.share.test.Stresser: boolean continueExecution()>();

        if $z0 != 0 goto label03;

        $r36 = (gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest) r2;

        $r11 = $r36.<gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest: nsk.share.log.Log log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Passed. Completed ");

        $r12 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rounds during the test");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<nsk.share.log.Log: void info(java.lang.Object)>($r14);

     label11:
        goto label14;

     label12:
        $r16 := @caughtexception;

        $r30 = new nsk.share.TestFailure;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("OOM thrown when allocating an object of size ");

        $r19 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<nsk.share.TestFailure: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r16);

        $r37 = (java.lang.Throwable) $r30;

        throw $r37;

     label13:
        $r15 := @caughtexception;

        throw $r15;

     label14:
        return;

        catch java.lang.OutOfMemoryError from label01 to label11 with label12;
        catch java.lang.Throwable from label01 to label13 with label13;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;
        nsk.share.test.Test $r3;
        gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest $r2;

        r1 := @parameter0: java.lang.String[];

        $r2 = new gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest;

        specialinvoke $r2.<gc.gctests.AllocateWithoutOomTest.AllocateWithoutOomTest: void <init>()>();

        $r3 = (nsk.share.test.Test) $r2;

        staticinvoke <nsk.share.gc.GC: void runTest(nsk.share.test.Test,java.lang.String[])>($r3, r1);

        return;
    }
}
