class gctest01$memevil extends java.lang.Thread
{
    int sum;
    int bufsz;
    final gc.gctests.gctest01.gctest01 this$0;

    public void <init>(gc.gctests.gctest01.gctest01, int)
    {
        gctest01$memevil r0;
        int i0;
        gc.gctests.gctest01.gctest01$memevil $r2, $r3, $r4, $r5;
        gc.gctests.gctest01.gctest01 r1;

        r0 := @this: gctest01$memevil;

        r1 := @parameter0: gc.gctests.gctest01.gctest01;

        i0 := @parameter1: int;

        $r2 = (gc.gctests.gctest01.gctest01$memevil) r0;

        $r2.<gc.gctests.gctest01.gctest01$memevil: gc.gctests.gctest01.gctest01 this$0> = r1;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r3 = (gc.gctests.gctest01.gctest01$memevil) r0;

        $r3.<gc.gctests.gctest01.gctest01$memevil: int bufsz> = 64;

        staticinvoke <gc.gctests.gctest01.ThreadTracker: void incr()>();

        $r4 = (gc.gctests.gctest01.gctest01$memevil) r0;

        $r4.<gc.gctests.gctest01.gctest01$memevil: int sum> = 0;

        $r5 = (gc.gctests.gctest01.gctest01$memevil) r0;

        $r5.<gc.gctests.gctest01.gctest01$memevil: int bufsz> = i0;

        return;
    }

    private boolean doit()
    {
        java.lang.Throwable $r2;
        gc.gctests.gctest01.Person $r11;
        gc.gctests.gctest01.gctest01$memevil $r13, $r14, $r15;
        gctest01$memevil r0;
        int $i0;
        nsk.share.log.Log $r5;
        java.lang.StringBuilder $r9, $r12;
        java.lang.String $r7, $r8, $r10;
        gc.gctests.gctest01.gctest01 $r4;
        java.lang.OutOfMemoryError $r3;

        r0 := @this: gctest01$memevil;

     label1:
        $r11 = new gc.gctests.gctest01.Person;

        $r13 = (gc.gctests.gctest01.gctest01$memevil) r0;

        $i0 = $r13.<gc.gctests.gctest01.gctest01$memevil: int bufsz>;

        specialinvoke $r11.<gc.gctests.gctest01.Person: void <init>(java.lang.String,int,int,int)>("Duke", 100, 100, $i0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        $r14 = (gc.gctests.gctest01.gctest01$memevil) r0;

        $r4 = $r14.<gc.gctests.gctest01.gctest01$memevil: gc.gctests.gctest01.gctest01 this$0>;

        $r5 = staticinvoke <gc.gctests.gctest01.gctest01: nsk.share.log.Log access$0(gc.gctests.gctest01.gctest01)>($r4);

        $r12 = new java.lang.StringBuilder;

        $r15 = (gc.gctests.gctest01.gctest01$memevil) r0;

        $r7 = virtualinvoke $r15.<gc.gctests.gctest01.gctest01$memevil: java.lang.String getName()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Out of Memory");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<nsk.share.log.Log: void info(java.lang.Object)>($r10);

        return 0;

     label4:
        $r2 := @caughtexception;

        return 0;

     label5:
        return 1;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
        catch gc.gctests.gctest01.PopulationException from label1 to label2 with label4;
    }

    public void run()
    {
        byte $b0;
        java.lang.InterruptedException $r1;
        gctest01$memevil r0;
        int $i1;
        gc.gctests.gctest01.gctest01$memevil $r2;
        double $d0;
        boolean $z0;

        r0 := @this: gctest01$memevil;

        goto label5;

     label1:
        $d0 = staticinvoke <nsk.share.test.LocalRandom: double random()>();

        $b0 = $d0 cmpl 0.6668;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label5;

     label2:
        staticinvoke <gc.gctests.gctest01.gctest01$memevil: void sleep(long)>(10L);

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

     label5:
        $r2 = (gc.gctests.gctest01.gctest01$memevil) r0;

        $z0 = virtualinvoke $r2.<gc.gctests.gctest01.gctest01$memevil: boolean doit()>();

        if $z0 != 0 goto label1;

        staticinvoke <gc.gctests.gctest01.ThreadTracker: void decr()>();

        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }
}
