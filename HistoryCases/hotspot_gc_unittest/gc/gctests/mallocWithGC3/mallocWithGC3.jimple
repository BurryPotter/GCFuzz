public class mallocWithGC3 extends nsk.share.test.TestBase
{

    static void <clinit>()
    {
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("mallocWithGC3");

        return;
    }

    public void <init>()
    {
        mallocWithGC3 r0;

        r0 := @this: mallocWithGC3;

        specialinvoke r0.<nsk.share.test.TestBase: void <init>()>();

        return;
    }

    public native void getMallocLock03();

    public void run()
    {
        gc.gctests.mallocWithGC3.mallocWithGC3$javaHeapEater $r9;
        java.lang.Object[] r1;
        mallocWithGC3 r3;
        gc.gctests.mallocWithGC3.mallocWithGC3$cHeapEater $r10;
        gc.gctests.mallocWithGC3.mallocWithGC3 $r11, $r12, $r15;
        java.util.Vector $r8;
        java.lang.Thread $r13, $r14;
        int $i0, $i1, i2, i3;
        java.lang.Exception $r7;
        java.lang.Object $r5, $r6;

        r3 := @this: mallocWithGC3;

        $r8 = new java.util.Vector;

        specialinvoke $r8.<java.util.Vector: void <init>(int)>(5);

        r1 = newarray (java.lang.Thread)[2];

        $r9 = new gc.gctests.mallocWithGC3.mallocWithGC3$javaHeapEater;

        $r11 = (gc.gctests.mallocWithGC3.mallocWithGC3) r3;

        specialinvoke $r9.<gc.gctests.mallocWithGC3.mallocWithGC3$javaHeapEater: void <init>(gc.gctests.mallocWithGC3.mallocWithGC3,java.util.Vector)>($r11, $r8);

        r1[0] = $r9;

        $r10 = new gc.gctests.mallocWithGC3.mallocWithGC3$cHeapEater;

        $r12 = (gc.gctests.mallocWithGC3.mallocWithGC3) r3;

        specialinvoke $r10.<gc.gctests.mallocWithGC3.mallocWithGC3$cHeapEater: void <init>(gc.gctests.mallocWithGC3.mallocWithGC3)>($r12);

        r1[1] = $r10;

     label1:
        i2 = 0;

        goto label3;

     label2:
        $r5 = r1[i2];

        $r13 = (java.lang.Thread) $r5;

        virtualinvoke $r13.<java.lang.Thread: void start()>();

        i2 = i2 + 1;

     label3:
        $i0 = lengthof r1;

        if i2 < $i0 goto label2;

        i3 = 0;

        goto label5;

     label4:
        $r6 = r1[i3];

        $r14 = (java.lang.Thread) $r6;

        virtualinvoke $r14.<java.lang.Thread: void join()>();

        i3 = i3 + 1;

     label5:
        $i1 = lengthof r1;

        if i3 < $i1 goto label4;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        $r15 = (gc.gctests.mallocWithGC3.mallocWithGC3) r3;

        virtualinvoke $r15.<gc.gctests.mallocWithGC3.mallocWithGC3: void setFailed(boolean)>(1);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    private nsk.share.gc.CircularLinkedList buildCircularLinkedList()
    {
        int i0;
        nsk.share.gc.CircularLinkedList $r0;
        mallocWithGC3 r1;

        r1 := @this: mallocWithGC3;

        $r0 = new nsk.share.gc.CircularLinkedList;

        specialinvoke $r0.<nsk.share.gc.CircularLinkedList: void <init>(int)>(100);

        i0 = 0;

        goto label2;

     label1:
        virtualinvoke $r0.<nsk.share.gc.CircularLinkedList: void grow()>();

        i0 = i0 + 1;

     label2:
        if i0 < 2000 goto label1;

        return $r0;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;
        nsk.share.test.Test $r3;
        gc.gctests.mallocWithGC3.mallocWithGC3 $r2;

        r1 := @parameter0: java.lang.String[];

        $r2 = new gc.gctests.mallocWithGC3.mallocWithGC3;

        specialinvoke $r2.<gc.gctests.mallocWithGC3.mallocWithGC3: void <init>()>();

        $r3 = (nsk.share.test.Test) $r2;

        staticinvoke <nsk.share.test.Tests: void runTest(nsk.share.test.Test,java.lang.String[])>($r3, r1);

        return;
    }

    static nsk.share.log.Log access$0(gc.gctests.mallocWithGC3.mallocWithGC3)
    {
        nsk.share.log.Log $r1;
        gc.gctests.mallocWithGC3.mallocWithGC3 r0;

        r0 := @parameter0: gc.gctests.mallocWithGC3.mallocWithGC3;

        $r1 = r0.<gc.gctests.mallocWithGC3.mallocWithGC3: nsk.share.log.Log log>;

        return $r1;
    }
}
