public class WeakReferenceEvilTest extends nsk.share.gc.GCTestBase
{

    public void <init>()
    {
        WeakReferenceEvilTest r0;

        r0 := @this: WeakReferenceEvilTest;

        specialinvoke r0.<nsk.share.gc.GCTestBase: void <init>()>();

        return;
    }

    public void run()
    {
        byte[] r21;
        nsk.share.runner.RunParams $r2;
        WeakReferenceEvilTest r1;
        java.util.Random $r22;
        byte $b6, $b7, $b10, $b16;
        java.lang.Runtime $r0;
        gc.gctests.WeakReference.WeakReferenceEvilTest $r28, $r30;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r25;
        java.lang.Throwable $r18, $r29, $r31;
        long $l0, $l1, l2, $l4, $l5, $l8, $l9, l12, l13, l14, l17;
        java.util.ArrayList $r23;
        int $i3, $i11, i15, i18, $i19, $i20, $i21;
        java.lang.String $r12, $r17;
        java.lang.ref.WeakReference r7, $r24;
        double $d0, $d1, $d2, $d3, $d4;
        nsk.share.TestFailure $r26, $r27;
        java.lang.Object $r6, $r8;
        nsk.share.log.Log $r9;
        java.lang.OutOfMemoryError $r19;

        r1 := @this: WeakReferenceEvilTest;

        l12 = 0L;

        l13 = 0L;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r28 = (gc.gctests.WeakReference.WeakReferenceEvilTest) r1;

        $r2 = $r28.<gc.gctests.WeakReference.WeakReferenceEvilTest: nsk.share.runner.RunParams runParams>;

        $l0 = virtualinvoke $r2.<nsk.share.runner.RunParams: long getSeed()>();

        $l1 = virtualinvoke $r0.<java.lang.Runtime: long maxMemory()>();

        $d0 = (double) $l1;

        $d1 = $d0 * 0.45;

        l14 = (long) $d1;

        $r22 = new java.util.Random;

        specialinvoke $r22.<java.util.Random: void <init>(long)>($l0);

        l2 = (long) 30720;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

     label01:
        goto label04;

     label02:
        $d2 = virtualinvoke $r22.<java.util.Random: double nextDouble()>();

        $d3 = (double) l2;

        $d4 = $d2 * $d3;

        $i3 = (int) $d4;

        i15 = $i3 + 2048;

        r21 = newarray (byte)[i15];

        $l4 = (long) 5;

        $l5 = l12 % $l4;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label03;

        $r24 = new java.lang.ref.WeakReference;

        specialinvoke $r24.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r21);

        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>($r24);

        $l8 = (long) i15;

        l13 = l13 + $l8;

     label03:
        $l9 = l12 + 1L;

        l12 = $l9;

        $b7 = $l9 cmp 9223372036854775807L;

        if $b7 != 0 goto label04;

        l12 = 0L;

     label04:
        $b16 = l13 cmp l14;

        $i20 = (int) $b16;

        if $i20 < 0 goto label02;

        staticinvoke <java.lang.System: void gc()>();

        l17 = 0L;

        i18 = 0;

        goto label07;

     label05:
        $r6 = virtualinvoke $r23.<java.util.ArrayList: java.lang.Object get(int)>(i18);

        r7 = (java.lang.ref.WeakReference) $r6;

        $r8 = virtualinvoke r7.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r8 == null goto label06;

        l17 = l17 + 1L;

     label06:
        i18 = i18 + 1;

     label07:
        $i19 = virtualinvoke $r23.<java.util.ArrayList: int size()>();

        if i18 < $i19 goto label05;

        $b10 = l17 cmp 0L;

        $i21 = (int) $b10;

        if $i21 <= 0 goto label08;

        $r26 = new nsk.share.TestFailure;

        $r25 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l17);

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of ");

        $i11 = virtualinvoke $r23.<java.util.ArrayList: int size()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WeakReferences was not ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null after the GC had run");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<nsk.share.TestFailure: void <init>(java.lang.String)>($r17);

        $r29 = (java.lang.Throwable) $r26;

        throw $r29;

     label08:
        $r30 = (gc.gctests.WeakReference.WeakReferenceEvilTest) r1;

        $r9 = $r30.<gc.gctests.WeakReference.WeakReferenceEvilTest: nsk.share.log.Log log>;

        interfaceinvoke $r9.<nsk.share.log.Log: void info(java.lang.Object)>("All WeakReferences was cleared after the GC had run");

     label09:
        goto label12;

     label10:
        $r19 := @caughtexception;

        $r27 = new nsk.share.TestFailure;

        specialinvoke $r27.<nsk.share.TestFailure: void <init>(java.lang.String)>("OutOfMemoryException was thrown. This should not happen during the execution of this test.");

        $r31 = (java.lang.Throwable) $r27;

        throw $r31;

     label11:
        $r18 := @caughtexception;

        throw $r18;

     label12:
        return;

        catch java.lang.OutOfMemoryError from label01 to label09 with label10;
        catch java.lang.Throwable from label01 to label11 with label11;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;
        nsk.share.test.Test $r3;
        gc.gctests.WeakReference.WeakReferenceEvilTest $r2;

        r1 := @parameter0: java.lang.String[];

        $r2 = new gc.gctests.WeakReference.WeakReferenceEvilTest;

        specialinvoke $r2.<gc.gctests.WeakReference.WeakReferenceEvilTest: void <init>()>();

        $r3 = (nsk.share.test.Test) $r2;

        staticinvoke <nsk.share.gc.GC: void runTest(nsk.share.test.Test,java.lang.String[])>($r3, r1);

        return;
    }
}
