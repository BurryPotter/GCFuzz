class GarbageProducer extends java.lang.Thread
{
    private int size;
    private int sleepTime;

    void <init>(int, int)
    {
        gc.cslocker.GarbageProducer $r1, $r2;
        int i0, i1;
        GarbageProducer r0;

        r0 := @this: GarbageProducer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r1 = (gc.cslocker.GarbageProducer) r0;

        $r1.<gc.cslocker.GarbageProducer: int size> = i0;

        $r2 = (gc.cslocker.GarbageProducer) r0;

        $r2.<gc.cslocker.GarbageProducer: int sleepTime> = i1;

        return;
    }

    public void run()
    {
        long $l2;
        int[] $r1;
        java.lang.InterruptedException $r2;
        gc.cslocker.GarbageProducer $r3, $r4;
        int $i0, $i1;
        GarbageProducer r0;
        boolean z0;

        r0 := @this: GarbageProducer;

        z0 = 1;

        goto label4;

     label1:
        $r3 = (gc.cslocker.GarbageProducer) r0;

        $i0 = $r3.<gc.cslocker.GarbageProducer: int size>;

        $r1 = newarray (int)[$i0];

        $r4 = (gc.cslocker.GarbageProducer) r0;

        $i1 = $r4.<gc.cslocker.GarbageProducer: int sleepTime>;

        $l2 = (long) $i1;

        staticinvoke <gc.cslocker.GarbageProducer: void sleep(long)>($l2);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        z0 = 0;

     label4:
        if z0 != 0 goto label1;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
