class TestMultiThreadStressRSet$Worker extends java.lang.Thread
{
    final gc.stress.TestMultiThreadStressRSet boss;
    final int refs;

    void <init>(gc.stress.TestMultiThreadStressRSet, int)
    {
        gc.stress.TestMultiThreadStressRSet$Worker $r2, $r3;
        TestMultiThreadStressRSet$Worker r0;
        gc.stress.TestMultiThreadStressRSet r1;
        int i0;

        r0 := @this: TestMultiThreadStressRSet$Worker;

        r1 := @parameter0: gc.stress.TestMultiThreadStressRSet;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r2 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $r2.<gc.stress.TestMultiThreadStressRSet$Worker: gc.stress.TestMultiThreadStressRSet boss> = r1;

        $r3 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $r3.<gc.stress.TestMultiThreadStressRSet$Worker: int refs> = i0;

        return;
    }

    public void run()
    {
        java.lang.Throwable $r7;
        java.lang.Object[] $r3;
        gc.stress.TestMultiThreadStressRSet$Worker $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        gc.stress.TestMultiThreadStressRSet $r1, $r2, $r4, $r6, $r9;
        int $i0, $i1, i2, $i3, $i4, $i5, i6;
        java.lang.String $r10;
        boolean $z0;
        java.io.PrintStream $r8;
        TestMultiThreadStressRSet$Worker r0;
        java.lang.Object $r5;

        r0 := @this: TestMultiThreadStressRSet$Worker;

     label1:
        goto label5;

     label2:
        $r11 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $r2 = $r11.<gc.stress.TestMultiThreadStressRSet$Worker: gc.stress.TestMultiThreadStressRSet boss>;

        $r3 = virtualinvoke $r2.<gc.stress.TestMultiThreadStressRSet: java.lang.Object[] getFromBuffer()>();

        $i1 = lengthof $r3;

        $r12 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $i0 = $r12.<gc.stress.TestMultiThreadStressRSet$Worker: int refs>;

        i2 = $i1 / $i0;

        i6 = 0;

        goto label4;

     label3:
        $r13 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $r4 = $r13.<gc.stress.TestMultiThreadStressRSet$Worker: gc.stress.TestMultiThreadStressRSet boss>;

        $r5 = virtualinvoke $r4.<gc.stress.TestMultiThreadStressRSet: java.lang.Object getRandomObject()>();

        $r3[i6] = $r5;

        i6 = i6 + i2;

     label4:
        $r14 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $i3 = $r14.<gc.stress.TestMultiThreadStressRSet$Worker: int refs>;

        if i6 < $i3 goto label3;

        $r15 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $r6 = $r15.<gc.stress.TestMultiThreadStressRSet$Worker: gc.stress.TestMultiThreadStressRSet boss>;

        $i4 = $r6.<gc.stress.TestMultiThreadStressRSet: int counter>;

        $i5 = $i4 + 1;

        $r6.<gc.stress.TestMultiThreadStressRSet: int counter> = $i5;

     label5:
        $r16 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $r1 = $r16.<gc.stress.TestMultiThreadStressRSet$Worker: gc.stress.TestMultiThreadStressRSet boss>;

        $z0 = $r1.<gc.stress.TestMultiThreadStressRSet: boolean isEnough>;

        if $z0 == 0 goto label2;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r8);

        $r17 = (gc.stress.TestMultiThreadStressRSet$Worker) r0;

        $r9 = $r17.<gc.stress.TestMultiThreadStressRSet$Worker: gc.stress.TestMultiThreadStressRSet boss>;

        $r10 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String getMessage()>();

        $r9.<gc.stress.TestMultiThreadStressRSet: java.lang.String errorMessage> = $r10;

     label8:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
    }
}
