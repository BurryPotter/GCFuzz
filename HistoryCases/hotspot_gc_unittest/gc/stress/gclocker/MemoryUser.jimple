class MemoryUser extends gc.stress.gclocker.Exitable implements java.lang.Runnable
{
    private final java.util.Queue cache;
    private final gc.stress.gclocker.MemoryWatcher watcher;

    private void load()
    {
        gc.stress.gclocker.MemoryWatcher $r1;
        MemoryUser r0;
        int $i0, i1, i2;
        gc.stress.gclocker.Filler $r6;
        gc.stress.gclocker.MemoryUser $r7, $r8, $r9, $r10;
        java.util.Queue $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: MemoryUser;

        $r7 = (gc.stress.gclocker.MemoryUser) r0;

        $r1 = $r7.<gc.stress.gclocker.MemoryUser: gc.stress.gclocker.MemoryWatcher watcher>;

        $z0 = virtualinvoke $r1.<gc.stress.gclocker.MemoryWatcher: boolean shouldFreeUpSpace()>();

        if $z0 == 0 goto label3;

        $r8 = (gc.stress.gclocker.MemoryUser) r0;

        $r4 = $r8.<gc.stress.gclocker.MemoryUser: java.util.Queue cache>;

        $i0 = interfaceinvoke $r4.<java.util.Queue: int size()>();

        i1 = $i0 / 5;

        i2 = 0;

        goto label2;

     label1:
        $r9 = (gc.stress.gclocker.MemoryUser) r0;

        $r5 = $r9.<gc.stress.gclocker.MemoryUser: java.util.Queue cache>;

        interfaceinvoke $r5.<java.util.Queue: java.lang.Object remove()>();

        i2 = i2 + 1;

     label2:
        if i2 < i1 goto label1;

     label3:
        $r10 = (gc.stress.gclocker.MemoryUser) r0;

        $r3 = $r10.<gc.stress.gclocker.MemoryUser: java.util.Queue cache>;

        $r6 = new gc.stress.gclocker.Filler;

        specialinvoke $r6.<gc.stress.gclocker.Filler: void <init>()>();

        interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>($r6);

        return;
    }

    public void <init>(java.lang.String)
    {
        gc.stress.gclocker.MemoryWatcher $r5;
        MemoryUser r0;
        gc.stress.gclocker.MemoryUser $r6, $r7;
        java.lang.String r3;
        java.util.ArrayDeque $r4;

        r0 := @this: MemoryUser;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<gc.stress.gclocker.Exitable: void <init>()>();

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        $r6 = (gc.stress.gclocker.MemoryUser) r0;

        $r6.<gc.stress.gclocker.MemoryUser: java.util.Queue cache> = $r4;

        $r5 = new gc.stress.gclocker.MemoryWatcher;

        specialinvoke $r5.<gc.stress.gclocker.MemoryWatcher: void <init>(java.lang.String)>(r3);

        $r7 = (gc.stress.gclocker.MemoryUser) r0;

        $r7.<gc.stress.gclocker.MemoryUser: gc.stress.gclocker.MemoryWatcher watcher> = $r5;

        return;
    }

    public void run()
    {
        MemoryUser r0;
        int i0;
        gc.stress.gclocker.MemoryUser $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: MemoryUser;

        i0 = 0;

        goto label2;

     label1:
        $r1 = (gc.stress.gclocker.MemoryUser) r0;

        virtualinvoke $r1.<gc.stress.gclocker.MemoryUser: void load()>();

        i0 = i0 + 1;

     label2:
        if i0 < 200 goto label1;

        goto label4;

     label3:
        $r2 = (gc.stress.gclocker.MemoryUser) r0;

        virtualinvoke $r2.<gc.stress.gclocker.MemoryUser: void load()>();

     label4:
        $r3 = (gc.stress.gclocker.MemoryUser) r0;

        $z0 = virtualinvoke $r3.<gc.stress.gclocker.MemoryUser: boolean shouldExit()>();

        if $z0 == 0 goto label3;

        return;
    }
}
