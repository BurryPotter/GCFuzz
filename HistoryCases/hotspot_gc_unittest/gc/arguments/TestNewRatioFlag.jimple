public class TestNewRatioFlag extends java.lang.Object
{
    public static final long M;
    public static final long HEAP_SIZE;

    public void <init>()
    {
        TestNewRatioFlag r0;

        r0 := @this: TestNewRatioFlag;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.util.List $r3;
        java.lang.String[] $r1, $r2, r4;
        java.util.LinkedList $r0;

        r4 := @parameter0: java.lang.String[];

        $r0 = new java.util.LinkedList;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "(-XX:[^ ]*NewSize=[^ ]+)|(-Xm[ns][^ ]+)";

        $r2 = staticinvoke <jdk.test.lib.Utils: java.lang.String[] getFilteredTestJavaOpts(java.lang.String[])>($r1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r0.<java.util.LinkedList: void <init>(java.util.Collection)>($r3);

        staticinvoke <gc.arguments.TestNewRatioFlag: void testNewRatio(int,java.util.LinkedList)>(4, $r0);

        staticinvoke <gc.arguments.TestNewRatioFlag: void testNewRatio(int,java.util.LinkedList)>(6, $r0);

        staticinvoke <gc.arguments.TestNewRatioFlag: void testNewRatio(int,java.util.LinkedList)>(10, $r0);

        staticinvoke <gc.arguments.TestNewRatioFlag: void testNewRatio(int,java.util.LinkedList)>(15, $r0);

        staticinvoke <gc.arguments.TestNewRatioFlag: void testNewRatio(int,java.util.LinkedList)>(20, $r0);

        return;
    }

    public static void testNewRatio(int, java.util.LinkedList) throws java.lang.Exception
    {
        java.lang.Object[] $r10;
        java.lang.String[] $r2, $r9, $r11;
        int i0, $i1;
        java.lang.String $r5, $r7, $r8, $r16;
        java.lang.ProcessBuilder $r12;
        java.util.LinkedList $r0, r1;
        java.io.PrintStream $r15;
        java.lang.Process $r14;
        jdk.test.lib.process.OutputAnalyzer $r13;
        java.lang.StringBuilder $r3, $r4;
        java.lang.Class $r6;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.LinkedList;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>(java.util.Collection)>(r1);

        $r2 = newarray (java.lang.String)[10];

        $r2[0] = "-Xbootclasspath/a:.";

        $r2[1] = "-XX:+UnlockDiagnosticVMOptions";

        $r2[2] = "-XX:+WhiteBoxAPI";

        $r2[3] = "-XX:GCLockerEdenExpansionPercent=0";

        $r2[4] = "-Xmx104857600";

        $r2[5] = "-Xms104857600";

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:NewRatio=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2[6] = $r5;

        $r2[7] = "-XX:-UseLargePages";

        $r6 = class "Lgc/arguments/TestNewRatioFlag$NewRatioVerifier;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r2[8] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r2[9] = $r8;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, $r2);

        $i1 = virtualinvoke $r0.<java.util.LinkedList: int size()>();

        $r9 = newarray (java.lang.String)[$i1];

        $r10 = virtualinvoke $r0.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.String[]) $r10;

        $r12 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r11);

        $r13 = new jdk.test.lib.process.OutputAnalyzer;

        $r14 = virtualinvoke $r12.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r13.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r14);

        virtualinvoke $r13.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r16 = virtualinvoke $r13.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r16);

        return;
    }
}
