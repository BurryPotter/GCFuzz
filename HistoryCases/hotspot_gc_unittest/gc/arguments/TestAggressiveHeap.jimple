public class TestAggressiveHeap extends java.lang.Object
{
    private static final java.lang.String option;
    private static final long minMemory;
    private static final java.lang.String heapSizeOption;
    private static final java.lang.String parallelGCPattern;

    public void <init>()
    {
        TestAggressiveHeap r0;

        r0 := @this: TestAggressiveHeap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $z0 = staticinvoke <gc.arguments.TestAggressiveHeap: boolean canUseAggressiveHeapOption()>();

        if $z0 == 0 goto label1;

        staticinvoke <gc.arguments.TestAggressiveHeap: void testFlag()>();

     label1:
        return;
    }

    private static void testFlag() throws java.lang.Exception
    {
        java.lang.Process $r3;
        java.lang.String[] $r0;
        java.lang.ProcessBuilder $r1;
        java.lang.String $r4;
        java.lang.RuntimeException $r5;
        jdk.test.lib.process.OutputAnalyzer $r2;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "-XX:+AggressiveHeap";

        $r0[1] = "-Xmx128M";

        $r0[2] = "-XX:+PrintFlagsFinal";

        $r0[3] = "-version";

        $r1 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r0);

        $r2 = new jdk.test.lib.process.OutputAnalyzer;

        $r3 = virtualinvoke $r1.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r3);

        virtualinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        $r4 = virtualinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: java.lang.String firstMatch(java.lang.String)>(" *bool +UseParallelGC *= *true +\\{product\\} *\\{command line\\}");

        if $r4 != null goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("-XX:+AggressiveHeap didn\'t set UseParallelGC as if from command line");

        throw $r5;

     label1:
        return;
    }

    private static boolean haveRequiredMemory() throws java.lang.Exception
    {
        byte $b1;
        javax.management.MBeanServer $r0;
        int $i2;
        java.lang.Object $r2;
        long $l0;
        java.lang.String $r3;
        javax.management.ObjectName $r4;

        $r0 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

        $r4 = new javax.management.ObjectName;

        specialinvoke $r4.<javax.management.ObjectName: void <init>(java.lang.String,java.lang.String,java.lang.String)>("java.lang", "type", "OperatingSystem");

        $r2 = interfaceinvoke $r0.<javax.management.MBeanServer: java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)>($r4, "TotalPhysicalMemorySize");

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        $b1 = $l0 cmp 268435456L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean canUseAggressiveHeapOption() throws java.lang.Exception
    {
        java.io.PrintStream $r0;
        boolean $z0;

        $z0 = staticinvoke <gc.arguments.TestAggressiveHeap: boolean haveRequiredMemory()>();

        if $z0 != 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Skipping test of -XX:+AggressiveHeap : insufficient memory");

        return 0;

     label1:
        return 1;
    }
}
