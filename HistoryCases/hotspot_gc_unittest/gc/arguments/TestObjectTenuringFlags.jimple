public class TestObjectTenuringFlags extends java.lang.Object
{

    public void <init>()
    {
        TestObjectTenuringFlags r0;

        r0 := @this: TestObjectTenuringFlags;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] $r1, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, r42;
        gc.arguments.ExpectedTenuringFlags $r0, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41;

        r42 := @parameter0: java.lang.String[];

        $r1 = newarray (java.lang.String)[0];

        $r0 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r0.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 7L, 15L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r1, 0, $r0);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "-XX:+NeverTenure";

        $r3 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r3.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 1, 7L, 16L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r2, 0, $r3);

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "-XX:+AlwaysTenure";

        $r5 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r5.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(1, 0, 0L, 0L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r4, 0, $r5);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "-XX:MaxTenuringThreshold=0";

        $r7 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r7.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(1, 0, 0L, 0L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r6, 0, $r7);

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "-XX:MaxTenuringThreshold=5";

        $r9 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r9.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 5L, 5L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r8, 0, $r9);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "-XX:MaxTenuringThreshold=10";

        $r11 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r11.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 7L, 10L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r10, 0, $r11);

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = "-XX:MaxTenuringThreshold=15";

        $r13 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r13.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 7L, 15L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r12, 0, $r13);

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = "-XX:MaxTenuringThreshold=16";

        $r15 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r15.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 7L, 16L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r14, 0, $r15);

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = "-XX:InitialTenuringThreshold=0";

        $r17 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r17.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 0L, 15L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r16, 0, $r17);

        $r18 = newarray (java.lang.String)[1];

        $r18[0] = "-XX:InitialTenuringThreshold=5";

        $r19 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r19.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 5L, 15L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r18, 0, $r19);

        $r20 = newarray (java.lang.String)[1];

        $r20[0] = "-XX:InitialTenuringThreshold=10";

        $r21 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r21.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 10L, 15L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r20, 0, $r21);

        $r22 = newarray (java.lang.String)[1];

        $r22[0] = "-XX:InitialTenuringThreshold=15";

        $r23 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r23.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 15L, 15L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r22, 0, $r23);

        $r24 = newarray (java.lang.String)[2];

        $r24[0] = "-XX:+AlwaysTenure";

        $r24[1] = "-XX:+NeverTenure";

        $r25 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r25.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 1, 7L, 16L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r24, 0, $r25);

        $r26 = newarray (java.lang.String)[2];

        $r26[0] = "-XX:+NeverTenure";

        $r26[1] = "-XX:+AlwaysTenure";

        $r27 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r27.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(1, 0, 0L, 0L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r26, 0, $r27);

        $r28 = newarray (java.lang.String)[2];

        $r28[0] = "-XX:MaxTenuringThreshold=16";

        $r28[1] = "-XX:+AlwaysTenure";

        $r29 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r29.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(1, 0, 0L, 0L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r28, 0, $r29);

        $r30 = newarray (java.lang.String)[2];

        $r30[0] = "-XX:+AlwaysTenure";

        $r30[1] = "-XX:MaxTenuringThreshold=16";

        $r31 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r31.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 0, 7L, 16L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r30, 0, $r31);

        $r32 = newarray (java.lang.String)[2];

        $r32[0] = "-XX:MaxTenuringThreshold=0";

        $r32[1] = "-XX:+NeverTenure";

        $r33 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r33.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(0, 1, 7L, 16L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r32, 0, $r33);

        $r34 = newarray (java.lang.String)[2];

        $r34[0] = "-XX:+NeverTenure";

        $r34[1] = "-XX:MaxTenuringThreshold=0";

        $r35 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r35.<gc.arguments.ExpectedTenuringFlags: void <init>(boolean,boolean,long,long)>(1, 0, 0L, 0L);

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r34, 0, $r35);

        $r36 = newarray (java.lang.String)[1];

        $r36[0] = "-XX:MaxTenuringThreshold=17";

        $r37 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r37.<gc.arguments.ExpectedTenuringFlags: void <init>()>();

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r36, 1, $r37);

        $r38 = newarray (java.lang.String)[1];

        $r38[0] = "-XX:InitialTenuringThreshold=16";

        $r39 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r39.<gc.arguments.ExpectedTenuringFlags: void <init>()>();

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r38, 1, $r39);

        $r40 = newarray (java.lang.String)[1];

        $r40[0] = "-XX:InitialTenuringThreshold=17";

        $r41 = new gc.arguments.ExpectedTenuringFlags;

        specialinvoke $r41.<gc.arguments.ExpectedTenuringFlags: void <init>()>();

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void runTenuringFlagsConsistencyTest(java.lang.String[],boolean,gc.arguments.ExpectedTenuringFlags)>($r40, 1, $r41);

        return;
    }

    private static void runTenuringFlagsConsistencyTest(java.lang.String[], boolean, gc.arguments.ExpectedTenuringFlags) throws java.lang.Exception
    {
        java.lang.Object[] $r4;
        java.lang.Process $r8;
        java.lang.String[] r1, $r2, $r3, $r5;
        gc.arguments.ExpectedTenuringFlags r10;
        jdk.test.lib.process.OutputAnalyzer $r7;
        java.util.ArrayList $r0;
        int $i0, $i1;
        java.lang.ProcessBuilder $r6;
        java.lang.String $r9;
        boolean z0;

        r1 := @parameter0: java.lang.String[];

        z0 := @parameter1: boolean;

        r10 := @parameter2: gc.arguments.ExpectedTenuringFlags;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, r1);

     label1:
        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "-XX:+UseParallelGC";

        $r2[1] = "-XX:+PrintFlagsFinal";

        $r2[2] = "-version";

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, $r2);

        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r3 = newarray (java.lang.String)[$i1];

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        $r6 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r5);

        $r7 = new jdk.test.lib.process.OutputAnalyzer;

        $r8 = virtualinvoke $r6.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r8);

        if z0 == 0 goto label2;

        virtualinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(1);

        goto label3;

     label2:
        virtualinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        $r9 = virtualinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        staticinvoke <gc.arguments.TestObjectTenuringFlags: void checkTenuringFlagsConsistency(java.lang.String,gc.arguments.ExpectedTenuringFlags)>($r9, r10);

     label3:
        return;
    }

    private static void checkTenuringFlagsConsistency(java.lang.String, gc.arguments.ExpectedTenuringFlags)
    {
        byte $b2, $b5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24;
        long $l0, $l1, $l3, $l4, $l6, $l7, $l8, $l9;
        gc.arguments.ExpectedTenuringFlags r0;
        java.lang.String r1, $r7, $r13, $r19, $r25;
        java.lang.RuntimeException $r2, $r8, $r14, $r20;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: gc.arguments.ExpectedTenuringFlags;

        $z0 = r0.<gc.arguments.ExpectedTenuringFlags: boolean alwaysTenure>;

        $z1 = staticinvoke <gc.arguments.FlagsValue: boolean getFlagBoolValue(java.lang.String,java.lang.String)>("AlwaysTenure", r1);

        if $z0 == $z1 goto label1;

        $r20 = new java.lang.RuntimeException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Actual flag AlwaysTenure ");

        $z6 = staticinvoke <gc.arguments.FlagsValue: boolean getFlagBoolValue(java.lang.String,java.lang.String)>("AlwaysTenure", r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not equal to expected flag AlwaysTenure ");

        $z7 = r0.<gc.arguments.ExpectedTenuringFlags: boolean alwaysTenure>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label1:
        $z2 = r0.<gc.arguments.ExpectedTenuringFlags: boolean neverTenure>;

        $z3 = staticinvoke <gc.arguments.FlagsValue: boolean getFlagBoolValue(java.lang.String,java.lang.String)>("NeverTenure", r1);

        if $z2 == $z3 goto label2;

        $r14 = new java.lang.RuntimeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Actual flag NeverTenure ");

        $z4 = staticinvoke <gc.arguments.FlagsValue: boolean getFlagBoolValue(java.lang.String,java.lang.String)>("NeverTenure", r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not equal to expected flag NeverTenure ");

        $z5 = r0.<gc.arguments.ExpectedTenuringFlags: boolean neverTenure>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label2:
        $l0 = r0.<gc.arguments.ExpectedTenuringFlags: long initialTenuringThreshold>;

        $l1 = staticinvoke <gc.arguments.FlagsValue: long getFlagLongValue(java.lang.String,java.lang.String)>("InitialTenuringThreshold", r1);

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label3;

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Actual flag InitialTenuringThreshold ");

        $l8 = staticinvoke <gc.arguments.FlagsValue: long getFlagLongValue(java.lang.String,java.lang.String)>("InitialTenuringThreshold", r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not equal to expected flag InitialTenuringThreshold ");

        $l9 = r0.<gc.arguments.ExpectedTenuringFlags: long initialTenuringThreshold>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label3:
        $l3 = r0.<gc.arguments.ExpectedTenuringFlags: long maxTenuringThreshold>;

        $l4 = staticinvoke <gc.arguments.FlagsValue: long getFlagLongValue(java.lang.String,java.lang.String)>("MaxTenuringThreshold", r1);

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label4;

        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Actual flag MaxTenuringThreshold ");

        $l6 = staticinvoke <gc.arguments.FlagsValue: long getFlagLongValue(java.lang.String,java.lang.String)>("MaxTenuringThreshold", r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not equal to expected flag MaxTenuringThreshold ");

        $l7 = r0.<gc.arguments.ExpectedTenuringFlags: long maxTenuringThreshold>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label4:
        return;
    }
}
