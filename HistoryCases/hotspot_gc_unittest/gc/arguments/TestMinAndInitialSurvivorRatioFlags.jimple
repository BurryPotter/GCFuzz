public class TestMinAndInitialSurvivorRatioFlags extends java.lang.Object
{
    public static final long M;
    public static final long HEAP_SIZE;
    public static final long NEW_SIZE;

    public void <init>()
    {
        TestMinAndInitialSurvivorRatioFlags r0;

        r0 := @this: TestMinAndInitialSurvivorRatioFlags;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] $r1, $r2, r4;
        java.util.List $r3;
        int $i1, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19;
        java.util.LinkedList $r5;

        r4 := @parameter0: java.lang.String[];

        $r5 = new java.util.LinkedList;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "-XX:[^ ]*SurvivorRatio=[^ ]+";

        $r2 = staticinvoke <jdk.test.lib.Utils: java.lang.String[] getFilteredTestJavaOpts(java.lang.String[])>($r1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r5.<java.util.LinkedList: void <init>(java.util.Collection)>($r3);

        $i1 = (int) -1;

        $i3 = (int) -1;

        staticinvoke <gc.arguments.TestMinAndInitialSurvivorRatioFlags: void testSurvivorRatio(int,int,int,java.util.LinkedList,boolean)>(5, $i1, $i3, $r5, 1);

        $i5 = (int) -1;

        $i7 = (int) -1;

        staticinvoke <gc.arguments.TestMinAndInitialSurvivorRatioFlags: void testSurvivorRatio(int,int,int,java.util.LinkedList,boolean)>(10, $i5, $i7, $r5, 1);

        $i9 = (int) -1;

        staticinvoke <gc.arguments.TestMinAndInitialSurvivorRatioFlags: void testSurvivorRatio(int,int,int,java.util.LinkedList,boolean)>($i9, 5, 3, $r5, 1);

        $i11 = (int) -1;

        staticinvoke <gc.arguments.TestMinAndInitialSurvivorRatioFlags: void testSurvivorRatio(int,int,int,java.util.LinkedList,boolean)>($i11, 15, 3, $r5, 1);

        $i13 = (int) -1;

        staticinvoke <gc.arguments.TestMinAndInitialSurvivorRatioFlags: void testSurvivorRatio(int,int,int,java.util.LinkedList,boolean)>($i13, 15, 3, $r5, 0);

        $i15 = (int) -1;

        staticinvoke <gc.arguments.TestMinAndInitialSurvivorRatioFlags: void testSurvivorRatio(int,int,int,java.util.LinkedList,boolean)>($i15, 10, 10, $r5, 1);

        $i17 = (int) -1;

        staticinvoke <gc.arguments.TestMinAndInitialSurvivorRatioFlags: void testSurvivorRatio(int,int,int,java.util.LinkedList,boolean)>($i17, 3, 15, $r5, 1);

        $i19 = (int) -1;

        staticinvoke <gc.arguments.TestMinAndInitialSurvivorRatioFlags: void testSurvivorRatio(int,int,int,java.util.LinkedList,boolean)>($i19, 3, 15, $r5, 0);

        return;
    }

    public static void testSurvivorRatio(int, int, int, java.util.LinkedList, boolean) throws java.lang.Exception
    {
        java.lang.Object[] $r11;
        java.lang.String[] $r2, $r10, $r12;
        int i0, i1, i2, $i3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r22, $r23, $r24, $r25;
        java.lang.ProcessBuilder $r13;
        java.util.LinkedList $r0, r1;
        boolean z0;
        java.lang.Process $r15;
        java.util.function.Predicate $r9;
        jdk.test.lib.process.OutputAnalyzer $r14;
        java.lang.Class $r3;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r20, $r21;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.util.LinkedList;

        z0 := @parameter4: boolean;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>(java.util.Collection)>(r1);

        $r2 = newarray (java.lang.String)[16];

        $r2[0] = "-Xbootclasspath/a:.";

        $r2[1] = "-XX:+UnlockDiagnosticVMOptions";

        $r2[2] = "-XX:+WhiteBoxAPI";

        $r2[3] = "-XX:MaxNewSize=104857600";

        $r2[4] = "-XX:NewSize=104857600";

        $r2[5] = "-Xmx209715200";

        $r2[6] = "-Xms209715200";

        if i0 < 0 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:SurvivorRatio=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r22 = "";

     label2:
        $r2[7] = $r22;

        if i1 < 0 goto label3;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:InitialSurvivorRatio=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r23 = "";

     label4:
        $r2[8] = $r23;

        if i2 < 0 goto label5;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:MinSurvivorRatio=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r24 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r24 = "";

     label6:
        $r2[9] = $r24;

        if z0 == 0 goto label7;

        $r25 = "-XX:+UseAdaptiveSizePolicy";

        goto label8;

     label7:
        $r25 = "-XX:-UseAdaptiveSizePolicy";

     label8:
        $r2[10] = $r25;

        $r3 = class "Lgc/arguments/TestMinAndInitialSurvivorRatioFlags$SurvivorRatioVerifier;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2[11] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r2[12] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r2[13] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i2);

        $r2[14] = $r7;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z0);

        $r2[15] = $r8;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, $r2);

        $r9 = staticinvoke <TestMinAndInitialSurvivorRatioFlags$lambda_0__1: java.util.function.Predicate bootstrap$()>();

        virtualinvoke $r0.<java.util.LinkedList: boolean removeIf(java.util.function.Predicate)>($r9);

        $i3 = virtualinvoke $r0.<java.util.LinkedList: int size()>();

        $r10 = newarray (java.lang.String)[$i3];

        $r11 = virtualinvoke $r0.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.lang.String[]) $r11;

        $r13 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r12);

        $r14 = new jdk.test.lib.process.OutputAnalyzer;

        $r15 = virtualinvoke $r13.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r14.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r15);

        virtualinvoke $r14.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        return;
    }

    private static boolean lambda$0(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        return $z0;
    }
}
