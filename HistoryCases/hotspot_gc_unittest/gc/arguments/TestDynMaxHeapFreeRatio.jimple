public class TestDynMaxHeapFreeRatio extends java.lang.Object
{

    public void <init>()
    {
        TestDynMaxHeapFreeRatio r0;

        r0 := @this: TestDynMaxHeapFreeRatio;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        jdk.test.lib.management.DynamicVMOption $r12;
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r2, $r13, $r15, $r16, $r18, $r19, $r20, $r22;
        java.lang.String[] $r4, $r8, r25;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        java.lang.String $r3, $r5, $r6, $r7, $r9, $r10, $r11, $r14, $r17, $r21, $r23, $r24, r26, r27;
        java.io.PrintStream $r1;

        r25 := @parameter0: java.lang.String[];

        $i0 = staticinvoke <jdk.test.lib.management.DynamicVMOption: int getInt(java.lang.String)>("MinHeapFreeRatio");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("MinHeapFreeRatio= ");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $r4 = newarray (java.lang.String)[12];

        $r4[1] = "";

        $r4[2] = "not a number";

        $r4[3] = "8.5";

        $r4[4] = "-0.01";

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-2147483648);

        $r4[5] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(2147483647);

        $r4[6] = $r6;

        $i1 = $i0 - 1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        $r4[7] = $r7;

        $r4[8] = "-1024";

        $r4[9] = "-1";

        $r4[10] = "101";

        $r4[11] = "1997";

        $r8 = newarray (java.lang.String)[5];

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r8[0] = $r9;

        $i2 = $i0 + 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $r8[1] = $r10;

        $i3 = $i0 + 100;

        $i4 = $i3 / 2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        $r8[2] = $r11;

        $r8[3] = "99";

        $r8[4] = "100";

        $r12 = new jdk.test.lib.management.DynamicVMOption;

        specialinvoke $r12.<jdk.test.lib.management.DynamicVMOption: void <init>(java.lang.String)>("MaxHeapFreeRatio");

        $z0 = virtualinvoke $r12.<jdk.test.lib.management.DynamicVMOption: boolean isWriteable()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Option ");

        $r14 = $r12.<jdk.test.lib.management.DynamicVMOption: java.lang.String name>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is expected to be writable");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.test.lib.Asserts: void assertTrue(boolean,java.lang.String)>($z0, $r17);

        i5 = lengthof $r4;

        i6 = 0;

        goto label2;

     label1:
        r26 = $r4[i6];

        $z1 = virtualinvoke $r12.<jdk.test.lib.management.DynamicVMOption: boolean isValidValue(java.lang.String)>(r26);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("\'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is expected to be illegal for flag ");

        $r21 = $r12.<jdk.test.lib.management.DynamicVMOption: java.lang.String name>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.test.lib.Asserts: void assertFalse(boolean,java.lang.String)>($z1, $r23);

        i6 = i6 + 1;

     label2:
        if i6 < i5 goto label1;

        i7 = lengthof $r8;

        i8 = 0;

        goto label4;

     label3:
        r27 = $r8[i8];

        virtualinvoke $r12.<jdk.test.lib.management.DynamicVMOption: void setValue(java.lang.String)>(r27);

        $r24 = virtualinvoke $r12.<jdk.test.lib.management.DynamicVMOption: java.lang.String getValue()>();

        staticinvoke <jdk.test.lib.Asserts: void assertEQ(java.lang.Object,java.lang.Object)>(r27, $r24);

        i8 = i8 + 1;

     label4:
        if i8 < i7 goto label3;

        return;
    }
}
