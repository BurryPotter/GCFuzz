public class TestG1ConcMarkStepDurationMillis extends java.lang.Object
{
    static final int PASS;
    static final int FAIL_IMPROPER_VALUE;
    static final int FAIL_OUT_RANGE;
    static final java.lang.String DOUBLE_1;
    static final java.lang.String DOUBLE_MAX;
    static final java.lang.String DOUBLE_NEG_EXP;
    static final java.lang.String NEG_DOUBLE_1;
    static final java.lang.String DOUBLE_INF;
    static final java.lang.String NEG_DOUBLE_INF;
    static final java.lang.String DOUBLE_NAN;
    static final java.lang.String WRONG_DOUBLE_1;
    static final java.lang.String WRONG_DOUBLE_2;

    public void <init>()
    {
        TestG1ConcMarkStepDurationMillis r0;

        r0 := @this: TestG1ConcMarkStepDurationMillis;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("1.0", 0);

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("1.79e+308", 0);

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("1.0e-30", 2);

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("-1.0", 2);

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("1.79e+309", 1);

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("-1.79e+309", 1);

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("abe+309", 1);

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("1.79e+308e", 1);

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void runG1ConcMarkStepDurationMillisTest(java.lang.String,int)>("1.79ee+308", 1);

        return;
    }

    private static void runG1ConcMarkStepDurationMillisTest(java.lang.String, int) throws java.lang.Exception
    {
        java.lang.Object[] $r7;
        java.lang.String[] $r1, $r6, $r8;
        java.util.ArrayList $r0;
        byte $b2;
        int $i0, i1;
        java.lang.String r3, $r5, $r12;
        java.lang.ProcessBuilder $r9;
        java.lang.Process $r11;
        jdk.test.lib.process.OutputAnalyzer $r10;
        java.lang.StringBuilder $r2, $r4;

        r3 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "-XX:+UseG1GC";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:G1ConcMarkStepDurationMillis=");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1[1] = $r5;

        $r1[2] = "-XX:+PrintFlagsFinal";

        $r1[3] = "-version";

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, $r1);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i0];

        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        $r9 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r8);

        $r10 = new jdk.test.lib.process.OutputAnalyzer;

        $r11 = virtualinvoke $r9.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r11);

        if i1 != 0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>($b2);

        $r12 = virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        if i1 != 0 goto label3;

        staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: void checkG1ConcMarkStepDurationMillisConsistency(java.lang.String,java.lang.String)>($r12, r3);

        goto label5;

     label3:
        if i1 != 1 goto label4;

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("Improperly specified VM option");

        goto label5;

     label4:
        if i1 != 2 goto label5;

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("outside the allowed range");

     label5:
        return;
    }

    private static void checkG1ConcMarkStepDurationMillisConsistency(java.lang.String, java.lang.String)
    {
        java.lang.RuntimeException $r2;
        byte $b0;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8;
        java.lang.String r0, r1, $r4, $r9;
        double $d0, $d1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $d0 = staticinvoke <gc.arguments.TestG1ConcMarkStepDurationMillis: double getDoubleValue(java.lang.String,java.lang.String)>("G1ConcMarkStepDurationMillis", r0);

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r1);

        $b0 = $d1 cmpl $d0;

        if $b0 == 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Actual G1ConcMarkStepDurationMillis(");

        $r4 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not equal to expected value(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return;
    }

    public static double getDoubleValue(java.lang.String, java.lang.String)
    {
        java.util.regex.Matcher $r7;
        int $i0, $i1, $i2;
        java.lang.String r1, $r2, $r4, r6, $r8, $r9, $r14;
        boolean $z0;
        double $d0;
        java.lang.RuntimeException $r10;
        java.lang.StringBuilder $r0, $r3, $r11, $r12, $r13;
        java.util.regex.Pattern $r5;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\s+:?=\\s+\\d+");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r4);

        $r7 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find value for flag ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in output string");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group()>();

        $i0 = virtualinvoke $r8.<java.lang.String: int lastIndexOf(java.lang.String)>(" ");

        $i1 = $i0 + 1;

        $i2 = virtualinvoke $r8.<java.lang.String: int length()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        return $d0;
    }
}
