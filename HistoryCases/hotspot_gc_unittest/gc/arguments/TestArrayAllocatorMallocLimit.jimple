public class TestArrayAllocatorMallocLimit extends java.lang.Object
{
    private static final java.lang.String flagName;
    private static final java.lang.String printFlagsFinalPattern;

    public void <init>()
    {
        TestArrayAllocatorMallocLimit r0;

        r0 := @this: TestArrayAllocatorMallocLimit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <gc.arguments.TestArrayAllocatorMallocLimit: void testDefaultValue()>();

        staticinvoke <gc.arguments.TestArrayAllocatorMallocLimit: void testSetValue()>();

        return;
    }

    public static void testDefaultValue() throws java.lang.Exception
    {
        java.io.PrintStream $r7;
        java.lang.Process $r3;
        java.lang.String[] $r0;
        jdk.test.lib.process.OutputAnalyzer $r2;
        java.lang.Exception $r6;
        java.math.BigInteger $r5;
        java.lang.ProcessBuilder $r1;
        java.lang.String $r4, $r8;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "-XX:+UnlockExperimentalVMOptions";

        $r0[1] = "-XX:+PrintFlagsFinal";

        $r0[2] = "-version";

        $r1 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r0);

        $r2 = new jdk.test.lib.process.OutputAnalyzer;

        $r3 = virtualinvoke $r1.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r3);

        $r4 = virtualinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: java.lang.String firstMatch(java.lang.String,int)>(" *size_t *ArrayAllocatorMallocLimit *:?= *(\\d+) *\\{experimental\\} *", 1);

     label1:
        staticinvoke <jdk.test.lib.Asserts: void assertNotNull(java.lang.Object,java.lang.String)>($r4, "Couldn\'t find size_t flag ArrayAllocatorMallocLimit");

        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(java.lang.String)>($r4);

        staticinvoke <jdk.test.lib.Asserts: void assertNotEquals(java.lang.Object,java.lang.Object)>($r5, "0");

        virtualinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r8 = virtualinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r8);

        throw $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void testSetValue() throws java.lang.Exception
    {
        java.io.PrintStream $r11;
        java.lang.Process $r6;
        java.lang.String[] $r0;
        long $l0;
        jdk.test.lib.process.OutputAnalyzer $r5;
        java.lang.Exception $r10;
        java.lang.Long $r8, $r9;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r3, $r7, $r12;
        java.lang.ProcessBuilder $r4;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "-XX:+UnlockExperimentalVMOptions";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:ArrayAllocatorMallocLimit=");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(2048L);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[1] = $r3;

        $r0[2] = "-XX:+PrintFlagsFinal";

        $r0[3] = "-version";

        $r4 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r0);

        $r5 = new jdk.test.lib.process.OutputAnalyzer;

        $r6 = virtualinvoke $r4.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r5.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r6);

        $r7 = virtualinvoke $r5.<jdk.test.lib.process.OutputAnalyzer: java.lang.String firstMatch(java.lang.String,int)>(" *size_t *ArrayAllocatorMallocLimit *:?= *(\\d+) *\\{experimental\\} *", 1);

     label1:
        staticinvoke <jdk.test.lib.Asserts: void assertNotNull(java.lang.Object)>("Couldn\'t find size_t flag ArrayAllocatorMallocLimit");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r7);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2048L);

        staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        virtualinvoke $r5.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r5.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        throw $r10;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
