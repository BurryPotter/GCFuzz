public class TestSmallInitialHeapWithLargePageAndNUMA extends java.lang.Object
{
    private static final java.lang.String MSG_EXIT_TOO_SMALL_HEAP;
    private static final java.lang.String MSG_GC_TRIGGERED_BEFORE_INIT;

    public void <init>()
    {
        TestSmallInitialHeapWithLargePageAndNUMA r0;

        r0 := @this: TestSmallInitialHeapWithLargePageAndNUMA;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        long $l0, l1;
        java.lang.String[] $r1, r13;
        java.lang.String $r3, $r5, $r7, $r9;
        java.lang.ProcessBuilder $r10;
        boolean $z0;
        java.lang.Process $r12;
        sun.hotspot.WhiteBox $r0;
        jdk.test.lib.process.OutputAnalyzer $r11;
        java.lang.StringBuilder $r2, $r4, $r6, $r8;

        r13 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <sun.hotspot.WhiteBox: sun.hotspot.WhiteBox getWhiteBox()>();

        $l0 = virtualinvoke $r0.<sun.hotspot.WhiteBox: long getHeapAlignment()>();

        l1 = $l0 * 2L;

        $r1 = newarray (java.lang.String)[7];

        $r1[0] = "-XX:+UseParallelGC";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xms");

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1[1] = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1[2] = $r9;

        $r1[3] = "-XX:+UseNUMA";

        $r1[4] = "-XX:+UseHugeTLBFS";

        $r1[5] = "-XX:+PrintFlagsFinal";

        $r1[6] = "-version";

        $r10 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r1);

        $r11 = new jdk.test.lib.process.OutputAnalyzer;

        $r12 = virtualinvoke $r10.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r11.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r12);

        $z0 = staticinvoke <gc.arguments.TestSmallInitialHeapWithLargePageAndNUMA: boolean largePageOrNumaEnabled(jdk.test.lib.process.OutputAnalyzer)>($r11);

        if $z0 == 0 goto label1;

        staticinvoke <gc.arguments.TestSmallInitialHeapWithLargePageAndNUMA: void checkAnalyzerValues(jdk.test.lib.process.OutputAnalyzer,int,java.lang.String)>($r11, 1, "Failed initializing NUMA with large pages. Too small heap size");

     label1:
        return;
    }

    private static boolean largePageOrNumaEnabled(jdk.test.lib.process.OutputAnalyzer)
    {
        java.lang.String $r1;
        jdk.test.lib.process.OutputAnalyzer r0;
        boolean $z0, $z1;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        $r1 = virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("[Global flags]");

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    private static void checkAnalyzerValues(jdk.test.lib.process.OutputAnalyzer, int, java.lang.String)
    {
        int i0;
        java.lang.String $r1, r2;
        jdk.test.lib.process.OutputAnalyzer r0;
        boolean $z0;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("GC triggered before VM initialization completed.");

        if $z0 != 0 goto label1;

        virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(i0);

     label1:
        if r2 == null goto label2;

        virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>(r2);

     label2:
        return;
    }
}
