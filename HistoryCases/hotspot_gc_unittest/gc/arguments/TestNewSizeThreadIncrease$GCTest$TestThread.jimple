class TestNewSizeThreadIncrease$GCTest$TestThread extends java.lang.Thread
{
    volatile boolean isRunning;

    private void <init>()
    {
        gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread $r1;
        TestNewSizeThreadIncrease$GCTest$TestThread r0;

        r0 := @this: TestNewSizeThreadIncrease$GCTest$TestThread;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r1 = (gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread) r0;

        $r1.<gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread: boolean isRunning> = 1;

        return;
    }

    public void run()
    {
        java.lang.Throwable $r1;
        gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread $r2;
        TestNewSizeThreadIncrease$GCTest$TestThread r0;
        boolean $z0;

        r0 := @this: TestNewSizeThreadIncrease$GCTest$TestThread;

        goto label4;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        $r2 = (gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread) r0;

        $z0 = $r2.<gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread: boolean isRunning>;

        if $z0 != 0 goto label1;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void stopRunning()
    {
        gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread $r1;
        TestNewSizeThreadIncrease$GCTest$TestThread r0;

        r0 := @this: TestNewSizeThreadIncrease$GCTest$TestThread;

        $r1 = (gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread) r0;

        $r1.<gc.arguments.TestNewSizeThreadIncrease$GCTest$TestThread: boolean isRunning> = 0;

        return;
    }
}
