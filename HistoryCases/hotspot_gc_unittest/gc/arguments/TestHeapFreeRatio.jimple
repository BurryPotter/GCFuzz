public class TestHeapFreeRatio extends java.lang.Object
{
    private static int[] $SWITCH_TABLE$gc$arguments$TestHeapFreeRatio$Validation;

    public void <init>()
    {
        TestHeapFreeRatio r0;

        r0 := @this: TestHeapFreeRatio;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void testMinMaxFreeRatio(java.lang.String, java.lang.String, gc.arguments.TestHeapFreeRatio$Validation) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r20;
        gc.arguments.TestHeapFreeRatio$Validation r13;
        java.lang.String[] $r0;
        int[] $r12;
        int $i0, $i1;
        java.lang.String r2, $r4, r6, $r8, $r16, $r19, $r22;
        java.lang.ProcessBuilder $r9;
        java.io.PrintStream $r21;
        java.lang.Process $r11;
        jdk.test.lib.process.OutputAnalyzer $r10;
        java.lang.StringBuilder $r1, $r3, $r5, $r7, $r14, $r15, $r17, $r18;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r13 := @parameter2: gc.arguments.TestHeapFreeRatio$Validation;

        $r0 = newarray (java.lang.String)[3];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xminf");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[0] = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmaxf");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[1] = $r8;

        $r0[2] = "-version";

        $r9 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r0);

        $r10 = new jdk.test.lib.process.OutputAnalyzer;

        $r11 = virtualinvoke $r9.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r11);

        $r12 = staticinvoke <gc.arguments.TestHeapFreeRatio: int[] $SWITCH_TABLE$gc$arguments$TestHeapFreeRatio$Validation()>();

        $i0 = virtualinvoke r13.<gc.arguments.TestHeapFreeRatio$Validation: int ordinal()>();

        $i1 = $r12[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldNotContain(java.lang.String)>("Error");

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        goto label7;

     label2:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bad min heap free percentage size: -Xminf");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>($r19);

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("Error");

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(1);

        goto label7;

     label3:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bad max heap free percentage size: -Xmaxf");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>($r16);

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("Error");

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(1);

        goto label7;

     label4:
        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("outside the allowed range");

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("Error");

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(1);

        goto label7;

     label5:
        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("must be less than or equal to MaxHeapFreeRatio");

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("Error");

        virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(1);

        goto label7;

     label6:
        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must specify expected validation type");

        throw $r20;

     label7:
        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r22 = virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r22);

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        gc.arguments.TestHeapFreeRatio$Validation $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.String[] r18;

        r18 := @parameter0: java.lang.String[];

        $r0 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation VALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.1", "0.5", $r0);

        $r1 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation VALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>(".1", ".5", $r1);

        $r2 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation VALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.5", "0.5", $r2);

        $r3 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation MIN_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("=0.1", "0.5", $r3);

        $r4 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation MIN_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.1f", "0.5", $r4);

        $r5 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation MIN_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("INVALID", "0.5", $r5);

        $r6 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation MAX_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.1", "0.5f", $r6);

        $r7 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation MAX_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.1", "=0.5", $r7);

        $r8 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation MAX_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.1", "INVALID", $r8);

        $r9 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation OUT_OF_RANGE>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("-0.1", "0.5", $r9);

        $r10 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation OUT_OF_RANGE>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("1.1", "0.5", $r10);

        $r11 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation OUT_OF_RANGE>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("2147483647", "0.5", $r11);

        $r12 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation OUT_OF_RANGE>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.1", "-0.5", $r12);

        $r13 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation OUT_OF_RANGE>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.1", "1.5", $r13);

        $r14 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation OUT_OF_RANGE>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.1", "2147483647", $r14);

        $r15 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation COMBINATION_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.5", "0.1", $r15);

        $r16 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation COMBINATION_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>(".5", ".10", $r16);

        $r17 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation COMBINATION_INVALID>;

        staticinvoke <gc.arguments.TestHeapFreeRatio: void testMinMaxFreeRatio(java.lang.String,java.lang.String,gc.arguments.TestHeapFreeRatio$Validation)>("0.12", "0.100", $r17);

        return;
    }

    static int[] $SWITCH_TABLE$gc$arguments$TestHeapFreeRatio$Validation()
    {
        gc.arguments.TestHeapFreeRatio$Validation $r3, $r4, $r5, $r6, $r7;
        java.lang.NoSuchFieldError $r8, $r9, $r10, $r11, $r12;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        gc.arguments.TestHeapFreeRatio$Validation[] $r1;

        $r0 = <gc.arguments.TestHeapFreeRatio: int[] $SWITCH_TABLE$gc$arguments$TestHeapFreeRatio$Validation>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation COMBINATION_INVALID>;

        $i1 = virtualinvoke $r3.<gc.arguments.TestHeapFreeRatio$Validation: int ordinal()>();

        r2[$i1] = 5;

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

     label05:
        $r4 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation MAX_INVALID>;

        $i2 = virtualinvoke $r4.<gc.arguments.TestHeapFreeRatio$Validation: int ordinal()>();

        r2[$i2] = 3;

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

     label08:
        $r5 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation MIN_INVALID>;

        $i3 = virtualinvoke $r5.<gc.arguments.TestHeapFreeRatio$Validation: int ordinal()>();

        r2[$i3] = 2;

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

     label11:
        $r6 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation OUT_OF_RANGE>;

        $i4 = virtualinvoke $r6.<gc.arguments.TestHeapFreeRatio$Validation: int ordinal()>();

        r2[$i4] = 4;

     label12:
        goto label14;

     label13:
        $r9 := @caughtexception;

     label14:
        $r7 = <gc.arguments.TestHeapFreeRatio$Validation: gc.arguments.TestHeapFreeRatio$Validation VALID>;

        $i5 = virtualinvoke $r7.<gc.arguments.TestHeapFreeRatio$Validation: int ordinal()>();

        r2[$i5] = 1;

     label15:
        goto label17;

     label16:
        $r8 := @caughtexception;

     label17:
        <gc.arguments.TestHeapFreeRatio: int[] $SWITCH_TABLE$gc$arguments$TestHeapFreeRatio$Validation> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
    }
}
