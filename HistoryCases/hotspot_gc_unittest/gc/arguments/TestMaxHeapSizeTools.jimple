class TestMaxHeapSizeTools extends java.lang.Object
{

    void <init>()
    {
        TestMaxHeapSizeTools r0;

        r0 := @this: TestMaxHeapSizeTools;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkMinInitialMaxHeapFlags(java.lang.String) throws java.lang.Exception
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkInvalidMinInitialHeapCombinations(java.lang.String)>(r0);

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkValidMinInitialHeapCombinations(java.lang.String)>(r0);

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkInvalidInitialMaxHeapCombinations(java.lang.String)>(r0);

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkValidInitialMaxHeapCombinations(java.lang.String)>(r0);

        return;
    }

    public static void checkMinInitialErgonomics(java.lang.String) throws java.lang.Exception
    {
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r10, $r11, $r14, $r15, $r17, $r18, $r21, $r22, $r25, $r26, $r29, $r30, $r32, $r33, $r36, $r37, $r39, $r40, $r43, $r44, $r47, $r48, $r50, $r51, $r54, $r55, $r57, $r58, $r60, $r61, $r64, $r65, $r67, $r68, $r70, $r71, $r74, $r75, $r77, $r78, $r81, $r82, $r84, $r85, $r88, $r89, $r91, $r92;
        long $l0, $l1, l2, l3, l4, l5;
        java.lang.String r1, $r5, $r9, $r12, $r16, $r19, $r23, $r27, $r31, $r34, $r38, $r41, $r45, $r49, $r52, $r56, $r59, $r62, $r66, $r69, $r72, $r76, $r79, $r83, $r86, $r90, $r93;
        java.lang.String[] $r2, $r6, $r13, $r20, $r24, $r28, $r35, $r42, $r46, $r53, $r63, $r73, $r80, $r87;
        long[] r0;

        r1 := @parameter0: java.lang.String;

        r0 = newarray (long)[2];

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void getNewOldSize(java.lang.String,long[])>(r1, r0);

        $l1 = r0[0];

        $l0 = r0[1];

        l2 = $l1 + $l0;

        l3 = l2 / 2L;

        l4 = l2 * 2L;

        l5 = l4 + 2097152L;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = r1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2[1] = $r5;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r2, r0, -1L, -1L);

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = r1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[1] = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:InitialHeapSize=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[2] = $r12;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r6, r0, -1L, l3);

        $r13 = newarray (java.lang.String)[3];

        $r13[0] = r1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[1] = $r16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:InitialHeapSize=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[2] = $r19;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r13, r0, -1L, l4);

        $r20 = newarray (java.lang.String)[3];

        $r20[0] = r1;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20[1] = $r23;

        $r20[2] = "-XX:InitialHeapSize=0";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r20, r0, -1L, -1L);

        $r24 = newarray (java.lang.String)[3];

        $r24[0] = r1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24[1] = $r27;

        $r24[2] = "-Xms0";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r24, r0, -1L, -1L);

        $r28 = newarray (java.lang.String)[4];

        $r28[0] = r1;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[1] = $r31;

        $r28[2] = "-Xms0";

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:InitialHeapSize=");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[3] = $r34;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r28, r0, -1L, l3);

        $r35 = newarray (java.lang.String)[4];

        $r35[0] = r1;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35[1] = $r38;

        $r35[2] = "-Xms0";

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:InitialHeapSize=");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35[3] = $r41;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r35, r0, -1L, l4);

        $r42 = newarray (java.lang.String)[4];

        $r42[0] = r1;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42[1] = $r45;

        $r42[2] = "-Xms0";

        $r42[3] = "-XX:InitialHeapSize=0";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r42, r0, -1L, -1L);

        $r46 = newarray (java.lang.String)[3];

        $r46[0] = r1;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r46[1] = $r49;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xms");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r46[2] = $r52;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r46, r0, -1L, -1L);

        $r53 = newarray (java.lang.String)[4];

        $r53[0] = r1;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r53[1] = $r56;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xms");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r53[2] = $r59;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:InitialHeapSize=");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        $r53[3] = $r62;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r53, r0, l3, l3);

        $r63 = newarray (java.lang.String)[4];

        $r63[0] = r1;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r63[1] = $r66;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xms");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        $r63[2] = $r69;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:InitialHeapSize=");

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        $r63[3] = $r72;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r63, r0, l3, l4);

        $r73 = newarray (java.lang.String)[4];

        $r73[0] = r1;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        $r73[1] = $r76;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xms");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        $r73[2] = $r79;

        $r73[3] = "-XX:InitialHeapSize=0";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r73, r0, l3, -1L);

        $r80 = newarray (java.lang.String)[3];

        $r80[0] = r1;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        $r80[1] = $r83;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xms");

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        $r80[2] = $r86;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r80, r0, l4, l4);

        $r87 = newarray (java.lang.String)[4];

        $r87[0] = r1;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xmx");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        $r87[1] = $r90;

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>(java.lang.String)>("-Xms");

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        $r87[2] = $r93;

        $r87[3] = "-XX:InitialHeapSize=0";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkErgonomics(java.lang.String[],long[],long,long)>($r87, r0, l4, -1L);

        return;
    }

    private static long align_up(long, long)
    {
        long l0, l1, l2, $l3, $l4, $l5;

        l2 := @parameter0: long;

        l0 := @parameter1: long;

        l1 = l0 - 1L;

        $l4 = l2 + l1;

        $l3 = l1 ^ -1L;

        $l5 = $l4 & $l3;

        return $l5;
    }

    private static void getNewOldSize(java.lang.String, long[]) throws java.lang.Exception
    {
        java.lang.Process $r4;
        java.lang.String[] $r0;
        long $l0, $l1;
        jdk.test.lib.process.OutputAnalyzer $r3;
        long[] r6;
        java.lang.String r1, $r5;
        java.lang.ProcessBuilder $r2;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: long[];

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = r1;

        $r0[1] = "-XX:+PrintFlagsFinal";

        $r0[2] = "-version";

        $r2 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r0);

        $r3 = new jdk.test.lib.process.OutputAnalyzer;

        $r4 = virtualinvoke $r2.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r3.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r4);

        virtualinvoke $r3.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        $r5 = virtualinvoke $r3.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        $l0 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long getFlagValue(java.lang.String,java.lang.String)>(" NewSize", $r5);

        r6[0] = $l0;

        $l1 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long getFlagValue(java.lang.String,java.lang.String)>(" OldSize", $r5);

        r6[1] = $l1;

        return;
    }

    public static void checkGenMaxHeapErgo(java.lang.String) throws java.lang.Exception
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkGenMaxHeapSize(java.lang.String,long)>(r0, 4L);

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void checkGenMaxHeapSize(java.lang.String,long)>(r0, 5L);

        return;
    }

    private static void checkInvalidMinInitialHeapCombinations(java.lang.String) throws java.lang.Exception
    {
        java.lang.String[] $r0, $r2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = r1;

        $r0[1] = "-XX:InitialHeapSize=1023K";

        $r0[2] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectError(java.lang.String[])>($r0);

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = r1;

        $r2[1] = "-Xms64M";

        $r2[2] = "-XX:InitialHeapSize=32M";

        $r2[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectError(java.lang.String[])>($r2);

        return;
    }

    private static void checkValidMinInitialHeapCombinations(java.lang.String) throws java.lang.Exception
    {
        java.lang.String[] $r0, $r2, $r3, $r4, $r5;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = r1;

        $r0[1] = "-XX:InitialHeapSize=1024K";

        $r0[2] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r0);

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = r1;

        $r2[1] = "-XX:InitialHeapSize=8M";

        $r2[2] = "-Xms4M";

        $r2[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r2);

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = r1;

        $r3[1] = "-Xms4M";

        $r3[2] = "-XX:InitialHeapSize=8M";

        $r3[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r3);

        $r4 = newarray (java.lang.String)[4];

        $r4[0] = r1;

        $r4[1] = "-XX:InitialHeapSize=8M";

        $r4[2] = "-Xms8M";

        $r4[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r4);

        $r5 = newarray (java.lang.String)[4];

        $r5[0] = r1;

        $r5[1] = "-XX:InitialHeapSize=4M";

        $r5[2] = "-Xms8M";

        $r5[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r5);

        return;
    }

    private static void checkInvalidInitialMaxHeapCombinations(java.lang.String) throws java.lang.Exception
    {
        java.lang.String[] $r0, $r2, $r3;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = r1;

        $r0[1] = "-XX:MaxHeapSize=2047K";

        $r0[2] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectError(java.lang.String[])>($r0);

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = r1;

        $r2[1] = "-XX:MaxHeapSize=4M";

        $r2[2] = "-XX:InitialHeapSize=8M";

        $r2[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectError(java.lang.String[])>($r2);

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = r1;

        $r3[1] = "-XX:InitialHeapSize=8M";

        $r3[2] = "-XX:MaxHeapSize=4M";

        $r3[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectError(java.lang.String[])>($r3);

        return;
    }

    private static void checkValidInitialMaxHeapCombinations(java.lang.String) throws java.lang.Exception
    {
        java.lang.String[] $r0, $r2, $r3, $r4;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = r1;

        $r0[1] = "-XX:InitialHeapSize=4M";

        $r0[2] = "-XX:MaxHeapSize=8M";

        $r0[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r0);

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = r1;

        $r2[1] = "-XX:MaxHeapSize=8M";

        $r2[2] = "-XX:InitialHeapSize=4M";

        $r2[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r2);

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = r1;

        $r3[1] = "-XX:MaxHeapSize=4M";

        $r3[2] = "-XX:InitialHeapSize=4M";

        $r3[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r3);

        $r4 = newarray (java.lang.String)[4];

        $r4[0] = r1;

        $r4[1] = "-XX:MaxHeapSize=4M";

        $r4[2] = "-XX:InitialHeapSize=0M";

        $r4[3] = "-version";

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expectValid(java.lang.String[])>($r4);

        return;
    }

    private static long valueAfter(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r3;
        long $l3;
        int $i0, $i1, i2;
        java.lang.String r0, r1, $r2, r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = $i0 + $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        r4 = $r3[0];

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4);

        return $l3;
    }

    public static jdk.test.lib.process.OutputAnalyzer runWhiteBoxTest(java.lang.String[], java.lang.String, java.lang.String[], boolean) throws java.lang.Exception
    {
        java.lang.Object[] $r15;
        java.lang.String[] $r1, r3, r5, r9, $r14, $r16;
        java.util.ArrayList $r0;
        int $i0;
        java.lang.String $r2, r4, $r6, $r7, $r8;
        java.lang.ProcessBuilder $r17;
        boolean z0;
        java.lang.Process $r19;
        jdk.test.lib.process.OutputAnalyzer $r18;
        java.util.List $r10, $r11, $r12, $r13;

        r3 := @parameter0: java.lang.String[];

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = newarray (java.lang.String)[5];

        $r1[0] = "-Xbootclasspath/a:.";

        $r1[1] = "-XX:+UnlockDiagnosticVMOptions";

        $r1[2] = "-XX:+WhiteBoxAPI";

        $r1[3] = "-cp";

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r1[4] = $r2;

        if z0 == 0 goto label2;

        r9 = newarray (java.lang.String)[0];

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("test.java.opts");

        if $r6 == null goto label1;

        $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("test.java.opts");

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("test.java.opts");

        r9 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

     label1:
        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r9);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r10);

     label2:
        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r11);

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r12);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r13);

        $r14 = newarray (java.lang.String)[0];

        $r15 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r16 = (java.lang.String[]) $r15;

        $r17 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r16);

        $r18 = new jdk.test.lib.process.OutputAnalyzer;

        $r19 = virtualinvoke $r17.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r18.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r19);

        virtualinvoke $r18.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        return $r18;
    }

    private static void getMinInitialMaxHeap(java.lang.String[], gc.arguments.MinInitialMaxValues) throws java.lang.Exception
    {
        java.lang.String[] r0, $r3;
        long $l0, $l1, $l2, $l3, $l4;
        java.util.regex.Matcher $r7;
        java.lang.String $r2, $r6, $r8;
        boolean $z0;
        gc.arguments.MinInitialMaxValues r9;
        java.lang.RuntimeException $r10;
        jdk.test.lib.process.OutputAnalyzer $r4;
        java.lang.Class $r1;
        java.util.regex.Pattern $r5;

        r0 := @parameter0: java.lang.String[];

        r9 := @parameter1: gc.arguments.MinInitialMaxValues;

        $r1 = class "Lgc/arguments/ErgoArgsPrinter;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = newarray (java.lang.String)[0];

        $r4 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: jdk.test.lib.process.OutputAnalyzer runWhiteBoxTest(java.lang.String[],java.lang.String,java.lang.String[],boolean)>(r0, $r2, $r3, 0);

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("Minimum heap \\d+ Initial heap \\d+ Maximum heap \\d+ Space alignment \\d+ Heap alignment \\d+");

        $r6 = virtualinvoke $r4.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        $r7 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not find heap size string.");

        throw $r10;

     label1:
        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group()>();

        $l0 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long valueAfter(java.lang.String,java.lang.String)>($r8, "Minimum heap ");

        r9.<gc.arguments.MinInitialMaxValues: long minHeapSize> = $l0;

        $l1 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long valueAfter(java.lang.String,java.lang.String)>($r8, "Initial heap ");

        r9.<gc.arguments.MinInitialMaxValues: long initialHeapSize> = $l1;

        $l2 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long valueAfter(java.lang.String,java.lang.String)>($r8, "Maximum heap ");

        r9.<gc.arguments.MinInitialMaxValues: long maxHeapSize> = $l2;

        $l3 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long valueAfter(java.lang.String,java.lang.String)>($r8, "Space alignment ");

        r9.<gc.arguments.MinInitialMaxValues: long spaceAlignment> = $l3;

        $l4 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long valueAfter(java.lang.String,java.lang.String)>($r8, "Heap alignment ");

        r9.<gc.arguments.MinInitialMaxValues: long heapAlignment> = $l4;

        return;
    }

    public static void checkErgonomics(java.lang.String[], long[], long, long) throws java.lang.Exception
    {
        byte $b1, $b3, $b6, $b12, $b16, $b21;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r18, $r19, $r20, $r24, $r26, $r28;
        java.lang.String[] r1;
        long l0, l2, $l4, $l5, $l7, $l8, $l9, $l10, $l11, $l13, $l14, $l15, $l17, $l18, $l19, $l20, $l22;
        long[] r22;
        int $i23, $i24;
        java.lang.String $r9, $r15, $r21;
        gc.arguments.MinInitialMaxValues $r23;
        java.lang.RuntimeException $r25, $r27, $r29;

        r1 := @parameter0: java.lang.String[];

        r22 := @parameter1: long[];

        l0 := @parameter2: long;

        l2 := @parameter3: long;

        $r23 = new gc.arguments.MinInitialMaxValues;

        specialinvoke $r23.<gc.arguments.MinInitialMaxValues: void <init>()>();

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void getMinInitialMaxHeap(java.lang.String[],gc.arguments.MinInitialMaxValues)>(r1, $r23);

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l18 = $r23.<gc.arguments.MinInitialMaxValues: long heapAlignment>;

        $l19 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long align_up(long,long)>(l0, $l18);

        $l20 = $r23.<gc.arguments.MinInitialMaxValues: long minHeapSize>;

        $b21 = $l19 cmp $l20;

        if $b21 == 0 goto label1;

        $r25 = new java.lang.RuntimeException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Actual minimum heap size of ");

        $l22 = $r23.<gc.arguments.MinInitialMaxValues: long minHeapSize>;

        $r18 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l22);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" differs from expected minimum heap size of ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r25;

     label1:
        $b3 = l2 cmp -1L;

        if $b3 == 0 goto label2;

        $l13 = $r23.<gc.arguments.MinInitialMaxValues: long heapAlignment>;

        $l14 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long align_up(long,long)>(l2, $l13);

        $l15 = $r23.<gc.arguments.MinInitialMaxValues: long initialHeapSize>;

        $b16 = $l14 cmp $l15;

        if $b16 == 0 goto label2;

        $r27 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Actual initial heap size of ");

        $l17 = $r23.<gc.arguments.MinInitialMaxValues: long initialHeapSize>;

        $r12 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l17);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" differs from expected initial heap size of ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r27;

     label2:
        $l5 = $r23.<gc.arguments.MinInitialMaxValues: long minHeapSize>;

        $l4 = $r23.<gc.arguments.MinInitialMaxValues: long initialHeapSize>;

        $b6 = $l5 cmp $l4;

        $i23 = (int) $b6;

        if $i23 > 0 goto label3;

        $l11 = $r23.<gc.arguments.MinInitialMaxValues: long initialHeapSize>;

        $l10 = $r23.<gc.arguments.MinInitialMaxValues: long maxHeapSize>;

        $b12 = $l11 cmp $l10;

        $i24 = (int) $b12;

        if $i24 <= 0 goto label4;

     label3:
        $r29 = new java.lang.RuntimeException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Inconsistent min/initial/max heap sizes, they are ");

        $l7 = $r23.<gc.arguments.MinInitialMaxValues: long minHeapSize>;

        $r4 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $l8 = $r23.<gc.arguments.MinInitialMaxValues: long initialHeapSize>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $l9 = $r23.<gc.arguments.MinInitialMaxValues: long maxHeapSize>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r29;

     label4:
        return;
    }

    public static void checkGenMaxHeapSize(java.lang.String, long) throws java.lang.Exception
    {
        java.lang.String[] $r1;
        long l0, $l1, $l2, $l3, $l4, l5;
        byte $b6;
        int $i7;
        java.lang.String r2, $r6, $r12;
        gc.arguments.MinInitialMaxValues $r13;
        java.lang.RuntimeException $r16;
        java.lang.StringBuilder $r4, $r5, $r9, $r10, $r11, $r14, $r15;

        r2 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r13 = new gc.arguments.MinInitialMaxValues;

        specialinvoke $r13.<gc.arguments.MinInitialMaxValues: void <init>()>();

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = r2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:MaxHeapSize=");

        $r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("M");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1[1] = $r6;

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void getMinInitialMaxHeap(java.lang.String[],gc.arguments.MinInitialMaxValues)>($r1, $r13);

        $l1 = l0 * 1024L;

        $l3 = $l1 * 1024L;

        $l2 = $r13.<gc.arguments.MinInitialMaxValues: long heapAlignment>;

        $l4 = staticinvoke <gc.arguments.TestMaxHeapSizeTools: long align_up(long,long)>($l3, $l2);

        l5 = $r13.<gc.arguments.MinInitialMaxValues: long maxHeapSize>;

        $b6 = l5 cmp $l4;

        $i7 = (int) $b6;

        if $i7 <= 0 goto label1;

        $r16 = new java.lang.RuntimeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Heap has ");

        $r9 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, expected to be less than ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r16;

     label1:
        return;
    }

    private static long getFlagValue(java.lang.String, java.lang.String)
    {
        long $l3;
        java.util.regex.Matcher $r7;
        int $i0, $i1, $i2;
        java.lang.String r1, $r2, $r4, r6, $r8, $r9, $r14;
        boolean $z0;
        java.lang.RuntimeException $r10;
        java.lang.StringBuilder $r0, $r3, $r11, $r12, $r13;
        java.util.regex.Pattern $r5;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\s+:?=\\s+\\d+");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r4);

        $r7 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find value for flag ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in output string");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group()>();

        $i0 = virtualinvoke $r8.<java.lang.String: int lastIndexOf(java.lang.String)>(" ");

        $i1 = $i0 + 1;

        $i2 = virtualinvoke $r8.<java.lang.String: int length()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r9);

        return $l3;
    }

    private static void shouldContainOrNot(jdk.test.lib.process.OutputAnalyzer, boolean, java.lang.String) throws java.lang.Exception
    {
        java.lang.String r1;
        jdk.test.lib.process.OutputAnalyzer r0;
        boolean z0;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        if z0 == 0 goto label1;

        virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldNotContain(java.lang.String)>(r1);

     label2:
        return;
    }

    private static void expect(java.lang.String[], boolean, boolean, int) throws java.lang.Exception
    {
        java.lang.Process $r3;
        int i0;
        java.lang.String[] r0;
        java.lang.ProcessBuilder $r1;
        jdk.test.lib.process.OutputAnalyzer $r2;
        boolean z0, z1;

        r0 := @parameter0: java.lang.String[];

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r1 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>(r0);

        $r2 = new jdk.test.lib.process.OutputAnalyzer;

        $r3 = virtualinvoke $r1.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r3);

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void shouldContainOrNot(jdk.test.lib.process.OutputAnalyzer,boolean,java.lang.String)>($r2, z0, "Warning");

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void shouldContainOrNot(jdk.test.lib.process.OutputAnalyzer,boolean,java.lang.String)>($r2, z1, "Error");

        virtualinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(i0);

        return;
    }

    private static void expectError(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expect(java.lang.String[],boolean,boolean,int)>(r0, 0, 1, 1);

        return;
    }

    private static void expectValid(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <gc.arguments.TestMaxHeapSizeTools: void expect(java.lang.String[],boolean,boolean,int)>(r0, 0, 0, 0);

        return;
    }
}
