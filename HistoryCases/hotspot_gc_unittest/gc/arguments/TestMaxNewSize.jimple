public class TestMaxNewSize extends java.lang.Object
{

    public void <init>()
    {
        TestMaxNewSize r0;

        r0 := @this: TestMaxNewSize;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void checkMaxNewSize(java.lang.String[], int) throws java.lang.Exception
    {
        java.lang.String[] r1;
        long $l1;
        java.lang.Long $r5;
        int i0, $i2;
        java.math.BigInteger $r0, $r4;
        java.lang.String $r2, $r6, $r12, $r14;
        java.io.PrintStream $r3;
        java.lang.RuntimeException $r7;
        java.util.List $r11;
        java.lang.StringBuilder $r8, $r9, $r10, $r13;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r0 = new java.math.BigInteger;

        $r2 = staticinvoke <gc.arguments.TestMaxNewSize: java.lang.String getMaxNewSize(java.lang.String[])>(r1);

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String)>($r2);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.Object)>($r0);

        $r4 = new java.math.BigInteger;

        $r5 = new java.lang.Long;

        $l1 = (long) i0;

        specialinvoke $r5.<java.lang.Long: void <init>(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.Long: java.lang.String toString()>();

        specialinvoke $r4.<java.math.BigInteger: void <init>(java.lang.String)>($r6);

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i2 != 1 goto label1;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("MaxNewSize value set to \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", expected otherwise when running with the following flags: ");

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label1:
        return;
    }

    private static void checkIncompatibleNewSize(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.Object[] $r4;
        java.lang.Process $r8;
        java.lang.String[] r1, $r3, $r5;
        jdk.test.lib.process.OutputAnalyzer $r7;
        java.util.ArrayList $r0;
        java.util.List $r2;
        java.lang.ProcessBuilder $r6;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r2);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("-version");

        $r3 = newarray (java.lang.String)[0];

        $r4 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        $r6 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r5);

        $r7 = new jdk.test.lib.process.OutputAnalyzer;

        $r8 = virtualinvoke $r6.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r8);

        virtualinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("Initial young gen size set larger than the maximum young gen size");

        return;
    }

    private static boolean isRunningG1(java.lang.String[])
    {
        int $i0, i1;
        java.lang.String[] r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        i1 = 0;

        goto label3;

     label1:
        $r1 = r0[i1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("+UseG1GC");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = lengthof r0;

        if i1 < $i0 goto label1;

        return 0;
    }

    private static java.lang.String getMaxNewSize(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.Object[] $r4;
        java.lang.Process $r8;
        java.lang.String[] r1, $r3, $r5;
        jdk.test.lib.process.OutputAnalyzer $r7;
        java.util.ArrayList $r0;
        java.util.List $r2;
        java.lang.ProcessBuilder $r6;
        java.lang.String $r9, $r10;
        boolean $z0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r2);

        $z0 = staticinvoke <gc.arguments.TestMaxNewSize: boolean isRunningG1(java.lang.String[])>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("-XX:G1HeapRegionSize=1M");

     label1:
        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("-XX:+PrintFlagsFinal");

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("-version");

        $r3 = newarray (java.lang.String)[0];

        $r4 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        $r6 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r5);

        $r7 = new jdk.test.lib.process.OutputAnalyzer;

        $r8 = virtualinvoke $r6.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r8);

        virtualinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        $r9 = virtualinvoke $r7.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        $r10 = staticinvoke <gc.arguments.TestMaxNewSize: java.lang.String getFlagValue(java.lang.String,java.lang.String)>("MaxNewSize", $r9);

        return $r10;
    }

    private static java.lang.String getFlagValue(java.lang.String, java.lang.String)
    {
        java.util.regex.Matcher $r7;
        int $i0, $i1, $i2;
        java.lang.String r1, $r2, $r4, r6, $r8, $r9, $r14;
        boolean $z0;
        java.lang.RuntimeException $r10;
        java.lang.StringBuilder $r0, $r3, $r11, $r12, $r13;
        java.util.regex.Pattern $r5;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\s+:?=\\s+\\d+");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r4);

        $r7 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find value for flag ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in output string");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group()>();

        $i0 = virtualinvoke $r8.<java.lang.String: int lastIndexOf(java.lang.String)>(" ");

        $i1 = $i0 + 1;

        $i2 = virtualinvoke $r8.<java.lang.String: int length()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        return $r9;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String r1;

        r0 := @parameter0: java.lang.String[];

        r1 = r0[0];

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = r1;

        $r2[1] = "-Xmx128M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r2, 134217728);

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = r1;

        $r3[1] = "-Xmx128M";

        $r3[2] = "-XX:NewRatio=5";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r3, 134217728);

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = r1;

        $r4[1] = "-Xmx128M";

        $r4[2] = "-XX:NewSize=32M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r4, 134217728);

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = r1;

        $r5[1] = "-Xmx128M";

        $r5[2] = "-XX:OldSize=96M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r5, 134217728);

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = r1;

        $r6[1] = "-Xmx128M";

        $r6[2] = "-XX:MaxNewSize=32M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r6, 33554432);

        $r7 = newarray (java.lang.String)[4];

        $r7[0] = r1;

        $r7[1] = "-Xmx128M";

        $r7[2] = "-XX:NewSize=32M";

        $r7[3] = "-XX:MaxNewSize=32M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r7, 33554432);

        $r8 = newarray (java.lang.String)[4];

        $r8[0] = r1;

        $r8[1] = "-Xmx128M";

        $r8[2] = "-XX:NewRatio=6";

        $r8[3] = "-XX:MaxNewSize=32M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r8, 33554432);

        $r9 = newarray (java.lang.String)[3];

        $r9[0] = r1;

        $r9[1] = "-Xmx128M";

        $r9[2] = "-Xms96M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r9, 134217728);

        $r10 = newarray (java.lang.String)[3];

        $r10[0] = r1;

        $r10[1] = "-Xmx96M";

        $r10[2] = "-Xms96M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r10, 100663296);

        $r11 = newarray (java.lang.String)[3];

        $r11[0] = r1;

        $r11[1] = "-XX:NewSize=128M";

        $r11[2] = "-XX:MaxNewSize=50M";

        staticinvoke <gc.arguments.TestMaxNewSize: void checkMaxNewSize(java.lang.String[],int)>($r11, 134217728);

        return;
    }
}
