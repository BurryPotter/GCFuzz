class Churn1$ThreadObject extends java.lang.Object implements java.lang.Runnable
{
    private nsk.share.gc.AllMemoryObject[] objectArray;
    final gc.memory.Churn.Churn1.Churn1 this$0;

    public void <init>(gc.memory.Churn.Churn1.Churn1)
    {
        Churn1$ThreadObject r0;
        nsk.share.gc.AllMemoryObject[] $r2, $r4;
        gc.memory.Churn.Churn1.Churn1$ThreadObject $r6, $r7, $r8;
        nsk.share.gc.AllMemoryObject $r5;
        gc.memory.Churn.Churn1.Churn1 r1;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: Churn1$ThreadObject;

        r1 := @parameter0: gc.memory.Churn.Churn1.Churn1;

        $r6 = (gc.memory.Churn.Churn1.Churn1$ThreadObject) r0;

        $r6.<gc.memory.Churn.Churn1.Churn1$ThreadObject: gc.memory.Churn.Churn1.Churn1 this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = r1.<gc.memory.Churn.Churn1.Churn1: int sizeOfArray>;

        $r2 = newarray (nsk.share.gc.AllMemoryObject)[$i0];

        $r7 = (gc.memory.Churn.Churn1.Churn1$ThreadObject) r0;

        $r7.<gc.memory.Churn.Churn1.Churn1$ThreadObject: nsk.share.gc.AllMemoryObject[] objectArray> = $r2;

        i4 = 0;

        goto label2;

     label1:
        $r8 = (gc.memory.Churn.Churn1.Churn1$ThreadObject) r0;

        $r4 = $r8.<gc.memory.Churn.Churn1.Churn1$ThreadObject: nsk.share.gc.AllMemoryObject[] objectArray>;

        $r5 = new nsk.share.gc.AllMemoryObject;

        $i2 = r1.<gc.memory.Churn.Churn1.Churn1: int multiplier>;

        $i3 = $i2 * i4;

        specialinvoke $r5.<nsk.share.gc.AllMemoryObject: void <init>(int)>($i3);

        $r4[i4] = $r5;

        i4 = i4 + 1;

     label2:
        $i1 = r1.<gc.memory.Churn.Churn1.Churn1: int sizeOfArray>;

        if i4 < $i1 goto label1;

        return;
    }

    public void run()
    {
        Churn1$ThreadObject r0;
        nsk.share.gc.AllMemoryObject[] $r4;
        gc.memory.Churn.Churn1.Churn1$ThreadObject $r6, $r7, $r8;
        nsk.share.gc.AllMemoryObject $r5;
        gc.memory.Churn.Churn1.Churn1 $r1, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: Churn1$ThreadObject;

        $r6 = (gc.memory.Churn.Churn1.Churn1$ThreadObject) r0;

        $r1 = $r6.<gc.memory.Churn.Churn1.Churn1$ThreadObject: gc.memory.Churn.Churn1.Churn1 this$0>;

        $i0 = $r1.<gc.memory.Churn.Churn1.Churn1: int sizeOfArray>;

        $i1 = staticinvoke <nsk.share.test.LocalRandom: int nextInt(int)>($i0);

        $r7 = (gc.memory.Churn.Churn1.Churn1$ThreadObject) r0;

        $r4 = $r7.<gc.memory.Churn.Churn1.Churn1$ThreadObject: nsk.share.gc.AllMemoryObject[] objectArray>;

        $r5 = new nsk.share.gc.AllMemoryObject;

        $r8 = (gc.memory.Churn.Churn1.Churn1$ThreadObject) r0;

        $r3 = $r8.<gc.memory.Churn.Churn1.Churn1$ThreadObject: gc.memory.Churn.Churn1.Churn1 this$0>;

        $i2 = $r3.<gc.memory.Churn.Churn1.Churn1: int multiplier>;

        $i3 = $i2 * $i1;

        specialinvoke $r5.<nsk.share.gc.AllMemoryObject: void <init>(int)>($i3);

        $r4[$i1] = $r5;

        return;
    }
}
