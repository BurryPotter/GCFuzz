public class Juggle2 extends nsk.share.gc.ThreadedGCTest
{
    private int arraySize;
    private int objectSize;
    private int maxLinkLength;
    private int maxCopySize;
    private int threadsCount;
    private nsk.share.gc.LinkedMemoryObject[] mainArray;

    public void <init>()
    {
        gc.memory.Array.ArrayJuggle.Juggle2.Juggle2 $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1;
        Juggle2 r0;

        r0 := @this: Juggle2;

        specialinvoke r0.<nsk.share.gc.ThreadedGCTest: void <init>()>();

        $r1 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r1.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize> = 1000;

        $r2 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r2.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int objectSize> = 1000;

        $r3 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r3.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int maxLinkLength> = 100;

        $r4 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i0 = $r4.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize>;

        $i1 = $i0 / 10;

        $r5 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r5.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int maxCopySize> = $i1;

        $r6 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r6.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int threadsCount> = 30;

        return;
    }

    protected java.lang.Runnable createRunnable(int)
    {
        gc.memory.Array.ArrayJuggle.Juggle2.Juggle2 $r7, $r9, $r11;
        java.lang.Runnable $r8, $r10, $r12;
        gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$MainArrayWalker $r4;
        gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$LinkMaker $r5;
        int i0, $i1;
        gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$CopyingThread $r6;
        Juggle2 r1;

        r1 := @this: Juggle2;

        i0 := @parameter0: int;

        $i1 = i0 % 3;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label3;
        };

     label1:
        $r4 = new gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$MainArrayWalker;

        $r7 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r1;

        specialinvoke $r4.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$MainArrayWalker: void <init>(gc.memory.Array.ArrayJuggle.Juggle2.Juggle2)>($r7);

        $r8 = (java.lang.Runnable) $r4;

        return $r8;

     label2:
        $r5 = new gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$LinkMaker;

        $r9 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r1;

        specialinvoke $r5.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$LinkMaker: void <init>(gc.memory.Array.ArrayJuggle.Juggle2.Juggle2)>($r9);

        $r10 = (java.lang.Runnable) $r5;

        return $r10;

     label3:
        $r6 = new gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$CopyingThread;

        $r11 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r1;

        specialinvoke $r6.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2$CopyingThread: void <init>(gc.memory.Array.ArrayJuggle.Juggle2.Juggle2)>($r11);

        $r12 = (java.lang.Runnable) $r6;

        return $r12;
    }

    public void run()
    {
        nsk.share.runner.RunParams $r1;
        gc.memory.Array.ArrayJuggle.Juggle2.Juggle2 $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        java.lang.StringBuilder $r4, $r8;
        long $l0, $l3;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r5;
        java.io.PrintStream $r3;
        nsk.share.gc.LinkedMemoryObject[] $r6, $r7;
        Juggle2 r0;

        r0 := @this: Juggle2;

        staticinvoke <nsk.share.gc.Memory: int getReferenceSize()>();

        staticinvoke <nsk.share.gc.Memory: int getObjectExtraSize()>();

        $r9 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r1 = $r9.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: nsk.share.runner.RunParams runParams>;

        $l0 = virtualinvoke $r1.<nsk.share.runner.RunParams: long getTestMemory()>();

        $r10 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i2 = $r10.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int maxLinkLength>;

        $r11 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i1 = $r11.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int objectSize>;

        $l3 = staticinvoke <nsk.share.gc.Memory: long getListSize(int,int)>($i2, $i1);

        $i4 = staticinvoke <nsk.share.gc.Memory: int getArrayLength(long,long)>($l0, $l3);

        $r12 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r12.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize> = $i4;

        $r13 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i5 = $r13.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize>;

        $i6 = $i5 / 10;

        $i7 = $i6 - 1;

        $r14 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r14.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int maxCopySize> = $i7;

        $r15 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i8 = $r15.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize>;

        $i9 = $i8 * 9;

        $i10 = $i9 / 10;

        $i11 = $i10 - 1;

        $r16 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r16.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize> = $i11;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Array size: ");

        $r17 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i12 = $r17.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize>;

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r18 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i13 = $r18.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize>;

        $r6 = newarray (nsk.share.gc.LinkedMemoryObject)[$i13];

        $r19 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r19.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: nsk.share.gc.LinkedMemoryObject[] mainArray> = $r6;

        $r20 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $r7 = $r20.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: nsk.share.gc.LinkedMemoryObject[] mainArray>;

        $r21 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i15 = $r21.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int arraySize>;

        $r22 = (gc.memory.Array.ArrayJuggle.Juggle2.Juggle2) r0;

        $i14 = $r22.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: int objectSize>;

        staticinvoke <nsk.share.gc.Memory: void fillArrayRandom(nsk.share.gc.LinkedMemoryObject[],int,int)>($r7, $i15, $i14);

        specialinvoke r0.<nsk.share.gc.ThreadedGCTest: void run()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;
        gc.memory.Array.ArrayJuggle.Juggle2.Juggle2 $r2;
        nsk.share.test.Test $r3;

        r1 := @parameter0: java.lang.String[];

        $r2 = new gc.memory.Array.ArrayJuggle.Juggle2.Juggle2;

        specialinvoke $r2.<gc.memory.Array.ArrayJuggle.Juggle2.Juggle2: void <init>()>();

        $r3 = (nsk.share.test.Test) $r2;

        staticinvoke <nsk.share.gc.GC: void runTest(nsk.share.test.Test,java.lang.String[])>($r3, r1);

        return;
    }
}
