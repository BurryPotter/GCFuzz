class MemoryStresser extends java.lang.Object implements java.lang.Runnable
{
    public static volatile boolean shouldStop;
    private final java.util.List liveObjects;
    private final java.util.List liveHObjects;
    private int maxSimpleAllocationMemory;
    private int usedMemory;
    private static int H_ALLOCATION_MAX_COUNT;
    private static int H_ALLOCATION_REGION_SIZE;
    private static final int G1_REGION_SIZE;
    private static final int MAX_SIMPLE_ALLOCATION_SIZE;
    private static final int DEAD_OBJECT_MAX_SIZE;
    private static final java.util.Random RND;
    public final java.lang.Runnable[] actions;

    static void <clinit>()
    {
        java.util.Random $r0;

        <gc.logging.MemoryStresser: boolean shouldStop> = 0;

        <gc.logging.MemoryStresser: int H_ALLOCATION_MAX_COUNT> = 4;

        <gc.logging.MemoryStresser: int H_ALLOCATION_REGION_SIZE> = 2;

        $r0 = staticinvoke <jdk.test.lib.Utils: java.util.Random getRandomInstance()>();

        <gc.logging.MemoryStresser: java.util.Random RND> = $r0;

        return;
    }

    public void <init>(int)
    {
        MemoryStresser r0;
        java.lang.Runnable $r4, $r5, $r6, $r7, $r8;
        gc.logging.MemoryStresser $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.lang.Runnable[] $r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.LinkedList $r9, $r10;

        r0 := @this: MemoryStresser;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        $r11 = (gc.logging.MemoryStresser) r0;

        $r11.<gc.logging.MemoryStresser: java.util.List liveObjects> = $r9;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        $r12 = (gc.logging.MemoryStresser) r0;

        $r12.<gc.logging.MemoryStresser: java.util.List liveHObjects> = $r10;

        $r13 = (gc.logging.MemoryStresser) r0;

        $r13.<gc.logging.MemoryStresser: int maxSimpleAllocationMemory> = 0;

        $r14 = (gc.logging.MemoryStresser) r0;

        $r14.<gc.logging.MemoryStresser: int usedMemory> = 0;

        $r3 = newarray (java.lang.Runnable)[5];

        $r15 = (gc.logging.MemoryStresser) r0;

        $r4 = staticinvoke <MemoryStresser$lambda_0__1: java.lang.Runnable bootstrap$(gc.logging.MemoryStresser)>($r15);

        $r3[0] = $r4;

        $r16 = (gc.logging.MemoryStresser) r0;

        $r5 = staticinvoke <MemoryStresser$lambda_1__2: java.lang.Runnable bootstrap$(gc.logging.MemoryStresser)>($r16);

        $r3[1] = $r5;

        $r17 = (gc.logging.MemoryStresser) r0;

        $r6 = staticinvoke <MemoryStresser$lambda_2__3: java.lang.Runnable bootstrap$(gc.logging.MemoryStresser)>($r17);

        $r3[2] = $r6;

        $r18 = (gc.logging.MemoryStresser) r0;

        $r7 = staticinvoke <MemoryStresser$lambda_3__4: java.lang.Runnable bootstrap$(gc.logging.MemoryStresser)>($r18);

        $r3[3] = $r7;

        $r8 = staticinvoke <MemoryStresser$lambda_4__5: java.lang.Runnable bootstrap$()>();

        $r3[4] = $r8;

        $r19 = (gc.logging.MemoryStresser) r0;

        $r19.<gc.logging.MemoryStresser: java.lang.Runnable[] actions> = $r3;

        $i1 = <gc.logging.MemoryStresser: int H_ALLOCATION_MAX_COUNT>;

        $i3 = 1048576 * $i1;

        $i2 = <gc.logging.MemoryStresser: int H_ALLOCATION_REGION_SIZE>;

        $i4 = $i3 * $i2;

        $i5 = i0 - $i4;

        $r20 = (gc.logging.MemoryStresser) r0;

        $r20.<gc.logging.MemoryStresser: int maxSimpleAllocationMemory> = $i5;

        return;
    }

    public void run()
    {
        java.io.PrintStream $r5;
        MemoryStresser r0;
        java.util.Random $r2;
        java.lang.Runnable $r4;
        gc.logging.MemoryStresser $r6, $r7;
        java.lang.Runnable[] $r1, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: MemoryStresser;

        goto label2;

     label1:
        $r6 = (gc.logging.MemoryStresser) r0;

        $r3 = $r6.<gc.logging.MemoryStresser: java.lang.Runnable[] actions>;

        $r2 = <gc.logging.MemoryStresser: java.util.Random RND>;

        $r7 = (gc.logging.MemoryStresser) r0;

        $r1 = $r7.<gc.logging.MemoryStresser: java.lang.Runnable[] actions>;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>($i0);

        $r4 = $r3[$i1];

        interfaceinvoke $r4.<java.lang.Runnable: void run()>();

        staticinvoke <java.lang.Thread: void yield()>();

     label2:
        $z0 = <gc.logging.MemoryStresser: boolean shouldStop>;

        if $z0 == 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Memory Stresser finished");

        return;
    }

    private void lambda$0()
    {
        MemoryStresser r0;
        byte[] $r3;
        java.util.Random $r2;
        gc.logging.MemoryStresser $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2, $d3;
        java.util.List $r1, $r4;

        r0 := @this: MemoryStresser;

        $r5 = (gc.logging.MemoryStresser) r0;

        $r1 = $r5.<gc.logging.MemoryStresser: java.util.List liveHObjects>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = <gc.logging.MemoryStresser: int H_ALLOCATION_MAX_COUNT>;

        if $i0 >= $i1 goto label1;

        $r2 = <gc.logging.MemoryStresser: java.util.Random RND>;

        $i2 = <gc.logging.MemoryStresser: int H_ALLOCATION_REGION_SIZE>;

        $d0 = (double) $i2;

        $d1 = $d0 - 0.5;

        $d2 = 1048576.0 * $d1;

        $d3 = $d2 * 0.9;

        $i3 = (int) $d3;

        $i4 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>($i3);

        $r6 = (gc.logging.MemoryStresser) r0;

        $r4 = $r6.<gc.logging.MemoryStresser: java.util.List liveHObjects>;

        $i5 = $i4 + 524288;

        $r3 = newarray (byte)[$i5];

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        return;
    }

    private void lambda$1()
    {
        MemoryStresser r0;
        java.util.Random $r3;
        gc.logging.MemoryStresser $r5, $r6, $r7;
        java.util.List $r1, $r2, $r4;
        int $i0, $i1, $i2;

        r0 := @this: MemoryStresser;

        $r5 = (gc.logging.MemoryStresser) r0;

        $r1 = $r5.<gc.logging.MemoryStresser: java.util.List liveHObjects>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = <gc.logging.MemoryStresser: java.util.Random RND>;

        $r6 = (gc.logging.MemoryStresser) r0;

        $r2 = $r6.<gc.logging.MemoryStresser: java.util.List liveHObjects>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i1);

        $r7 = (gc.logging.MemoryStresser) r0;

        $r4 = $r7.<gc.logging.MemoryStresser: java.util.List liveHObjects>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>($i2);

     label1:
        return;
    }

    private void lambda$2()
    {
        MemoryStresser r0;
        byte[] $r2;
        java.util.Random $r1;
        gc.logging.MemoryStresser $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.List $r3;

        r0 := @this: MemoryStresser;

        $r4 = (gc.logging.MemoryStresser) r0;

        $i1 = $r4.<gc.logging.MemoryStresser: int maxSimpleAllocationMemory>;

        $r5 = (gc.logging.MemoryStresser) r0;

        $i0 = $r5.<gc.logging.MemoryStresser: int usedMemory>;

        $i2 = $i1 - $i0;

        if $i2 == 0 goto label1;

        $r1 = <gc.logging.MemoryStresser: java.util.Random RND>;

        $r6 = (gc.logging.MemoryStresser) r0;

        $i4 = $r6.<gc.logging.MemoryStresser: int maxSimpleAllocationMemory>;

        $r7 = (gc.logging.MemoryStresser) r0;

        $i3 = $r7.<gc.logging.MemoryStresser: int usedMemory>;

        $i5 = $i4 - $i3;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, 471859);

        $i7 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>($i6);

        if $i7 == 0 goto label1;

        $r8 = (gc.logging.MemoryStresser) r0;

        $r3 = $r8.<gc.logging.MemoryStresser: java.util.List liveObjects>;

        $r2 = newarray (byte)[$i7];

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r9 = (gc.logging.MemoryStresser) r0;

        $i8 = $r9.<gc.logging.MemoryStresser: int usedMemory>;

        $i9 = $i8 + $i7;

        $r10 = (gc.logging.MemoryStresser) r0;

        $r10.<gc.logging.MemoryStresser: int usedMemory> = $i9;

     label1:
        return;
    }

    private void lambda$3()
    {
        MemoryStresser r0;
        byte[] $r6;
        java.util.Random $r3;
        gc.logging.MemoryStresser $r8, $r9, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2, i3, $i4, $i5;
        java.util.List $r1, $r2, $r4, $r7;
        java.lang.Object $r5;

        r0 := @this: MemoryStresser;

        $r8 = (gc.logging.MemoryStresser) r0;

        $r1 = $r8.<gc.logging.MemoryStresser: java.util.List liveObjects>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 0 goto label1;

        $r3 = <gc.logging.MemoryStresser: java.util.Random RND>;

        $r9 = (gc.logging.MemoryStresser) r0;

        $r2 = $r9.<gc.logging.MemoryStresser: java.util.List liveObjects>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i1);

        $r10 = (gc.logging.MemoryStresser) r0;

        $r4 = $r10.<gc.logging.MemoryStresser: java.util.List liveObjects>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        $r6 = (byte[]) $r5;

        i3 = lengthof $r6;

        $r11 = (gc.logging.MemoryStresser) r0;

        $r7 = $r11.<gc.logging.MemoryStresser: java.util.List liveObjects>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>($i2);

        $r12 = (gc.logging.MemoryStresser) r0;

        $i4 = $r12.<gc.logging.MemoryStresser: int usedMemory>;

        $i5 = $i4 - i3;

        $r13 = (gc.logging.MemoryStresser) r0;

        $r13.<gc.logging.MemoryStresser: int usedMemory> = $i5;

     label1:
        return;
    }

    private static void lambda$4()
    {
        int $i0;
        byte[] $r1;
        java.util.Random $r0;

        $r0 = <gc.logging.MemoryStresser: java.util.Random RND>;

        $i0 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>(104857);

        $r1 = newarray (byte)[$i0];

        return;
    }
}
