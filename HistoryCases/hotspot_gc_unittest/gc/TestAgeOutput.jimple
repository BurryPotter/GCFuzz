public class TestAgeOutput extends java.lang.Object
{

    public void <init>()
    {
        TestAgeOutput r0;

        r0 := @this: TestAgeOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkPattern(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.RuntimeException $r4;
        java.util.regex.Matcher $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r0, r2, $r8;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find pattern ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in output");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return;
    }

    public static void runTest(java.lang.String) throws java.lang.Exception
    {
        java.io.PrintStream $r10;
        java.lang.Process $r9;
        java.lang.String[] $r0;
        jdk.test.lib.process.OutputAnalyzer $r8;
        java.lang.StringBuilder $r1, $r3;
        java.lang.Class $r5;
        java.lang.String r2, $r4, $r6, $r11, $r12;
        java.lang.ProcessBuilder $r7;

        r2 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[8];

        $r0[0] = "-Xbootclasspath/a:.";

        $r0[1] = "-XX:+UnlockExperimentalVMOptions";

        $r0[2] = "-XX:+UnlockDiagnosticVMOptions";

        $r0[3] = "-XX:+WhiteBoxAPI";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:+");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[4] = $r4;

        $r0[5] = "-Xmx10M";

        $r0[6] = "-Xlog:gc+age=trace";

        $r5 = class "Lgc/TestAgeOutput$GCTest;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r0[7] = $r6;

        $r7 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r0);

        $r8 = new jdk.test.lib.process.OutputAnalyzer;

        $r9 = virtualinvoke $r7.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r8.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r9);

        virtualinvoke $r8.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = virtualinvoke $r8.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r12 = virtualinvoke $r8.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        staticinvoke <gc.TestAgeOutput: void checkPattern(java.lang.String,java.lang.String)>(".*GC\\(0\\) .*Desired survivor size.*", $r12);

        staticinvoke <gc.TestAgeOutput: void checkPattern(java.lang.String,java.lang.String)>(".*GC\\(0\\) .*Age table with threshold.*", $r12);

        staticinvoke <gc.TestAgeOutput: void checkPattern(java.lang.String,java.lang.String)>(".*GC\\(0\\) .*- age   1:.*", $r12);

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = r0[0];

        staticinvoke <gc.TestAgeOutput: void runTest(java.lang.String)>($r1);

        return;
    }
}
