public class HeapChangeLogging extends java.lang.Object
{

    public void <init>()
    {
        HeapChangeLogging r0;

        r0 := @this: HeapChangeLogging;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.io.PrintStream $r5;
        java.lang.Process $r3;
        java.lang.String[] $r0, r9;
        java.lang.RuntimeException $r8;
        jdk.test.lib.process.OutputAnalyzer $r2;
        java.util.regex.Matcher $r7;
        java.lang.ProcessBuilder $r1;
        java.lang.String $r4;
        java.util.regex.Pattern $r6;
        boolean $z0;

        r9 := @parameter0: java.lang.String[];

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "-Xmx128m";

        $r0[1] = "-Xmn100m";

        $r0[2] = "-XX:+UseSerialGC";

        $r0[3] = "-Xlog:gc";

        $r0[4] = "HeapFiller";

        $r1 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r0);

        $r2 = new jdk.test.lib.process.OutputAnalyzer;

        $r3 = virtualinvoke $r1.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r3);

        $r4 = virtualinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r4);

        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(".*\\(Allocation Failure\\) [0-9]+[KMG]->[0-9]+[KMG]\\([0-9]+[KMG]\\)", 8);

        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("No proper GC log line found");

        throw $r8;

     label1:
        virtualinvoke $r2.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        return;
    }
}
