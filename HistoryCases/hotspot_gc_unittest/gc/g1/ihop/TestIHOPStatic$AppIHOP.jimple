class TestIHOPStatic$AppIHOP extends java.lang.Object
{
    private static final long MEMORY_TO_FILL;
    private static final int CHUNK_SIZE;
    public static final java.util.ArrayList STORAGE;

    static void <clinit>()
    {
        int $i0;
        long $l1;
        java.lang.Integer $r0;
        java.util.ArrayList $r1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>("memory.fill");

        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        <gc.g1.ihop.TestIHOPStatic$AppIHOP: long MEMORY_TO_FILL> = $l1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <gc.g1.ihop.TestIHOPStatic$AppIHOP: java.util.ArrayList STORAGE> = $r1;

        return;
    }

    void <init>()
    {
        TestIHOPStatic$AppIHOP r0;

        r0 := @this: TestIHOPStatic$AppIHOP;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.InterruptedException
    {
        long $l0, $l1, $l3, $l4;
        java.lang.String[] r10;
        byte $b2;
        int $i5;
        java.lang.String $r3, $r7;
        java.io.PrintStream $r1;
        java.lang.RuntimeException $r13;
        java.lang.StringBuilder $r2, $r6, $r11, $r12;
        java.lang.OutOfMemoryError $r8, $r9;

        r10 := @parameter0: java.lang.String[];

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Mem to fill:");

        $l0 = <gc.g1.ihop.TestIHOPStatic$AppIHOP: long MEMORY_TO_FILL>;

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $l1 = <gc.g1.ihop.TestIHOPStatic$AppIHOP: long MEMORY_TO_FILL>;

        $b2 = $l1 cmp 0L;

        $i5 = (int) $b2;

        if $i5 > 0 goto label1;

        $r13 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Wrong memory size: ");

        $l4 = <gc.g1.ihop.TestIHOPStatic$AppIHOP: long MEMORY_TO_FILL>;

        $r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r13;

     label1:
        $l3 = <gc.g1.ihop.TestIHOPStatic$AppIHOP: long MEMORY_TO_FILL>;

        staticinvoke <gc.g1.ihop.TestIHOPStatic$AppIHOP: void createGarbage(long)>($l3);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        return;

     label4:
        staticinvoke <gc.g1.ihop.TestIHOPStatic$AppIHOP: void createGarbage(long)>(8388608L);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

     label7:
        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
        catch java.lang.OutOfMemoryError from label4 to label5 with label6;
    }

    private static void createGarbage(long)
    {
        byte[] $r0;
        byte $b2;
        int $i4;
        long l0, $l1, l3;
        java.util.ArrayList $r1;

        l0 := @parameter0: long;

        l3 = 0L;

        goto label2;

     label1:
        $r1 = <gc.g1.ihop.TestIHOPStatic$AppIHOP: java.util.ArrayList STORAGE>;

        $r0 = newarray (byte)[10000];

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        l3 = l3 + 1L;

     label2:
        $l1 = l0 / 10000L;

        $b2 = l3 cmp $l1;

        $i4 = (int) $b2;

        if $i4 < 0 goto label1;

        return;
    }
}
