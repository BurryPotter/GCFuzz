public class IhopUtils extends java.lang.Object
{
    private static final java.util.regex.Pattern OCCUPANCY;
    private static final java.util.regex.Pattern THRESHOLD;
    private static final java.lang.String CYCLE_INITIATION_MESSAGE;
    private static final java.lang.String CYCLE_INITIATION_MESSAGE_FALSE;
    private static final java.lang.String ADAPTIVE_IHOP_PREDICTION_ACTIVE_MESSAGE;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("occupancy: (\\d+)B");

        <gc.g1.ihop.lib.IhopUtils: java.util.regex.Pattern OCCUPANCY> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("threshold: (\\d+)B");

        <gc.g1.ihop.lib.IhopUtils: java.util.regex.Pattern THRESHOLD> = $r1;

        return;
    }

    public void <init>()
    {
        IhopUtils r0;

        r0 := @this: IhopUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static transient java.util.List findInLog(jdk.test.lib.process.OutputAnalyzer, java.lang.String[])
    {
        java.util.function.Predicate $r4;
        java.lang.String[] r3;
        jdk.test.lib.process.OutputAnalyzer r0;
        java.util.List $r1, $r8;
        java.util.stream.Stream $r2, $r5;
        java.lang.Object $r7;
        java.util.stream.Collector $r6;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        r3 := @parameter1: java.lang.String[];

        $r1 = virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: java.util.List asLines()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r4 = staticinvoke <IhopUtils$lambda_0__1: java.util.function.Predicate bootstrap$(java.lang.String[])>(r3);

        $r5 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4);

        $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6);

        $r8 = (java.util.List) $r7;

        return $r8;
    }

    public static void checkIhopLogValues(jdk.test.lib.process.OutputAnalyzer)
    {
        java.util.function.Consumer $r3;
        java.util.List $r1;
        java.util.stream.Stream $r2;
        jdk.test.lib.process.OutputAnalyzer r0;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        $r1 = staticinvoke <gc.g1.ihop.lib.IhopUtils: java.util.List getErgoMessages(jdk.test.lib.process.OutputAnalyzer)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <IhopUtils$lambda_2__2: java.util.function.Consumer bootstrap$(jdk.test.lib.process.OutputAnalyzer)>(r0);

        interfaceinvoke $r2.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r3);

        return;
    }

    private static java.lang.Long getLongByPattern(java.lang.String, java.util.regex.Pattern)
    {
        java.io.PrintStream $r3;
        long $l0;
        java.lang.RuntimeException $r4;
        java.util.regex.Matcher $r2;
        java.lang.Long $r6;
        java.util.regex.Pattern r0;
        java.lang.String r1, $r5;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.regex.Pattern;

        $r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r6;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot find Long in string.");

        throw $r4;
    }

    public static java.util.List getErgoInitiationMessages(jdk.test.lib.process.OutputAnalyzer)
    {
        java.lang.String[] $r1;
        java.util.List $r2;
        jdk.test.lib.process.OutputAnalyzer r0;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "Request concurrent cycle initiation (occupancy higher than threshold)";

        $r2 = staticinvoke <gc.g1.ihop.lib.IhopUtils: java.util.List findInLog(jdk.test.lib.process.OutputAnalyzer,java.lang.String[])>(r0, $r1);

        return $r2;
    }

    private static java.util.List getErgoMessages(jdk.test.lib.process.OutputAnalyzer)
    {
        java.lang.String[] $r1;
        java.util.List $r2;
        jdk.test.lib.process.OutputAnalyzer r0;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "Request concurrent cycle initiation (occupancy higher than threshold)";

        $r1[1] = "Do not request concurrent cycle initiation (still doing mixed collections)";

        $r2 = staticinvoke <gc.g1.ihop.lib.IhopUtils: java.util.List findInLog(jdk.test.lib.process.OutputAnalyzer,java.lang.String[])>(r0, $r1);

        return $r2;
    }

    public static void checkErgoMessagesExist(jdk.test.lib.process.OutputAnalyzer)
    {
        java.lang.String $r1;
        java.lang.RuntimeException $r2;
        jdk.test.lib.process.OutputAnalyzer r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        $r1 = virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("Request concurrent cycle initiation (occupancy higher than threshold)");

        $z1 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("Do not request concurrent cycle initiation (still doing mixed collections)");

        $z2 = $z0 | $z1;

        if $z2 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot find expected IHOP ergonomics messages");

        throw $r2;

     label1:
        return;
    }

    public static void checkAdaptiveIHOPWasActivated(jdk.test.lib.process.OutputAnalyzer)
    {
        jdk.test.lib.process.OutputAnalyzer r0;

        r0 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        virtualinvoke r0.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldContain(java.lang.String)>("prediction active: true");

        return;
    }

    private static boolean lambda$0(java.lang.String[], java.lang.String)
    {
        java.util.stream.Stream $r1, $r4;
        java.util.function.Predicate $r3;
        java.util.Optional $r5;
        java.lang.String[] r0;
        java.lang.String r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(r0);

        $r3 = staticinvoke <IhopUtils$lambda_1__3: java.util.function.Predicate bootstrap$(java.lang.String)>(r2);

        $r4 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.Optional findAny()>();

        $z0 = virtualinvoke $r5.<java.util.Optional: boolean isPresent()>();

        return $z0;
    }

    private static void lambda$2(jdk.test.lib.process.OutputAnalyzer, java.lang.String)
    {
        java.lang.Object[] $r5;
        long $l0, $l1;
        byte $b2;
        java.lang.Long $r2, $r4, $r7, $r8;
        int $i3;
        java.lang.String r0, $r11, $r18;
        java.io.PrintStream $r6, $r10;
        java.lang.RuntimeException $r20;
        jdk.test.lib.process.OutputAnalyzer r9;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19;
        java.util.regex.Pattern $r1, $r3;

        r9 := @parameter0: jdk.test.lib.process.OutputAnalyzer;

        r0 := @parameter1: java.lang.String;

        $r1 = <gc.g1.ihop.lib.IhopUtils: java.util.regex.Pattern OCCUPANCY>;

        $r2 = staticinvoke <gc.g1.ihop.lib.IhopUtils: java.lang.Long getLongByPattern(java.lang.String,java.util.regex.Pattern)>(r0, $r1);

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r3 = <gc.g1.ihop.lib.IhopUtils: java.util.regex.Pattern THRESHOLD>;

        $r4 = staticinvoke <gc.g1.ihop.lib.IhopUtils: java.lang.Long getLongByPattern(java.lang.String,java.util.regex.Pattern)>(r0, $r3);

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = virtualinvoke r9.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r20 = new java.lang.RuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Concurrent cycle initiation is unexpected. Occupancy (");

        $r14 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is less then threshold (");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r20;

     label1:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r5[1] = $r8;

        virtualinvoke $r6.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("Concurrent cycle was initiated with occupancy = %d and threshold = %d%n", $r5);

        return;
    }

    private static boolean lambda$1(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1);

        return $z0;
    }
}
