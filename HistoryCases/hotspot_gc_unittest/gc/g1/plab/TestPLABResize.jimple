public class TestPLABResize extends java.lang.Object
{
    private static final int OBJECT_SIZE_SMALL;
    private static final int OBJECT_SIZE_MEDIUM;
    private static final int OBJECT_SIZE_HIGH;
    private static final int GC_NUM_SMALL;
    private static final int GC_NUM_MEDIUM;
    private static final int GC_NUM_HIGH;
    private static final int WASTE_PCT_SMALL;
    private static final int WASTE_PCT_MEDIUM;
    private static final int WASTE_PCT_HIGH;
    private static final int ITERATIONS_SMALL;
    private static final int ITERATIONS_MEDIUM;
    private static final int ITERATIONS_HIGH;
    private static final java.lang.String PLAB_SIZE_FIELD_NAME;
    private static final gc.g1.plab.TestPLABResize$TestCase[] TEST_CASES;

    static void <clinit>()
    {
        gc.g1.plab.TestPLABResize$TestCase $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        gc.g1.plab.TestPLABResize$TestCase[] $r0;

        $r0 = newarray (gc.g1.plab.TestPLABResize$TestCase)[9];

        $r1 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r1.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(10, 10, 1, 5);

        $r0[0] = $r1;

        $r2 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r2.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(10, 70, 7, 3);

        $r0[1] = $r2;

        $r3 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r3.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(10, 150, 3, 8);

        $r0[2] = $r3;

        $r4 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r4.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(20, 10, 7, 5);

        $r0[3] = $r4;

        $r5 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r5.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(20, 70, 1, 3);

        $r0[4] = $r5;

        $r6 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r6.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(20, 150, 3, 8);

        $r0[5] = $r6;

        $r7 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r7.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(30, 10, 7, 5);

        $r0[6] = $r7;

        $r8 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r8.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(30, 70, 1, 3);

        $r0[7] = $r8;

        $r9 = new gc.g1.plab.TestPLABResize$TestCase;

        specialinvoke $r9.<gc.g1.plab.TestPLABResize$TestCase: void <init>(int,int,int,int)>(30, 150, 3, 8);

        $r0[8] = $r9;

        <gc.g1.plab.TestPLABResize: gc.g1.plab.TestPLABResize$TestCase[] TEST_CASES> = $r0;

        return;
    }

    public void <init>()
    {
        TestPLABResize r0;

        r0 := @this: TestPLABResize;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Throwable
    {
        java.lang.Object[] $r8;
        java.lang.String[] $r7, $r9, r12;
        gc.g1.plab.TestPLABResize$TestCase[] $r0;
        int i0, $i1, i2;
        java.lang.String $r6, $r11;
        java.io.PrintStream $r2;
        gc.g1.plab.TestPLABResize$TestCase r1;
        jdk.test.lib.process.OutputAnalyzer $r10;
        java.util.List $r3, $r4;
        java.lang.Class $r5;

        r12 := @parameter0: java.lang.String[];

        $r0 = <gc.g1.plab.TestPLABResize: gc.g1.plab.TestPLABResize$TestCase[] TEST_CASES>;

        i0 = lengthof $r0;

        i2 = 0;

        goto label2;

     label1:
        r1 = $r0[i2];

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<gc.g1.plab.TestPLABResize$TestCase: void print(java.io.PrintStream)>($r2);

        $r3 = virtualinvoke r1.<gc.g1.plab.TestPLABResize$TestCase: java.util.List toOptions()>();

        $r4 = staticinvoke <gc.g1.plab.lib.PLABUtils: java.util.List prepareOptions(java.util.List)>($r3);

        $r5 = class "Lgc/g1/plab/lib/AppPLABResize;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r7 = newarray (java.lang.String)[$i1];

        $r8 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.String[]) $r8;

        $r10 = staticinvoke <jdk.test.lib.process.ProcessTools: jdk.test.lib.process.OutputAnalyzer executeTestJvm(java.lang.String[])>($r9);

        staticinvoke <gc.g1.plab.lib.PLABUtils: void commonCheck(jdk.test.lib.process.OutputAnalyzer)>($r10);

        $r11 = virtualinvoke $r10.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getOutput()>();

        staticinvoke <gc.g1.plab.TestPLABResize: void checkResults(java.lang.String,gc.g1.plab.TestPLABResize$TestCase)>($r11, r1);

        i2 = i2 + 1;

     label2:
        if i2 < i0 goto label1;

        return;
    }

    private static void checkResults(java.lang.String, gc.g1.plab.TestPLABResize$TestCase)
    {
        byte $b9, $b17;
        java.lang.Long $r11, $r13, $r15, $r17;
        java.util.stream.Collector $r6;
        gc.g1.plab.TestPLABResize$TestCase r9;
        java.util.List r8;
        java.util.stream.Stream $r3, $r5;
        java.lang.StringBuilder $r22, $r23, $r24, $r29, $r30, $r31, $r36, $r37, $r38, $r41, $r43, $r45;
        gc.g1.plab.lib.LogParser $r40;
        long $l4, $l8, $l12, $l16;
        java.util.function.Function $r4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i10, $i11, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i22;
        java.lang.String r1, $r25, $r32, $r39;
        java.io.PrintStream $r18, $r19, $r26, $r33;
        gc.g1.plab.lib.PlabReport $r2;
        java.lang.RuntimeException $r42, $r44, $r46;
        java.lang.Object $r7, $r10, $r12, $r14, $r16;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: gc.g1.plab.TestPLABResize$TestCase;

        $r40 = new gc.g1.plab.lib.LogParser;

        specialinvoke $r40.<gc.g1.plab.lib.LogParser: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r40.<gc.g1.plab.lib.LogParser: gc.g1.plab.lib.PlabReport getEntries()>();

        $r3 = virtualinvoke $r2.<gc.g1.plab.lib.PlabReport: java.util.stream.Stream entryStream()>();

        $r4 = staticinvoke <TestPLABResize$lambda_0__1: java.util.function.Function bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4);

        $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6);

        r8 = (java.util.List) $r7;

        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        $i1 = r9.<gc.g1.plab.TestPLABResize$TestCase: int iterations>;

        $i2 = $i1 * 3;

        if $i0 == $i2 goto label1;

        $r33 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r42 = new java.lang.RuntimeException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expects for ");

        $i18 = r9.<gc.g1.plab.TestPLABResize$TestCase: int iterations>;

        $i19 = $i18 * 3;

        $r36 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PLAB entries in log, found ");

        $i20 = interfaceinvoke r8.<java.util.List: int size()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.RuntimeException: void <init>(java.lang.String)>($r39);

        throw $r42;

     label1:
        $i3 = virtualinvoke r9.<gc.g1.plab.TestPLABResize$TestCase: int getIterations()>();

        $r10 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>($i3);

        $r11 = (java.lang.Long) $r10;

        $l4 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $i5 = virtualinvoke r9.<gc.g1.plab.TestPLABResize$TestCase: int getIterations()>();

        $i6 = $i5 * 2;

        $i7 = $i6 - 1;

        $r12 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>($i7);

        $r13 = (java.lang.Long) $r12;

        $l8 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        $b9 = $l4 cmp $l8;

        $i21 = (int) $b9;

        if $i21 >= 0 goto label2;

        $r26 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r44 = new java.lang.RuntimeException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>(java.lang.String)>("Test failed! Expect that initial PLAB size should be greater than checked. Initial size: ");

        $r29 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Checked size:");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.RuntimeException: void <init>(java.lang.String)>($r32);

        throw $r44;

     label2:
        $i10 = virtualinvoke r9.<gc.g1.plab.TestPLABResize$TestCase: int getIterations()>();

        $i11 = $i10 * 2;

        $r14 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>($i11);

        $r15 = (java.lang.Long) $r14;

        $l12 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

        $i13 = virtualinvoke r9.<gc.g1.plab.TestPLABResize$TestCase: int getIterations()>();

        $i14 = $i13 * 3;

        $i15 = $i14 - 1;

        $r16 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>($i15);

        $r17 = (java.lang.Long) $r16;

        $l16 = virtualinvoke $r17.<java.lang.Long: long longValue()>();

        $b17 = $l12 cmp $l16;

        $i22 = (int) $b17;

        if $i22 <= 0 goto label3;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $r46 = new java.lang.RuntimeException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("Test failed! Expect that initial PLAB size should be less than checked. Initial size: ");

        $r22 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l12);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Checked size:");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.RuntimeException: void <init>(java.lang.String)>($r25);

        throw $r46;

     label3:
        $r18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("Test passed!");

        return;
    }

    private static java.lang.Long lambda$0(java.util.Map$Entry)
    {
        gc.g1.plab.lib.PlabGCStatistics $r3;
        java.util.Map$Entry r0;
        java.lang.Long $r5;
        gc.g1.plab.lib.LogParser$ReportType $r2;
        java.lang.Object $r1;
        long $l0;
        gc.g1.plab.lib.PlabInfo $r4;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (gc.g1.plab.lib.PlabGCStatistics) $r1;

        $r2 = <gc.g1.plab.lib.LogParser$ReportType: gc.g1.plab.lib.LogParser$ReportType SURVIVOR_STATS>;

        $r4 = virtualinvoke $r3.<gc.g1.plab.lib.PlabGCStatistics: gc.g1.plab.lib.PlabInfo get(gc.g1.plab.lib.LogParser$ReportType)>($r2);

        $l0 = virtualinvoke $r4.<gc.g1.plab.lib.PlabInfo: long get(java.lang.String)>("actual");

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r5;
    }
}
