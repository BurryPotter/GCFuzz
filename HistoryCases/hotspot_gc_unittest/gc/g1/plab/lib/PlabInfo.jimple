public class PlabInfo extends java.lang.Object
{
    private final java.util.Map plabInfo;

    public void <init>()
    {
        java.util.HashMap $r2;
        gc.g1.plab.lib.PlabInfo $r3;
        PlabInfo r0;

        r0 := @this: PlabInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = (gc.g1.plab.lib.PlabInfo) r0;

        $r3.<gc.g1.plab.lib.PlabInfo: java.util.Map plabInfo> = $r2;

        return;
    }

    private void <init>(java.util.Map)
    {
        PlabInfo r0;
        java.util.Map r2;
        java.util.HashMap $r3;
        gc.g1.plab.lib.PlabInfo $r4;

        r0 := @this: PlabInfo;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        $r4 = (gc.g1.plab.lib.PlabInfo) r0;

        $r4.<gc.g1.plab.lib.PlabInfo: java.util.Map plabInfo> = $r3;

        return;
    }

    public void put(java.lang.String, long)
    {
        java.lang.Long $r3;
        PlabInfo r0;
        java.util.Map $r2;
        long l0;
        java.lang.String r1;
        gc.g1.plab.lib.PlabInfo $r4;

        r0 := @this: PlabInfo;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r4 = (gc.g1.plab.lib.PlabInfo) r0;

        $r2 = $r4.<gc.g1.plab.lib.PlabInfo: java.util.Map plabInfo>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public java.util.stream.Stream entryStream()
    {
        java.util.stream.Stream $r3;
        PlabInfo r0;
        java.util.Map $r1;
        java.util.Set $r2;
        gc.g1.plab.lib.PlabInfo $r4;

        r0 := @this: PlabInfo;

        $r4 = (gc.g1.plab.lib.PlabInfo) r0;

        $r1 = $r4.<gc.g1.plab.lib.PlabInfo: java.util.Map plabInfo>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.stream.Stream stream()>();

        return $r3;
    }

    public gc.g1.plab.lib.PlabInfo filter(java.util.List)
    {
        java.util.function.Predicate $r4;
        PlabInfo r1;
        java.util.function.Function $r6, $r7;
        gc.g1.plab.lib.PlabInfo $r11, $r12;
        java.util.List r3;
        java.util.stream.Stream $r2, $r5;
        java.util.Map $r10;
        java.lang.Object $r9;
        java.util.stream.Collector $r8;

        r1 := @this: PlabInfo;

        r3 := @parameter0: java.util.List;

        $r11 = new gc.g1.plab.lib.PlabInfo;

        $r12 = (gc.g1.plab.lib.PlabInfo) r1;

        $r2 = virtualinvoke $r12.<gc.g1.plab.lib.PlabInfo: java.util.stream.Stream entryStream()>();

        $r4 = staticinvoke <PlabInfo$lambda_0__1: java.util.function.Predicate bootstrap$(java.util.List)>(r3);

        $r5 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4);

        $r6 = staticinvoke <PlabInfo$lambda_1__2: java.util.function.Function bootstrap$()>();

        $r7 = staticinvoke <PlabInfo$lambda_2__3: java.util.function.Function bootstrap$()>();

        $r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r6, $r7);

        $r9 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8);

        $r10 = (java.util.Map) $r9;

        specialinvoke $r11.<gc.g1.plab.lib.PlabInfo: void <init>(java.util.Map)>($r10);

        return $r11;
    }

    public boolean checkFields(java.util.List)
    {
        java.util.Iterator $r1;
        PlabInfo r4;
        gc.g1.plab.lib.PlabInfo $r6;
        java.util.List r0;
        java.util.Map $r5;
        java.lang.Object $r2;
        java.lang.String r3;
        boolean $z0, $z1;

        r4 := @this: PlabInfo;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r2;

        $r6 = (gc.g1.plab.lib.PlabInfo) r4;

        $r5 = $r6.<gc.g1.plab.lib.PlabInfo: java.util.Map plabInfo>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 1;
    }

    public java.util.Collection values()
    {
        PlabInfo r0;
        java.util.Map $r1;
        java.util.Collection $r2;
        gc.g1.plab.lib.PlabInfo $r3;

        r0 := @this: PlabInfo;

        $r3 = (gc.g1.plab.lib.PlabInfo) r0;

        $r1 = $r3.<gc.g1.plab.lib.PlabInfo: java.util.Map plabInfo>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public long get(java.lang.String)
    {
        java.lang.Long $r4;
        PlabInfo r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        long $l0;
        java.lang.String r1;
        gc.g1.plab.lib.PlabInfo $r5;

        r0 := @this: PlabInfo;

        r1 := @parameter0: java.lang.String;

        $r5 = (gc.g1.plab.lib.PlabInfo) r0;

        $r2 = $r5.<gc.g1.plab.lib.PlabInfo: java.util.Map plabInfo>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l0;
    }

    private static boolean lambda$0(java.util.List, java.util.Map$Entry)
    {
        java.util.List r0;
        java.util.Map$Entry r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    private static java.lang.String lambda$1(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    private static java.lang.Long lambda$2(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1;
        java.lang.Long $r2;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2 = (java.lang.Long) $r1;

        return $r2;
    }
}
