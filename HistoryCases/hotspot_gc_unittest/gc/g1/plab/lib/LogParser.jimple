public final class LogParser extends java.lang.Object
{
    private final java.lang.String log;
    private final gc.g1.plab.lib.PlabReport report;
    private static final java.util.regex.Pattern GC_ID_PATTERN;
    private static final java.util.regex.Pattern PAIRS_PATTERN;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\[gc,plab\\s*\\] GC\\((\\d+)\\)");

        <gc.g1.plab.lib.LogParser: java.util.regex.Pattern GC_ID_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\w* \\w+:\\s+\\d+");

        <gc.g1.plab.lib.LogParser: java.util.regex.Pattern PAIRS_PATTERN> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        gc.g1.plab.lib.LogParser $r5, $r6, $r7;
        LogParser r0;
        gc.g1.plab.lib.PlabReport $r2;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: LogParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter log should not be null.");

        throw $r4;

     label1:
        $r5 = (gc.g1.plab.lib.LogParser) r0;

        $r5.<gc.g1.plab.lib.LogParser: java.lang.String log> = r1;

        $r6 = (gc.g1.plab.lib.LogParser) r0;

        $r2 = virtualinvoke $r6.<gc.g1.plab.lib.LogParser: gc.g1.plab.lib.PlabReport parseLines()>();

        $r7 = (gc.g1.plab.lib.LogParser) r0;

        $r7.<gc.g1.plab.lib.LogParser: gc.g1.plab.lib.PlabReport report> = $r2;

        return;
    }

    public java.lang.String getLog()
    {
        gc.g1.plab.lib.LogParser $r2;
        java.lang.String $r1;
        LogParser r0;

        r0 := @this: LogParser;

        $r2 = (gc.g1.plab.lib.LogParser) r0;

        $r1 = $r2.<gc.g1.plab.lib.LogParser: java.lang.String log>;

        return $r1;
    }

    public gc.g1.plab.lib.PlabReport getEntries()
    {
        gc.g1.plab.lib.LogParser $r2;
        gc.g1.plab.lib.PlabReport $r1;
        LogParser r0;

        r0 := @this: LogParser;

        $r2 = (gc.g1.plab.lib.LogParser) r0;

        $r1 = $r2.<gc.g1.plab.lib.LogParser: gc.g1.plab.lib.PlabReport report>;

        return $r1;
    }

    private gc.g1.plab.lib.PlabReport parseLines() throws java.lang.NumberFormatException
    {
        gc.g1.plab.lib.PlabGCStatistics $r14, $r29;
        java.util.Scanner $r27;
        java.util.regex.Matcher $r8;
        java.lang.Long $r10, $r13, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        gc.g1.plab.lib.PlabInfo $r15, $r30;
        java.util.Optional $r6;
        java.util.regex.Pattern $r5, $r7;
        gc.g1.plab.lib.LogParser $r31;
        LogParser r1;
        gc.g1.plab.lib.LogParser$ReportType r11, $r20;
        java.lang.String[] $r23;
        long $l0;
        java.lang.String $r2, $r4, $r21, $r22, $r24, $r25, $r26;
        gc.g1.plab.lib.PlabReport $r28;
        java.lang.Object $r9, $r12, $r17;

        r1 := @this: LogParser;

        $r27 = new java.util.Scanner;

        $r31 = (gc.g1.plab.lib.LogParser) r1;

        $r2 = $r31.<gc.g1.plab.lib.LogParser: java.lang.String log>;

        specialinvoke $r27.<java.util.Scanner: void <init>(java.lang.String)>($r2);

        $r28 = new gc.g1.plab.lib.PlabReport;

        specialinvoke $r28.<gc.g1.plab.lib.PlabReport: void <init>()>();

        goto label7;

     label1:
        $r4 = virtualinvoke $r27.<java.util.Scanner: java.lang.String nextLine()>();

        $r5 = <gc.g1.plab.lib.LogParser: java.util.regex.Pattern GC_ID_PATTERN>;

        $r6 = staticinvoke <gc.g1.plab.lib.LogParser: java.util.Optional getGcId(java.lang.String,java.util.regex.Pattern)>($r4, $r5);

        $z0 = virtualinvoke $r6.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label7;

        $r7 = <gc.g1.plab.lib.LogParser: java.util.regex.Pattern PAIRS_PATTERN>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $z1 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label7;

        $r9 = virtualinvoke $r6.<java.util.Optional: java.lang.Object get()>();

        $r10 = (java.lang.Long) $r9;

        $z2 = virtualinvoke $r28.<gc.g1.plab.lib.PlabReport: boolean containsKey(java.lang.Long)>($r10);

        if $z2 != 0 goto label2;

        $r17 = virtualinvoke $r6.<java.util.Optional: java.lang.Object get()>();

        $r19 = (java.lang.Long) $r17;

        $r29 = new gc.g1.plab.lib.PlabGCStatistics;

        specialinvoke $r29.<gc.g1.plab.lib.PlabGCStatistics: void <init>()>();

        virtualinvoke $r28.<gc.g1.plab.lib.PlabReport: void put(java.lang.Long,gc.g1.plab.lib.PlabGCStatistics)>($r19, $r29);

     label2:
        $z3 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("Young");

        if $z3 == 0 goto label3;

        $r20 = <gc.g1.plab.lib.LogParser$ReportType: gc.g1.plab.lib.LogParser$ReportType SURVIVOR_STATS>;

        goto label4;

     label3:
        $r20 = <gc.g1.plab.lib.LogParser$ReportType: gc.g1.plab.lib.LogParser$ReportType OLD_STATS>;

     label4:
        r11 = $r20;

        $r12 = virtualinvoke $r6.<java.util.Optional: java.lang.Object get()>();

        $r13 = (java.lang.Long) $r12;

        $r14 = virtualinvoke $r28.<gc.g1.plab.lib.PlabReport: gc.g1.plab.lib.PlabGCStatistics get(java.lang.Long)>($r13);

        $z4 = virtualinvoke $r14.<gc.g1.plab.lib.PlabGCStatistics: boolean containsKey(gc.g1.plab.lib.LogParser$ReportType)>($r20);

        if $z4 != 0 goto label5;

        $r30 = new gc.g1.plab.lib.PlabInfo;

        specialinvoke $r30.<gc.g1.plab.lib.PlabInfo: void <init>()>();

        virtualinvoke $r14.<gc.g1.plab.lib.PlabGCStatistics: void put(gc.g1.plab.lib.LogParser$ReportType,gc.g1.plab.lib.PlabInfo)>($r20, $r30);

     label5:
        $r15 = virtualinvoke $r14.<gc.g1.plab.lib.PlabGCStatistics: gc.g1.plab.lib.PlabInfo get(gc.g1.plab.lib.LogParser$ReportType)>(r11);

     label6:
        $r21 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group()>();

        $r22 = virtualinvoke $r21.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(": ", ":");

        $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r24 = $r23[0];

        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String trim()>();

        $r26 = $r23[1];

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r26);

        virtualinvoke $r15.<gc.g1.plab.lib.PlabInfo: void put(java.lang.String,long)>($r25, $l0);

        $z5 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z5 != 0 goto label6;

     label7:
        $z6 = virtualinvoke $r27.<java.util.Scanner: boolean hasNextLine()>();

        if $z6 != 0 goto label1;

        return $r28;
    }

    private static java.util.Optional getGcId(java.lang.String, java.util.regex.Pattern)
    {
        long $l0;
        java.util.regex.Matcher $r2;
        java.lang.Long $r5;
        java.util.Optional $r3, $r6;
        java.util.regex.Pattern r0;
        java.lang.String r1, $r4;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.regex.Pattern;

        $r2 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r5);

        return $r6;

     label1:
        $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r3;
    }

    public static java.lang.Long getGcIdFromLine(java.lang.String, java.util.regex.Pattern)
    {
        java.io.PrintStream $r5;
        java.lang.RuntimeException $r6;
        java.lang.Long $r4;
        java.util.Optional $r2;
        java.lang.Object $r3;
        java.lang.String r0;
        java.util.regex.Pattern r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.regex.Pattern;

        $r2 = staticinvoke <gc.g1.plab.lib.LogParser: java.util.Optional getGcId(java.lang.String,java.util.regex.Pattern)>(r0, r1);

        $z0 = virtualinvoke $r2.<java.util.Optional: boolean isPresent()>();

        if $z0 != 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot find GC ID in log.");

        throw $r6;

     label1:
        $r3 = virtualinvoke $r2.<java.util.Optional: java.lang.Object get()>();

        $r4 = (java.lang.Long) $r3;

        return $r4;
    }

    public java.util.Map getSpecifiedStats(java.util.List, gc.g1.plab.lib.LogParser$ReportType, java.util.List)
    {
        gc.g1.plab.lib.LogParser $r5;
        java.util.List r1, r3;
        LogParser r0;
        java.util.Map $r4;
        gc.g1.plab.lib.LogParser$ReportType r2;

        r0 := @this: LogParser;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: gc.g1.plab.lib.LogParser$ReportType;

        r3 := @parameter2: java.util.List;

        $r5 = (gc.g1.plab.lib.LogParser) r0;

        $r4 = virtualinvoke $r5.<gc.g1.plab.lib.LogParser: java.util.Map getSpecifiedStats(java.util.List,gc.g1.plab.lib.LogParser$ReportType,java.util.List,boolean)>(r1, r2, r3, 1);

        return $r4;
    }

    public gc.g1.plab.lib.PlabInfo getSpecifiedStats(long, gc.g1.plab.lib.LogParser$ReportType, java.util.List)
    {
        gc.g1.plab.lib.LogParser $r21, $r22;
        LogParser r0;
        gc.g1.plab.lib.LogParser$ReportType r4;
        long l0;
        java.lang.Long $r2, $r7;
        java.util.Map $r6;
        java.lang.String $r10, $r18;
        java.io.PrintStream $r11;
        java.lang.Long[] $r1;
        java.lang.RuntimeException $r20;
        gc.g1.plab.lib.PlabInfo r9;
        java.util.List $r3, r5;
        java.lang.Object $r8;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19;

        r0 := @this: LogParser;

        l0 := @parameter0: long;

        r4 := @parameter1: gc.g1.plab.lib.LogParser$ReportType;

        r5 := @parameter2: java.util.List;

        $r1 = newarray (java.lang.Long)[1];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r21 = (gc.g1.plab.lib.LogParser) r0;

        $r6 = virtualinvoke $r21.<gc.g1.plab.lib.LogParser: java.util.Map getSpecifiedStats(java.util.List,gc.g1.plab.lib.LogParser$ReportType,java.util.List,boolean)>($r3, r4, r5, 1);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r9 = (gc.g1.plab.lib.PlabInfo) $r8;

        if r9 != null goto label1;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r22 = (gc.g1.plab.lib.LogParser) r0;

        $r10 = $r22.<gc.g1.plab.lib.LogParser: java.lang.String log>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r10);

        $r20 = new java.lang.RuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot find PLAB statistics in log ( GC_ID=");

        $r14 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r20;

     label1:
        return r9;
    }

    public java.util.Map getExcludedSpecifiedStats(java.util.List, gc.g1.plab.lib.LogParser$ReportType, java.util.List)
    {
        gc.g1.plab.lib.LogParser $r5;
        java.util.List r1, r3;
        LogParser r0;
        java.util.Map $r4;
        gc.g1.plab.lib.LogParser$ReportType r2;

        r0 := @this: LogParser;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: gc.g1.plab.lib.LogParser$ReportType;

        r3 := @parameter2: java.util.List;

        $r5 = (gc.g1.plab.lib.LogParser) r0;

        $r4 = virtualinvoke $r5.<gc.g1.plab.lib.LogParser: java.util.Map getSpecifiedStats(java.util.List,gc.g1.plab.lib.LogParser$ReportType,java.util.List,boolean)>(r1, r2, r3, 0);

        return $r4;
    }

    private java.util.Map getSpecifiedStats(java.util.List, gc.g1.plab.lib.LogParser$ReportType, java.util.List, boolean)
    {
        gc.g1.plab.lib.LogParser $r15;
        LogParser r1;
        gc.g1.plab.lib.LogParser$ReportType r8;
        java.util.HashMap $r14;
        java.util.function.Function $r7, $r10;
        java.util.Map $r13;
        java.util.stream.Collector $r11;
        boolean z0;
        java.util.function.Predicate $r5;
        gc.g1.plab.lib.PlabReport $r2;
        java.util.List r4, r9;
        java.util.stream.Stream $r3, $r6;
        java.lang.Object $r12;

        r1 := @this: LogParser;

        r4 := @parameter0: java.util.List;

        r8 := @parameter1: gc.g1.plab.lib.LogParser$ReportType;

        r9 := @parameter2: java.util.List;

        z0 := @parameter3: boolean;

        $r14 = new java.util.HashMap;

        $r15 = (gc.g1.plab.lib.LogParser) r1;

        $r2 = virtualinvoke $r15.<gc.g1.plab.lib.LogParser: gc.g1.plab.lib.PlabReport getEntries()>();

        $r3 = virtualinvoke $r2.<gc.g1.plab.lib.PlabReport: java.util.stream.Stream entryStream()>();

        $r5 = staticinvoke <LogParser$lambda_0__1: java.util.function.Predicate bootstrap$(boolean,java.util.List)>(z0, r4);

        $r6 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5);

        $r7 = staticinvoke <LogParser$lambda_1__2: java.util.function.Function bootstrap$()>();

        $r10 = staticinvoke <LogParser$lambda_2__3: java.util.function.Function bootstrap$(gc.g1.plab.lib.LogParser$ReportType,java.util.List)>(r8, r9);

        $r11 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r7, $r10);

        $r12 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r11);

        $r13 = (java.util.Map) $r12;

        specialinvoke $r14.<java.util.HashMap: void <init>(java.util.Map)>($r13);

        return $r14;
    }

    private static boolean lambda$0(boolean, java.util.List, java.util.Map$Entry)
    {
        java.util.List r0;
        java.util.Map$Entry r1;
        java.lang.Object $r2;
        boolean z0, $z1, $z2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if z0 != $z1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static java.lang.Long lambda$1(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1;
        java.lang.Long $r2;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = (java.lang.Long) $r1;

        return $r2;
    }

    private static gc.g1.plab.lib.PlabInfo lambda$2(gc.g1.plab.lib.LogParser$ReportType, java.util.List, java.util.Map$Entry)
    {
        gc.g1.plab.lib.PlabGCStatistics $r3;
        java.util.Map$Entry r0;
        java.util.List r5;
        gc.g1.plab.lib.LogParser$ReportType r2;
        java.lang.Object $r1;
        gc.g1.plab.lib.PlabInfo $r4, $r6;

        r2 := @parameter0: gc.g1.plab.lib.LogParser$ReportType;

        r5 := @parameter1: java.util.List;

        r0 := @parameter2: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (gc.g1.plab.lib.PlabGCStatistics) $r1;

        $r4 = virtualinvoke $r3.<gc.g1.plab.lib.PlabGCStatistics: gc.g1.plab.lib.PlabInfo get(gc.g1.plab.lib.LogParser$ReportType)>(r2);

        $r6 = virtualinvoke $r4.<gc.g1.plab.lib.PlabInfo: gc.g1.plab.lib.PlabInfo filter(java.util.List)>(r5);

        return $r6;
    }
}
