class TestHeapCounters$Allocation extends java.lang.Object
{
    private byte[] allocation;
    public final long expectedSize;

    public void <init>(int, long)
    {
        TestHeapCounters$Allocation r0;
        byte[] $r1, $r3, $r7;
        java.lang.Object[] $r2;
        long l1, $l2;
        java.lang.Long $r6;
        int i0;
        java.lang.String $r9, $r10;
        boolean $z0;
        java.io.PrintStream $r5;
        gc.g1.humongousObjects.TestHeapCounters$Allocation $r11, $r12, $r13, $r14, $r15;
        sun.hotspot.WhiteBox $r4, $r8;

        r0 := @this: TestHeapCounters$Allocation;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[i0];

        $r11 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        $r11.<gc.g1.humongousObjects.TestHeapCounters$Allocation: byte[] allocation> = $r1;

        $r12 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        $r12.<gc.g1.humongousObjects.TestHeapCounters$Allocation: long expectedSize> = l1;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = <gc.g1.humongousObjects.TestHeapCounters: sun.hotspot.WhiteBox WHITE_BOX>;

        $r13 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        $r3 = $r13.<gc.g1.humongousObjects.TestHeapCounters$Allocation: byte[] allocation>;

        $l2 = virtualinvoke $r4.<sun.hotspot.WhiteBox: long getObjectSize(java.lang.Object)>($r3);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r2[0] = $r6;

        $r8 = <gc.g1.humongousObjects.TestHeapCounters: sun.hotspot.WhiteBox WHITE_BOX>;

        $r14 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        $r7 = $r14.<gc.g1.humongousObjects.TestHeapCounters$Allocation: byte[] allocation>;

        $z0 = virtualinvoke $r8.<sun.hotspot.WhiteBox: boolean g1IsHumongous(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r10 = "";

        goto label2;

     label1:
        $r10 = "non-";

     label2:
        $r2[1] = $r10;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Object size is %d; Object is %shumongous", $r2);

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

        $r15 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        virtualinvoke $r15.<gc.g1.humongousObjects.TestHeapCounters$Allocation: void selfTest()>();

        return;
    }

    private void selfTest()
    {
        TestHeapCounters$Allocation r0;
        byte[] $r1, $r3, $r8;
        java.lang.Object[] $r7;
        long $l0, $l2, $l4;
        byte $b3;
        java.lang.Long $r10;
        int $i1, $i5;
        java.lang.Boolean $r5, $r6;
        java.lang.String $r11, $r12;
        boolean $z0, $z1;
        gc.g1.humongousObjects.TestHeapCounters$Allocation $r13, $r14, $r15;
        sun.hotspot.WhiteBox $r2, $r4, $r9;

        r0 := @this: TestHeapCounters$Allocation;

        $r2 = <gc.g1.humongousObjects.TestHeapCounters: sun.hotspot.WhiteBox WHITE_BOX>;

        $r13 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        $r1 = $r13.<gc.g1.humongousObjects.TestHeapCounters$Allocation: byte[] allocation>;

        $l0 = virtualinvoke $r2.<sun.hotspot.WhiteBox: long getObjectSize(java.lang.Object)>($r1);

        $i1 = <gc.g1.humongousObjects.TestHeapCounters: int HALF_G1_REGION_SIZE>;

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        $i5 = (int) $b3;

        if $i5 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r4 = <gc.g1.humongousObjects.TestHeapCounters: sun.hotspot.WhiteBox WHITE_BOX>;

        $r14 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        $r3 = $r14.<gc.g1.humongousObjects.TestHeapCounters$Allocation: byte[] allocation>;

        $z0 = virtualinvoke $r4.<sun.hotspot.WhiteBox: boolean g1IsHumongous(java.lang.Object)>($r3);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r7 = newarray (java.lang.Object)[2];

        $r9 = <gc.g1.humongousObjects.TestHeapCounters: sun.hotspot.WhiteBox WHITE_BOX>;

        $r15 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        $r8 = $r15.<gc.g1.humongousObjects.TestHeapCounters$Allocation: byte[] allocation>;

        $l4 = virtualinvoke $r9.<sun.hotspot.WhiteBox: long getObjectSize(java.lang.Object)>($r8);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r7[0] = $r10;

        if $z0 == 0 goto label3;

        $r12 = "";

        goto label4;

     label3:
        $r12 = "non-";

     label4:
        $r7[1] = $r12;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Test Bug: Object of size %d is expected to be %shumongous but it is not", $r7);

        staticinvoke <jdk.test.lib.Asserts: void assertEquals(java.lang.Object,java.lang.Object,java.lang.String)>($r5, $r6, $r11);

        return;
    }

    public void forgetAllocation()
    {
        TestHeapCounters$Allocation r0;
        gc.g1.humongousObjects.TestHeapCounters$Allocation $r1;

        r0 := @this: TestHeapCounters$Allocation;

        $r1 = (gc.g1.humongousObjects.TestHeapCounters$Allocation) r0;

        $r1.<gc.g1.humongousObjects.TestHeapCounters$Allocation: byte[] allocation> = null;

        return;
    }
}
