class TestNoAllocationsInHRegions$Allocator extends java.lang.Object implements java.lang.Runnable
{
    private final java.util.List liveObjects;
    private int usedMemory;
    public final java.lang.Runnable[] actions;
    private static final int MAX_ALLOCATION_SIZE;
    private static final int DEAD_OBJECT_MAX_SIZE;

    static void <clinit>()
    {
        int $i0, $i1, $i2, $i3, $i4;
        double $d0, $d1;

        $i0 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: int G1_REGION_SIZE>;

        $i1 = $i0 / 2;

        $d0 = (double) $i1;

        $d1 = $d0 * 0.9;

        $i2 = (int) $d1;

        <gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int MAX_ALLOCATION_SIZE> = $i2;

        $i3 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: int G1_REGION_SIZE>;

        $i4 = $i3 / 10;

        <gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int DEAD_OBJECT_MAX_SIZE> = $i4;

        return;
    }

    public void <init>(int)
    {
        gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.Runnable $r3, $r4, $r5, $r6;
        TestNoAllocationsInHRegions$Allocator r0;
        java.lang.Runnable[] $r2;
        int i0;
        java.util.LinkedList $r7;

        r0 := @this: TestNoAllocationsInHRegions$Allocator;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        $r8 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r8.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.util.List liveObjects> = $r7;

        $r9 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r9.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int usedMemory> = 0;

        $r2 = newarray (java.lang.Runnable)[4];

        $r10 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r3 = staticinvoke <TestNoAllocationsInHRegions$Allocator$lambda_0__1: java.lang.Runnable bootstrap$(gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator,int)>($r10, i0);

        $r2[0] = $r3;

        $r11 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r4 = staticinvoke <TestNoAllocationsInHRegions$Allocator$lambda_1__2: java.lang.Runnable bootstrap$(gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator)>($r11);

        $r2[1] = $r4;

        $r5 = staticinvoke <TestNoAllocationsInHRegions$Allocator$lambda_2__3: java.lang.Runnable bootstrap$()>();

        $r2[2] = $r5;

        $r12 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r6 = staticinvoke <TestNoAllocationsInHRegions$Allocator$lambda_3__4: java.lang.Runnable bootstrap$(gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator)>($r12);

        $r2[3] = $r6;

        $r13 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r13.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.lang.Runnable[] actions> = $r2;

        return;
    }

    public void run()
    {
        java.util.Random $r2;
        gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator $r5, $r6;
        java.lang.Runnable $r4;
        TestNoAllocationsInHRegions$Allocator r0;
        java.lang.Runnable[] $r1, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: TestNoAllocationsInHRegions$Allocator;

        goto label2;

     label1:
        $r5 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r3 = $r5.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.lang.Runnable[] actions>;

        $r2 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: java.util.Random RND>;

        $r6 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r1 = $r6.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.lang.Runnable[] actions>;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>($i0);

        $r4 = $r3[$i1];

        interfaceinvoke $r4.<java.lang.Runnable: void run()>();

        staticinvoke <java.lang.Thread: void yield()>();

     label2:
        $z0 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: boolean shouldStop>;

        if $z0 == 0 goto label1;

        return;
    }

    private void lambda$0(int)
    {
        byte[] r2;
        java.util.Random $r1;
        gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator $r23, $r24, $r25, $r26, $r27;
        java.lang.Integer $r8, $r17;
        java.lang.Long $r10, $r12;
        boolean $z0, $z1;
        java.util.List $r3;
        java.lang.Object[] $r7, $r16;
        java.lang.Error $r21, $r22;
        long $l10, $l12, $l13;
        TestNoAllocationsInHRegions$Allocator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i14;
        java.lang.String $r13, $r18;
        java.io.PrintStream $r14, $r19;
        sun.hotspot.WhiteBox $r4, $r5, $r6, $r9, $r11;

        r0 := @this: TestNoAllocationsInHRegions$Allocator;

        i0 := @parameter0: int;

        $r23 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $i1 = $r23.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int usedMemory>;

        $i2 = i0 - $i1;

        if $i2 == 0 goto label2;

        $r1 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: java.util.Random RND>;

        $r24 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $i3 = $r24.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int usedMemory>;

        $i5 = i0 - $i3;

        $i4 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int MAX_ALLOCATION_SIZE>;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i4);

        $i7 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>($i6);

        if $i7 == 0 goto label2;

        r2 = newarray (byte)[$i7];

        $r25 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r3 = $r25.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.util.List liveObjects>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r26 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $i8 = $r26.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int usedMemory>;

        $i9 = $i8 + $i7;

        $r27 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r27.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int usedMemory> = $i9;

        $r4 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: sun.hotspot.WhiteBox WB>;

        $z0 = virtualinvoke $r4.<sun.hotspot.WhiteBox: boolean g1IsHumongous(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r16 = newarray (java.lang.Object)[1];

        $i14 = lengthof r2;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r16[0] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Test Bug: Byte array of size %d is expected to be non-humongous but it is humongous", $r16);

        $r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r21 = new java.lang.Error;

        specialinvoke $r21.<java.lang.Error: void <init>(java.lang.String)>($r18);

        <gc.g1.humongousObjects.TestNoAllocationsInHRegions: java.lang.Error error> = $r21;

        <gc.g1.humongousObjects.TestNoAllocationsInHRegions: boolean shouldStop> = 1;

     label1:
        $r6 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: sun.hotspot.WhiteBox WB>;

        $r5 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: sun.hotspot.WhiteBox WB>;

        $l10 = virtualinvoke $r5.<sun.hotspot.WhiteBox: long getObjectAddress(java.lang.Object)>(r2);

        $z1 = virtualinvoke $r6.<sun.hotspot.WhiteBox: boolean g1BelongsToHumongousRegion(long)>($l10);

        if $z1 == 0 goto label2;

        $r7 = newarray (java.lang.Object)[3];

        $i11 = lengthof r2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r7[0] = $r8;

        $r9 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: sun.hotspot.WhiteBox WB>;

        $l12 = virtualinvoke $r9.<sun.hotspot.WhiteBox: long getObjectSize(java.lang.Object)>(r2);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r7[1] = $r10;

        $r11 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: sun.hotspot.WhiteBox WB>;

        $l13 = virtualinvoke $r11.<sun.hotspot.WhiteBox: long getObjectAddress(java.lang.Object)>(r2);

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        $r7[2] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Non-humongous allocation of byte array of length %d and size %d with address %d was made in Humongous Region", $r7);

        $r14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r22 = new java.lang.Error;

        specialinvoke $r22.<java.lang.Error: void <init>(java.lang.String)>($r13);

        <gc.g1.humongousObjects.TestNoAllocationsInHRegions: java.lang.Error error> = $r22;

        <gc.g1.humongousObjects.TestNoAllocationsInHRegions: boolean shouldStop> = 1;

     label2:
        return;
    }

    private void lambda$1()
    {
        byte[] $r6;
        java.util.Random $r3;
        gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator $r8, $r9, $r10, $r11, $r12, $r13;
        TestNoAllocationsInHRegions$Allocator r0;
        int $i0, $i1, $i2, i3, $i4, $i5;
        java.util.List $r1, $r2, $r4, $r7;
        java.lang.Object $r5;

        r0 := @this: TestNoAllocationsInHRegions$Allocator;

        $r8 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r1 = $r8.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.util.List liveObjects>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 0 goto label1;

        $r3 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: java.util.Random RND>;

        $r9 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r2 = $r9.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.util.List liveObjects>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i1);

        $r10 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r4 = $r10.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.util.List liveObjects>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        $r6 = (byte[]) $r5;

        i3 = lengthof $r6;

        $r11 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r7 = $r11.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.util.List liveObjects>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>($i2);

        $r12 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $i4 = $r12.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int usedMemory>;

        $i5 = $i4 - i3;

        $r13 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r13.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int usedMemory> = $i5;

     label1:
        return;
    }

    private static void lambda$2()
    {
        byte[] $r1;
        int $i0, $i1;
        java.util.Random $r0;

        $r0 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: java.util.Random RND>;

        $i0 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: int DEAD_OBJECT_MAX_SIZE>;

        $i1 = virtualinvoke $r0.<java.util.Random: int nextInt(int)>($i0);

        $r1 = newarray (byte)[$i1];

        return;
    }

    private void lambda$3()
    {
        java.util.function.Predicate $r4;
        java.lang.Error $r12;
        sun.hotspot.WhiteBox $r3;
        gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator $r13;
        java.util.function.Consumer $r10;
        java.util.List $r1, r8;
        java.util.stream.Stream $r2, $r5, $r9;
        TestNoAllocationsInHRegions$Allocator r0;
        int $i0;
        java.lang.Object $r7;
        java.util.stream.Collector $r6;

        r0 := @this: TestNoAllocationsInHRegions$Allocator;

        $r13 = (gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator) r0;

        $r1 = $r13.<gc.g1.humongousObjects.TestNoAllocationsInHRegions$Allocator: java.util.List liveObjects>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: sun.hotspot.WhiteBox WB>;

        virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <TestNoAllocationsInHRegions$Allocator$g1IsHumongous__5: java.util.function.Predicate bootstrap$(sun.hotspot.WhiteBox)>($r3);

        $r5 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4);

        $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6);

        r8 = (java.util.List) $r7;

        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r9 = interfaceinvoke r8.<java.util.List: java.util.stream.Stream stream()>();

        $r10 = staticinvoke <TestNoAllocationsInHRegions$Allocator$lambda_5__6: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r9.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r10);

        $r12 = new java.lang.Error;

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String)>("Some non-humongous allocations were made to humongous region");

        <gc.g1.humongousObjects.TestNoAllocationsInHRegions: java.lang.Error error> = $r12;

        <gc.g1.humongousObjects.TestNoAllocationsInHRegions: boolean shouldStop> = 1;

     label1:
        return;
    }

    private static void lambda$5(byte[])
    {
        java.io.PrintStream $r2;
        byte[] r1;
        java.lang.Object[] $r0;
        sun.hotspot.WhiteBox $r4, $r6;
        long $l1, $l2;
        java.lang.Integer $r3;
        java.lang.Long $r5, $r7;
        int $i0;

        r1 := @parameter0: byte[];

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[3];

        $i0 = lengthof r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r3;

        $r4 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: sun.hotspot.WhiteBox WB>;

        $l1 = virtualinvoke $r4.<sun.hotspot.WhiteBox: long getObjectSize(java.lang.Object)>(r1);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r0[1] = $r5;

        $r6 = <gc.g1.humongousObjects.TestNoAllocationsInHRegions: sun.hotspot.WhiteBox WB>;

        $l2 = virtualinvoke $r6.<sun.hotspot.WhiteBox: long getObjectAddress(java.lang.Object)>(r1);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r0[2] = $r7;

        virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("Non-humongous allocation of byte array of length %d and size %d with address %d was made in Humongous Region", $r0);

        return;
    }
}
