public class TestcaseData$FinalParsedNode extends java.lang.Object
{
    public final java.lang.String id;
    public final boolean isHumongous;
    private final java.util.List referencesTypes;
    private final java.util.ArrayList connectedTo;

    public void <init>(gc.g1.humongousObjects.objectGraphTest.TestcaseData$InternalParsedNode)
    {
        gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode $r5, $r6, $r7, $r8;
        java.util.ArrayList $r3;
        java.util.List $r2;
        gc.g1.humongousObjects.objectGraphTest.TestcaseData$InternalParsedNode r1;
        java.lang.String $r4;
        TestcaseData$FinalParsedNode r0;
        boolean $z0;

        r0 := @this: TestcaseData$FinalParsedNode;

        r1 := @parameter0: gc.g1.humongousObjects.objectGraphTest.TestcaseData$InternalParsedNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$InternalParsedNode: java.util.List referencesTypes>;

        $r5 = (gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode) r0;

        $r5.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode: java.util.List referencesTypes> = $r2;

        $r3 = r1.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$InternalParsedNode: java.util.ArrayList connectedTo>;

        $r6 = (gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode) r0;

        $r6.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode: java.util.ArrayList connectedTo> = $r3;

        $r4 = r1.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$InternalParsedNode: java.lang.String id>;

        $r7 = (gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode) r0;

        $r7.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode: java.lang.String id> = $r4;

        $z0 = r1.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$InternalParsedNode: boolean isHumongous>;

        $r8 = (gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode) r0;

        $r8.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode: boolean isHumongous> = $z0;

        return;
    }

    public java.util.List getReferencesTypes()
    {
        java.util.List $r1, $r2;
        gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode $r3;
        TestcaseData$FinalParsedNode r0;

        r0 := @this: TestcaseData$FinalParsedNode;

        $r3 = (gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode) r0;

        $r1 = $r3.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode: java.util.List referencesTypes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.List getConnectedTo()
    {
        java.util.List $r2;
        gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode $r3;
        TestcaseData$FinalParsedNode r0;
        java.util.ArrayList $r1;

        r0 := @this: TestcaseData$FinalParsedNode;

        $r3 = (gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode) r0;

        $r1 = $r3.<gc.g1.humongousObjects.objectGraphTest.TestcaseData$FinalParsedNode: java.util.ArrayList connectedTo>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }
}
