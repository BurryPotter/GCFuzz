public class TestHeapCounters extends java.lang.Object
{
    private static final sun.hotspot.WhiteBox WHITE_BOX;
    private static final int G1_REGION_SIZE;
    private static final int HALF_G1_REGION_SIZE;
    private static final double ALLOCATION_SIZE_TOLERANCE_FACTOR;

    static void <clinit>()
    {
        int $i0, $i1, $i2;
        sun.hotspot.WhiteBox $r0, $r1;

        $r0 = staticinvoke <sun.hotspot.WhiteBox: sun.hotspot.WhiteBox getWhiteBox()>();

        <gc.g1.humongousObjects.TestHeapCounters: sun.hotspot.WhiteBox WHITE_BOX> = $r0;

        $r1 = <gc.g1.humongousObjects.TestHeapCounters: sun.hotspot.WhiteBox WHITE_BOX>;

        $i0 = virtualinvoke $r1.<sun.hotspot.WhiteBox: int g1RegionSize()>();

        <gc.g1.humongousObjects.TestHeapCounters: int G1_REGION_SIZE> = $i0;

        $i1 = <gc.g1.humongousObjects.TestHeapCounters: int G1_REGION_SIZE>;

        $i2 = $i1 / 2;

        <gc.g1.humongousObjects.TestHeapCounters: int HALF_G1_REGION_SIZE> = $i2;

        return;
    }

    public void <init>()
    {
        TestHeapCounters r0;

        r0 := @this: TestHeapCounters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Integer $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r22;
        byte $b22;
        java.lang.Long $r26, $r27, $r28, $r33, $r34;
        java.util.stream.Stream $r16, $r29, $r42;
        java.lang.StringBuilder $r35, $r38, $r39;
        java.lang.Integer[] $r4;
        java.lang.Object[] $r24;
        java.lang.Error $r44;
        long $l14, $l17, $l18, l19, $l20, $l21, $l23, l24;
        java.util.ArrayList $r14;
        java.lang.String $r1, $r2, $r37, $r40;
        java.util.stream.LongStream $r18, $r31;
        java.util.function.ToLongFunction $r17, $r30;
        boolean $z0;
        java.util.List $r13, $r15;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        java.lang.String[] r0;
        int $i0, $i1, $i2, i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16;
        double $d0, $d1, $d2, $d3;
        java.io.PrintStream $r19, $r25, $r32, $r41;
        java.util.Iterator $r20;
        gc.g1.humongousObjects.TestHeapCounters$Allocation $r23;
        java.util.function.Consumer $r43;
        gc.g1.humongousObjects.TestHeapCounters$MemoryCounter $r3;
        java.lang.Object $r21;
        java.lang.Class $r36;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 1 goto label1;

        $r44 = new java.lang.Error;

        specialinvoke $r44.<java.lang.Error: void <init>(java.lang.String)>("Expected memory counter name wasn\'t provided as command line argument");

        throw $r44;

     label1:
        $r1 = r0[0];

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = staticinvoke <gc.g1.humongousObjects.TestHeapCounters$MemoryCounter: gc.g1.humongousObjects.TestHeapCounters$MemoryCounter valueOf(java.lang.String)>($r2);

        $i1 = staticinvoke <gc.testlibrary.Helpers: int detectByteArrayAllocationOverhead()>();

        $i2 = <gc.g1.humongousObjects.TestHeapCounters: int HALF_G1_REGION_SIZE>;

        i3 = $i2 - $i1;

        $i4 = <gc.g1.humongousObjects.TestHeapCounters: int G1_REGION_SIZE>;

        i5 = $i4 - $i1;

        $r4 = newarray (java.lang.Integer)[8];

        $i6 = i3 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r4[0] = $r5;

        $f0 = (float) i5;

        $f1 = 0.8F * $f0;

        $i7 = (int) $f1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r4[2] = $r7;

        $f2 = (float) i5;

        $f3 = 1.2F * $f2;

        $i8 = (int) $f3;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r4[3] = $r8;

        $f4 = (float) i5;

        $f5 = 1.5F * $f4;

        $i9 = (int) $f5;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r4[4] = $r9;

        $f6 = (float) i5;

        $f7 = 1.7F * $f6;

        $i10 = (int) $f7;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r4[5] = $r10;

        $f8 = (float) i5;

        $f9 = 2.0F * $f8;

        $i11 = (int) $f9;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r4[6] = $r11;

        $f10 = (float) i5;

        $f11 = 2.5F * $f10;

        $i12 = (int) $f11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r4[7] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = staticinvoke <java.lang.management.ManagementFactory: java.util.List getGarbageCollectorMXBeans()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.stream.Stream stream()>();

        $r17 = staticinvoke <TestHeapCounters$getCollectionCount__1: java.util.function.ToLongFunction bootstrap$()>();

        $r18 = interfaceinvoke $r16.<java.util.stream.Stream: java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction)>($r17);

        l24 = interfaceinvoke $r18.<java.util.stream.LongStream: long sum()>();

        $r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>("Starting allocations - no GC should happen until we finish them");

        $r20 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r22 = (java.lang.Integer) $r21;

        $i13 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        $l14 = virtualinvoke $r3.<gc.g1.humongousObjects.TestHeapCounters$MemoryCounter: long getUsedMemory()>();

        $d1 = (double) $i13;

        $i15 = <gc.g1.humongousObjects.TestHeapCounters: int G1_REGION_SIZE>;

        $d0 = (double) $i15;

        $d2 = $d1 / $d0;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $l18 = (long) $d3;

        $i16 = <gc.g1.humongousObjects.TestHeapCounters: int G1_REGION_SIZE>;

        $l17 = (long) $i16;

        l19 = $l18 * $l17;

        $r23 = new gc.g1.humongousObjects.TestHeapCounters$Allocation;

        specialinvoke $r23.<gc.g1.humongousObjects.TestHeapCounters$Allocation: void <init>(int,long)>($i13, l19);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r23);

        $l20 = virtualinvoke $r3.<gc.g1.humongousObjects.TestHeapCounters$MemoryCounter: long getUsedMemory()>();

        $r25 = <java.lang.System: java.io.PrintStream out>;

        $r24 = newarray (java.lang.Object)[3];

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l19);

        $r24[0] = $r26;

        $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        $r24[1] = $r27;

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l20);

        $r24[2] = $r28;

        virtualinvoke $r25.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("Expected allocation size: %d\nUsed memory before allocation: %d\nUsed memory after allocation: %d\n", $r24);

        $r29 = interfaceinvoke $r15.<java.util.List: java.util.stream.Stream stream()>();

        $r30 = staticinvoke <TestHeapCounters$getCollectionCount__2: java.util.function.ToLongFunction bootstrap$()>();

        $r31 = interfaceinvoke $r29.<java.util.stream.Stream: java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction)>($r30);

        $l21 = interfaceinvoke $r31.<java.util.stream.LongStream: long sum()>();

        $b22 = $l21 cmp l24;

        if $b22 != 0 goto label3;

        $l23 = $l20 - $l14;

        $r33 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l23);

        $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l19);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Counter of type ");

        $r36 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getSimpleName()>();

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned wrong allocation size");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.test.lib.Asserts: void assertGreaterThanOrEqual(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r33, $r34, $r40);

        goto label4;

     label3:
        $r32 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>("GC happened during allocation so the check is skipped");

        l24 = $l21;

     label4:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r41 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>("Finished allocations - no GC should have happened before this line");

        $r42 = interfaceinvoke $r14.<java.util.List: java.util.stream.Stream stream()>();

        $r43 = staticinvoke <TestHeapCounters$lambda_2__3: java.util.function.Consumer bootstrap$(gc.g1.humongousObjects.TestHeapCounters$MemoryCounter)>($r3);

        interfaceinvoke $r42.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r43);

        return;
    }

    private static void lambda$2(gc.g1.humongousObjects.TestHeapCounters$MemoryCounter, gc.g1.humongousObjects.TestHeapCounters$Allocation)
    {
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.Long $r3, $r4;
        java.lang.String $r7, $r10;
        double $d0, $d1;
        gc.g1.humongousObjects.TestHeapCounters$Allocation r1;
        sun.hotspot.WhiteBox $r2;
        gc.g1.humongousObjects.TestHeapCounters$MemoryCounter r0;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.Class $r6;

        r0 := @parameter0: gc.g1.humongousObjects.TestHeapCounters$MemoryCounter;

        r1 := @parameter1: gc.g1.humongousObjects.TestHeapCounters$Allocation;

        $l0 = virtualinvoke r0.<gc.g1.humongousObjects.TestHeapCounters$MemoryCounter: long getUsedMemory()>();

        virtualinvoke r1.<gc.g1.humongousObjects.TestHeapCounters$Allocation: void forgetAllocation()>();

        $r2 = <gc.g1.humongousObjects.TestHeapCounters: sun.hotspot.WhiteBox WHITE_BOX>;

        virtualinvoke $r2.<sun.hotspot.WhiteBox: void fullGC()>();

        $l1 = virtualinvoke r0.<gc.g1.humongousObjects.TestHeapCounters$MemoryCounter: long getUsedMemory()>();

        $l2 = $l0 - $l1;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $l3 = r1.<gc.g1.humongousObjects.TestHeapCounters$Allocation: long expectedSize>;

        $d0 = (double) $l3;

        $d1 = $d0 * 0.85;

        $l4 = (long) $d1;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Counter of type ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned wrong allocation size");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.test.lib.Asserts: void assertGreaterThanOrEqual(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r3, $r4, $r10);

        return;
    }
}
