class TestShrinkDefragmentedHeap$GCTest extends java.lang.Object
{
    private static final java.lang.String MIN_FREE_RATIO_FLAG_NAME;
    private static final java.lang.String MAX_FREE_RATIO_FLAG_NAME;
    private static final java.lang.String NEW_SIZE_FLAG_NAME;
    private static final java.util.ArrayList garbage;
    private static final int SMALL_OBJS_SIZE;
    private static final int SMALL_OBJS_COUNT;
    private static final int ALLOCATE_COUNT;
    private static final int HUMONG_OBJS_SIZE;
    private static final long initialHeapSize;

    static void <clinit>()
    {
        int $i0;
        long $l1;
        java.lang.management.MemoryUsage $r1;
        java.util.ArrayList $r0;
        double $d0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <gc.g1.TestShrinkDefragmentedHeap$GCTest: java.util.ArrayList garbage> = $r0;

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>(873813.0, 1153433.6);

        $i0 = (int) $d0;

        <gc.g1.TestShrinkDefragmentedHeap$GCTest: int HUMONG_OBJS_SIZE> = $i0;

        $r1 = staticinvoke <gc.g1.TestShrinkDefragmentedHeap: java.lang.management.MemoryUsage getHeapMemoryUsage()>();

        $l1 = virtualinvoke $r1.<java.lang.management.MemoryUsage: long getUsed()>();

        <gc.g1.TestShrinkDefragmentedHeap$GCTest: long initialHeapSize> = $l1;

        return;
    }

    void <init>()
    {
        TestShrinkDefragmentedHeap$GCTest r0;

        r0 := @this: TestShrinkDefragmentedHeap$GCTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.InterruptedException
    {
        java.lang.String[] r1;
        gc.g1.TestShrinkDefragmentedHeap$GCTest $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new gc.g1.TestShrinkDefragmentedHeap$GCTest;

        specialinvoke $r0.<gc.g1.TestShrinkDefragmentedHeap$GCTest: void <init>()>();

        virtualinvoke $r0.<gc.g1.TestShrinkDefragmentedHeap$GCTest: void test()>();

        return;
    }

    private void test() throws java.lang.InterruptedException
    {
        long $l0, $l1;
        gc.g1.TestShrinkDefragmentedHeap$GCTest $r6, $r7, $r8;
        java.lang.Long $r3, $r4;
        java.lang.String $r5;
        TestShrinkDefragmentedHeap$GCTest r0;
        java.lang.management.MemoryUsage $r1, $r2;

        r0 := @this: TestShrinkDefragmentedHeap$GCTest;

        staticinvoke <gc.g1.TestShrinkDefragmentedHeap$MemoryUsagePrinter: void printMemoryUsage(java.lang.String)>("init");

        $r6 = (gc.g1.TestShrinkDefragmentedHeap$GCTest) r0;

        virtualinvoke $r6.<gc.g1.TestShrinkDefragmentedHeap$GCTest: void allocate()>();

        staticinvoke <java.lang.System: void gc()>();

        $r1 = staticinvoke <gc.g1.TestShrinkDefragmentedHeap: java.lang.management.MemoryUsage getHeapMemoryUsage()>();

        staticinvoke <gc.g1.TestShrinkDefragmentedHeap$MemoryUsagePrinter: void printMemoryUsage(java.lang.String)>("allocated");

        $r7 = (gc.g1.TestShrinkDefragmentedHeap$GCTest) r0;

        virtualinvoke $r7.<gc.g1.TestShrinkDefragmentedHeap$GCTest: void free()>();

        $r2 = staticinvoke <gc.g1.TestShrinkDefragmentedHeap: java.lang.management.MemoryUsage getHeapMemoryUsage()>();

        staticinvoke <gc.g1.TestShrinkDefragmentedHeap$MemoryUsagePrinter: void printMemoryUsage(java.lang.String)>("free");

        $l0 = virtualinvoke $r2.<java.lang.management.MemoryUsage: long getCommitted()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $l1 = virtualinvoke $r1.<java.lang.management.MemoryUsage: long getCommitted()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r8 = (gc.g1.TestShrinkDefragmentedHeap$GCTest) r0;

        $r5 = virtualinvoke $r8.<gc.g1.TestShrinkDefragmentedHeap$GCTest: java.lang.String prepareMessageCommittedIsNotLess()>();

        staticinvoke <jdk.test.lib.Asserts: void assertLessThan(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r3, $r4, $r5);

        return;
    }

    private void allocate()
    {
        java.io.PrintStream $r2;
        java.lang.Object[] $r0;
        long $l1;
        java.text.NumberFormat $r1, $r4;
        java.util.ArrayList $r6, $r7, $r8, $r9;
        int $i0, $i2, i3;
        java.lang.String $r3, $r5;
        TestShrinkDefragmentedHeap$GCTest r10;

        r10 := @this: TestShrinkDefragmentedHeap$GCTest;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r0 = newarray (java.lang.Object)[2];

        $r1 = <gc.g1.TestShrinkDefragmentedHeap$MemoryUsagePrinter: java.text.NumberFormat NF>;

        $r3 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(long)>(10240L);

        $r0[0] = $r3;

        $r4 = <gc.g1.TestShrinkDefragmentedHeap$MemoryUsagePrinter: java.text.NumberFormat NF>;

        $i0 = <gc.g1.TestShrinkDefragmentedHeap$GCTest: int HUMONG_OBJS_SIZE>;

        $l1 = (long) $i0;

        $r5 = virtualinvoke $r4.<java.text.NumberFormat: java.lang.String format(long)>($l1);

        $r0[1] = $r5;

        virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("Will allocate objects of small size = %s and humongous size = %s", $r0);

        i3 = 0;

        goto label2;

     label1:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        staticinvoke <gc.g1.TestShrinkDefragmentedHeap$GCTest: void allocateList(java.util.List,int,int)>($r6, 6485, 10240);

        $r7 = <gc.g1.TestShrinkDefragmentedHeap$GCTest: java.util.ArrayList garbage>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $i2 = <gc.g1.TestShrinkDefragmentedHeap$GCTest: int HUMONG_OBJS_SIZE>;

        staticinvoke <gc.g1.TestShrinkDefragmentedHeap$GCTest: void allocateList(java.util.List,int,int)>($r8, 4, $i2);

        $r9 = <gc.g1.TestShrinkDefragmentedHeap$GCTest: java.util.ArrayList garbage>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        i3 = i3 + 1;

     label2:
        if i3 < 3 goto label1;

        return;
    }

    private void free()
    {
        java.util.ArrayList $r0, $r1, $r3, $r4, r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.List $r2, $r7;
        java.lang.Object $r5;
        TestShrinkDefragmentedHeap$GCTest r8;

        r8 := @this: TestShrinkDefragmentedHeap$GCTest;

        $r1 = <gc.g1.TestShrinkDefragmentedHeap$GCTest: java.util.ArrayList garbage>;

        $r0 = <gc.g1.TestShrinkDefragmentedHeap$GCTest: java.util.ArrayList garbage>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.List subList(int,int)>(0, $i1);

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r4 = <gc.g1.TestShrinkDefragmentedHeap$GCTest: java.util.ArrayList garbage>;

        $r3 = <gc.g1.TestShrinkDefragmentedHeap$GCTest: java.util.ArrayList garbage>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i3 = $i2 - 1;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        r6 = (java.util.ArrayList) $r5;

        $i4 = virtualinvoke r6.<java.util.ArrayList: int size()>();

        if $i4 <= 1 goto label1;

        $i5 = virtualinvoke r6.<java.util.ArrayList: int size()>();

        $i6 = $i5 - 1;

        $r7 = virtualinvoke r6.<java.util.ArrayList: java.util.List subList(int,int)>(0, $i6);

        interfaceinvoke $r7.<java.util.List: void clear()>();

     label1:
        staticinvoke <java.lang.System: void gc()>();

        return;
    }

    private java.lang.String prepareMessageCommittedIsNotLess()
    {
        com.sun.management.VMOption $r3, $r7;
        java.lang.Object[] $r0;
        com.sun.management.HotSpotDiagnosticMXBean $r2, $r6;
        java.lang.management.PlatformManagedObject $r1, $r5;
        java.lang.String $r4, $r8, $r9;
        TestShrinkDefragmentedHeap$GCTest r10;

        r10 := @this: TestShrinkDefragmentedHeap$GCTest;

        $r0 = newarray (java.lang.Object)[4];

        $r0[0] = "MinHeapFreeRatio";

        $r1 = staticinvoke <java.lang.management.ManagementFactory: java.lang.management.PlatformManagedObject getPlatformMXBean(java.lang.Class)>(class "Lcom/sun/management/HotSpotDiagnosticMXBean;");

        $r2 = (com.sun.management.HotSpotDiagnosticMXBean) $r1;

        $r3 = interfaceinvoke $r2.<com.sun.management.HotSpotDiagnosticMXBean: com.sun.management.VMOption getVMOption(java.lang.String)>("MinHeapFreeRatio");

        $r4 = virtualinvoke $r3.<com.sun.management.VMOption: java.lang.String getValue()>();

        $r0[1] = $r4;

        $r0[2] = "MaxHeapFreeRatio";

        $r5 = staticinvoke <java.lang.management.ManagementFactory: java.lang.management.PlatformManagedObject getPlatformMXBean(java.lang.Class)>(class "Lcom/sun/management/HotSpotDiagnosticMXBean;");

        $r6 = (com.sun.management.HotSpotDiagnosticMXBean) $r5;

        $r7 = interfaceinvoke $r6.<com.sun.management.HotSpotDiagnosticMXBean: com.sun.management.VMOption getVMOption(java.lang.String)>("MaxHeapFreeRatio");

        $r8 = virtualinvoke $r7.<com.sun.management.VMOption: java.lang.String getValue()>();

        $r0[3] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("committed free heap size is not less than committed full heap size, heap hasn\'t been shrunk?%n%s = %s%n%s = %s", $r0);

        return $r9;
    }

    private static void allocateList(java.util.List, int, int)
    {
        byte[] $r1;
        java.util.List r0;
        int i0, i1, i2;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = 0;

        goto label2;

     label1:
        $r1 = newarray (byte)[i1];

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        i2 = i2 + 1;

     label2:
        if i2 < i0 goto label1;

        return;
    }
}
