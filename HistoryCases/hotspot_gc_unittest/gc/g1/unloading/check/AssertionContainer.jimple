public class AssertionContainer extends java.lang.Object
{
    private java.util.SortedMap sortedMap;

    public void <init>()
    {
        gc.g1.unloading.check.AssertionContainer $r3;
        AssertionContainer r0;
        java.util.TreeMap $r2;

        r0 := @this: AssertionContainer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        $r3 = (gc.g1.unloading.check.AssertionContainer) r0;

        $r3.<gc.g1.unloading.check.AssertionContainer: java.util.SortedMap sortedMap> = $r2;

        return;
    }

    public void enqueue(java.util.Collection, java.lang.Long)
    {
        AssertionContainer r0;
        java.util.Collection r5;
        java.util.List $r9;
        gc.g1.unloading.check.AssertionContainer $r11, $r12, $r13;
        java.lang.Long r1;
        java.lang.Object $r3, $r8;
        java.util.LinkedList $r10;
        java.util.SortedMap $r2, $r6, $r7;

        r0 := @this: AssertionContainer;

        r5 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Long;

        $r11 = (gc.g1.unloading.check.AssertionContainer) r0;

        $r2 = $r11.<gc.g1.unloading.check.AssertionContainer: java.util.SortedMap sortedMap>;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $r12 = (gc.g1.unloading.check.AssertionContainer) r0;

        $r7 = $r12.<gc.g1.unloading.check.AssertionContainer: java.util.SortedMap sortedMap>;

        $r8 = interfaceinvoke $r7.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (java.util.List) $r8;

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>(r5);

        goto label2;

     label1:
        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        interfaceinvoke $r10.<java.util.List: boolean addAll(java.util.Collection)>(r5);

        $r13 = (gc.g1.unloading.check.AssertionContainer) r0;

        $r6 = $r13.<gc.g1.unloading.check.AssertionContainer: java.util.SortedMap sortedMap>;

        interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

     label2:
        return;
    }

    public java.util.Collection getElder(java.lang.Long)
    {
        AssertionContainer r1;
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.util.List r10;
        gc.g1.unloading.check.AssertionContainer $r12;
        java.lang.Long r2, r8;
        java.lang.Object $r7, $r9;
        java.util.LinkedList $r11;
        java.util.SortedMap $r3, $r4;
        boolean $z0;

        r1 := @this: AssertionContainer;

        r2 := @parameter0: java.lang.Long;

        $r11 = new java.util.LinkedList;

        specialinvoke $r11.<java.util.LinkedList: void <init>()>();

        $r12 = (gc.g1.unloading.check.AssertionContainer) r1;

        $r3 = $r12.<gc.g1.unloading.check.AssertionContainer: java.util.SortedMap sortedMap>;

        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.util.SortedMap headMap(java.lang.Object)>(r2);

        $r5 = interfaceinvoke $r4.<java.util.SortedMap: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Long) $r7;

        $r9 = interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>(r8);

        r10 = (java.util.List) $r9;

        interfaceinvoke $r11.<java.util.Collection: boolean addAll(java.util.Collection)>(r10);

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r11;
    }
}
