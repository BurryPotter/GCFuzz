public class PhantomizedAssertion extends gc.g1.unloading.check.Assertion
{
    private boolean phantomized;

    public void <init>()
    {
        PhantomizedAssertion r0;
        gc.g1.unloading.check.PhantomizedAssertion $r1;

        r0 := @this: PhantomizedAssertion;

        specialinvoke r0.<gc.g1.unloading.check.Assertion: void <init>()>();

        $r1 = (gc.g1.unloading.check.PhantomizedAssertion) r0;

        $r1.<gc.g1.unloading.check.PhantomizedAssertion: boolean phantomized> = 0;

        return;
    }

    public void setPhantomized()
    {
        PhantomizedAssertion r0;
        gc.g1.unloading.check.PhantomizedAssertion $r1;

        r0 := @this: PhantomizedAssertion;

        $r1 = (gc.g1.unloading.check.PhantomizedAssertion) r0;

        $r1.<gc.g1.unloading.check.PhantomizedAssertion: boolean phantomized> = 1;

        return;
    }

    public void check()
    {
        PhantomizedAssertion r0;
        gc.g1.unloading.check.PhantomizedAssertion $r3;
        java.lang.RuntimeException $r2;
        boolean $z0;

        r0 := @this: PhantomizedAssertion;

        $r3 = (gc.g1.unloading.check.PhantomizedAssertion) r0;

        $z0 = $r3.<gc.g1.unloading.check.PhantomizedAssertion: boolean phantomized>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failing test! Object wasn\'t phantomized!");

        throw $r2;

     label1:
        return;
    }
}
