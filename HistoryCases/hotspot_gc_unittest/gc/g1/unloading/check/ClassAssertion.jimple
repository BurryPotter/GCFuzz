public class ClassAssertion extends gc.g1.unloading.check.Assertion
{
    private java.lang.String className;
    private boolean shouldBeAlive;
    private static long counterOfCheckedUnloaded;
    private static long counterOfCheckedAlive;
    private static long numberOfChecksLimit;

    static void <clinit>()
    {
        long $l0;
        java.lang.String $r0;
        java.lang.Long $r1;

        <gc.g1.unloading.check.ClassAssertion: long counterOfCheckedUnloaded> = 0L;

        <gc.g1.unloading.check.ClassAssertion: long counterOfCheckedAlive> = 0L;

        <gc.g1.unloading.check.ClassAssertion: long numberOfChecksLimit> = -1L;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("NumberOfChecksLimit");

        if $r0 == null goto label1;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r0);

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        <gc.g1.unloading.check.ClassAssertion: long numberOfChecksLimit> = $l0;

     label1:
        return;
    }

    public static long getCounterOfCheckedUnloaded()
    {
        long $l0;

        $l0 = <gc.g1.unloading.check.ClassAssertion: long counterOfCheckedUnloaded>;

        return $l0;
    }

    public static long getCounterOfCheckedAlive()
    {
        long $l0;

        $l0 = <gc.g1.unloading.check.ClassAssertion: long counterOfCheckedAlive>;

        return $l0;
    }

    public void <init>(java.lang.String, boolean)
    {
        gc.g1.unloading.check.ClassAssertion $r2, $r3;
        java.lang.String r1;
        ClassAssertion r0;
        boolean z0;

        r0 := @this: ClassAssertion;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<gc.g1.unloading.check.Assertion: void <init>()>();

        $r2 = (gc.g1.unloading.check.ClassAssertion) r0;

        $r2.<gc.g1.unloading.check.ClassAssertion: boolean shouldBeAlive> = z0;

        $r3 = (gc.g1.unloading.check.ClassAssertion) r0;

        $r3.<gc.g1.unloading.check.ClassAssertion: java.lang.String className> = r1;

        return;
    }

    public void check()
    {
        gc.g1.unloading.check.ClassAssertion $r29, $r30, $r31, $r32, $r33, $r34;
        boolean $z0, $z1, $z2;
        ClassAssertion r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r15, $r16, $r21, $r22, $r24, $r26, $r28;
        long $l0, $l1, $l2, $l3;
        java.lang.String $r2, $r5, $r11, $r14, $r17, $r20, $r23;
        java.io.PrintStream $r4;
        sun.hotspot.WhiteBox $r0;
        java.lang.RuntimeException $r25, $r27;

        r1 := @this: ClassAssertion;

        $r0 = staticinvoke <sun.hotspot.WhiteBox: sun.hotspot.WhiteBox getWhiteBox()>();

        $r29 = (gc.g1.unloading.check.ClassAssertion) r1;

        $r2 = $r29.<gc.g1.unloading.check.ClassAssertion: java.lang.String className>;

        $z0 = virtualinvoke $r0.<sun.hotspot.WhiteBox: boolean isClassAlive(java.lang.String)>($r2);

        $r30 = (gc.g1.unloading.check.ClassAssertion) r1;

        $z1 = $r30.<gc.g1.unloading.check.ClassAssertion: boolean shouldBeAlive>;

        if $z0 == $z1 goto label2;

        if $z0 == 0 goto label1;

        $r25 = new java.lang.RuntimeException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class ");

        $r31 = (gc.g1.unloading.check.ClassAssertion) r1;

        $r20 = $r31.<gc.g1.unloading.check.ClassAssertion: java.lang.String className>;

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not unloaded! Failing test.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r23);

        throw $r25;

     label1:
        $r27 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class ");

        $r32 = (gc.g1.unloading.check.ClassAssertion) r1;

        $r14 = $r32.<gc.g1.unloading.check.ClassAssertion: java.lang.String className>;

        $r15 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must live! Failing test.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r27;

     label2:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>(" Check OK, class ");

        $r33 = (gc.g1.unloading.check.ClassAssertion) r1;

        $r5 = $r33.<gc.g1.unloading.check.ClassAssertion: java.lang.String className>;

        $r6 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isAlive = ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", shouldBeAlive = ");

        $r34 = (gc.g1.unloading.check.ClassAssertion) r1;

        $z2 = $r34.<gc.g1.unloading.check.ClassAssertion: boolean shouldBeAlive>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r11);

        if $z0 == 0 goto label3;

        $l2 = <gc.g1.unloading.check.ClassAssertion: long counterOfCheckedAlive>;

        $l3 = $l2 + 1L;

        <gc.g1.unloading.check.ClassAssertion: long counterOfCheckedAlive> = $l3;

        goto label4;

     label3:
        $l0 = <gc.g1.unloading.check.ClassAssertion: long counterOfCheckedUnloaded>;

        $l1 = $l0 + 1L;

        <gc.g1.unloading.check.ClassAssertion: long counterOfCheckedUnloaded> = $l1;

     label4:
        return;
    }
}
