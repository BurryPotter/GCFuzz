public class GenClassesBuilder extends java.lang.Object
{

    public void <init>()
    {
        GenClassesBuilder r0;

        r0 := @this: GenClassesBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] $r0, $r3, r7;
        java.lang.String $r4;
        java.nio.file.Path $r1, $r2, $r5, $r6;

        r7 := @parameter0: java.lang.String[];

        $r0 = newarray (java.lang.String)[0];

        $r1 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("genSrc", $r0);

        $r2 = interfaceinvoke $r1.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $r4 = <jdk.test.lib.Utils: java.lang.String TEST_CLASSES>;

        $r3 = newarray (java.lang.String)[0];

        $r5 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r4, $r3);

        $r6 = interfaceinvoke $r5.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        staticinvoke <gc.g1.unloading.bytecode.GenClassesBuilder: void generateSource(java.nio.file.Path)>($r2);

        staticinvoke <gc.g1.unloading.bytecode.GenClassesBuilder: void compileSource(java.nio.file.Path,java.nio.file.Path)>($r2, $r6);

        return;
    }

    private static void compileSource(java.nio.file.Path, java.nio.file.Path)
    {
        java.nio.file.Path r2, r8;
        java.util.function.Predicate $r15;
        jdk.test.lib.JDKToolLauncher $r0, $r1, $r4, $r5, $r7;
        jdk.test.lib.process.OutputAnalyzer $r19;
        java.util.stream.Stream $r10, $r12, $r14, $r16;
        java.lang.StringBuilder $r22, $r24, $r25, $r30, $r31;
        java.lang.Throwable $r20, $r27, $r33, $r34, r35;
        java.nio.file.FileVisitOption[] $r9;
        java.lang.Error $r21, $r29;
        java.lang.String[] $r18;
        java.util.function.Function $r11, $r13;
        java.lang.String $r3, $r6, $r23, $r26, $r32;
        java.io.IOException $r28;
        java.util.function.Consumer $r17;

        r8 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.nio.file.Path;

        $r0 = staticinvoke <jdk.test.lib.JDKToolLauncher: jdk.test.lib.JDKToolLauncher create(java.lang.String)>("javac");

        $r1 = virtualinvoke $r0.<jdk.test.lib.JDKToolLauncher: jdk.test.lib.JDKToolLauncher addToolArg(java.lang.String)>("-d");

        $r3 = interfaceinvoke r2.<java.nio.file.Path: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<jdk.test.lib.JDKToolLauncher: jdk.test.lib.JDKToolLauncher addToolArg(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<jdk.test.lib.JDKToolLauncher: jdk.test.lib.JDKToolLauncher addToolArg(java.lang.String)>("-cp");

        $r6 = <jdk.test.lib.Utils: java.lang.String TEST_CLASS_PATH>;

        $r7 = virtualinvoke $r5.<jdk.test.lib.JDKToolLauncher: jdk.test.lib.JDKToolLauncher addToolArg(java.lang.String)>($r6);

     label01:
        r35 = null;

     label02:
        $r9 = newarray (java.nio.file.FileVisitOption)[0];

        $r10 = staticinvoke <java.nio.file.Files: java.util.stream.Stream walk(java.nio.file.Path,java.nio.file.FileVisitOption[])>(r8, $r9);

     label03:
        $r11 = staticinvoke <GenClassesBuilder$toAbsolutePath__1: java.util.function.Function bootstrap$()>();

        $r12 = interfaceinvoke $r10.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r11);

        $r13 = staticinvoke <GenClassesBuilder$toString__2: java.util.function.Function bootstrap$()>();

        $r14 = interfaceinvoke $r12.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r13);

        $r15 = staticinvoke <GenClassesBuilder$lambda_2__3: java.util.function.Predicate bootstrap$()>();

        $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r15);

        virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = staticinvoke <GenClassesBuilder$addToolArg__4: java.util.function.Consumer bootstrap$(jdk.test.lib.JDKToolLauncher)>($r7);

        interfaceinvoke $r16.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r17);

     label04:
        if $r10 == null goto label11;

        interfaceinvoke $r10.<java.util.stream.Stream: void close()>();

        goto label11;

     label05:
        $r34 := @caughtexception;

        r35 = $r34;

        if $r10 == null goto label06;

        interfaceinvoke $r10.<java.util.stream.Stream: void close()>();

     label06:
        throw $r34;

     label07:
        $r33 := @caughtexception;

        if r35 != null goto label08;

        r35 = $r33;

        goto label09;

     label08:
        if r35 == $r33 goto label09;

        virtualinvoke r35.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r33);

     label09:
        throw r35;

     label10:
        $r28 := @caughtexception;

        $r29 = new java.lang.Error;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("traverse source dir ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r32, $r28);

        throw $r29;

     label11:
        $r18 = virtualinvoke $r7.<jdk.test.lib.JDKToolLauncher: java.lang.String[] getCommand()>();

     label12:
        $r19 = staticinvoke <jdk.test.lib.process.ProcessTools: jdk.test.lib.process.OutputAnalyzer executeCommand(java.lang.String[])>($r18);

        virtualinvoke $r19.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

     label13:
        goto label16;

     label14:
        $r27 := @caughtexception;

        throw $r27;

     label15:
        $r20 := @caughtexception;

        $r21 = new java.lang.Error;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("execution of javac(");

        $r23 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r18);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") failed");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r20);

        throw $r21;

     label16:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label07 with label07;
        catch java.io.IOException from label01 to label10 with label10;
        catch java.lang.Error from label12 to label13 with label14;
        catch java.lang.RuntimeException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

    private static void generateSource(java.nio.file.Path)
    {
        java.lang.Error $r5, $r7;
        java.lang.String[] $r2;
        java.io.IOException $r6;
        java.lang.Exception $r4;
        java.nio.file.attribute.FileAttribute[] $r1;
        java.lang.StringBuilder $r8, $r9;
        java.lang.String $r3, $r10;
        java.nio.file.Path r0;

        r0 := @parameter0: java.nio.file.Path;

     label1:
        $r1 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r0, $r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.Error;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("can\'t create dirs for");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r6);

        throw $r7;

     label4:
        $r2 = newarray (java.lang.String)[1];

        $r3 = interfaceinvoke r0.<java.nio.file.Path: java.lang.String toString()>();

        $r2[0] = $r3;

        staticinvoke <gc.g1.unloading.bytecode.HumongousTemplateClassGen: void main(java.lang.String[])>($r2);

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("can\'t generate classes", $r4);

        throw $r5;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private static boolean lambda$2(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".java");

        return $z0;
    }
}
