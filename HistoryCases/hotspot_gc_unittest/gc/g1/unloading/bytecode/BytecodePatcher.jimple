public class BytecodePatcher extends java.lang.Object
{
    private static java.util.Map dictionary;

    static void <clinit>()
    {
        byte[] $r3, $r5, $r8, $r10;
        java.util.HashMap $r0;
        java.util.Map $r2, $r7;
        java.lang.String $r1, $r4, $r6, $r9;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <gc.g1.unloading.bytecode.BytecodePatcher: java.util.Map dictionary> = $r0;

        $r2 = <gc.g1.unloading.bytecode.BytecodePatcher: java.util.Map dictionary>;

        $r1 = "bytesToReplace0";

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r4 = "bytesToReplace1";

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r7 = <gc.g1.unloading.bytecode.BytecodePatcher: java.util.Map dictionary>;

        $r6 = "bytesToReplace2";

        $r8 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r9 = "bytesToReplace3";

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

        return;
    }

    public void <init>()
    {
        BytecodePatcher r0;

        r0 := @this: BytecodePatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void patch(byte[])
    {
        byte[] r5, $r7, $r9, $r11, $r13, $r15;
        byte $b2, $b3, $b6;
        java.util.Map $r0;
        boolean $z0, z1;
        java.util.Set $r1;
        int $i0, $i1, $i4, $i5, i7, i8, i9, $i10, $i11, $i12, $i13, $i14;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.lang.Object $r3, $r6, $r8, $r10, $r12, $r14;

        r5 := @parameter0: byte[];

        $r0 = <gc.g1.unloading.bytecode.BytecodePatcher: java.util.Map dictionary>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label11;

     label01:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        i7 = 0;

        goto label10;

     label02:
        z1 = 1;

        i8 = 0;

        goto label05;

     label03:
        $i1 = i7 + i8;

        $b2 = r5[$i1];

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (byte[]) $r8;

        $b3 = $r9[i8];

        $i13 = (int) $b2;

        $i14 = (int) $b3;

        if $i13 == $i14 goto label04;

        z1 = 0;

        goto label06;

     label04:
        i8 = i8 + 1;

     label05:
        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (byte[]) $r6;

        $i0 = lengthof $r7;

        if i8 < $i0 goto label03;

     label06:
        if z1 == 0 goto label09;

        i9 = 0;

        goto label08;

     label07:
        $i5 = i7 + i9;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (byte[]) $r12;

        $b6 = $r13[i9];

        r5[$i5] = $b6;

        i9 = i9 + 1;

     label08:
        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (byte[]) $r10;

        $i4 = lengthof $r11;

        if i9 < $i4 goto label07;

     label09:
        i7 = i7 + 1;

     label10:
        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (byte[]) $r14;

        $i10 = lengthof $r15;

        $i11 = i7 + $i10;

        $i12 = lengthof r5;

        if $i11 < $i12 goto label02;

     label11:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label01;

        return;
    }
}
