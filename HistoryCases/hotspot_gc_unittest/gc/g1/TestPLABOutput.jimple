public class TestPLABOutput extends java.lang.Object
{

    public void <init>()
    {
        TestPLABOutput r0;

        r0 := @this: TestPLABOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void runTest() throws java.lang.Exception
    {
        java.lang.String[] $r0;
        java.lang.Integer $r12, $r13;
        java.util.regex.Matcher $r10;
        int $i0;
        java.lang.String $r2, $r7, $r9, $r11;
        java.lang.ProcessBuilder $r3;
        boolean $z0;
        java.io.PrintStream $r6;
        java.lang.Process $r5;
        java.lang.RuntimeException $r14;
        jdk.test.lib.process.OutputAnalyzer $r4;
        java.lang.Class $r1;
        java.util.regex.Pattern $r8;

        $r0 = newarray (java.lang.String)[8];

        $r0[0] = "-Xbootclasspath/a:.";

        $r0[1] = "-XX:+UnlockExperimentalVMOptions";

        $r0[2] = "-XX:+UnlockDiagnosticVMOptions";

        $r0[3] = "-XX:+WhiteBoxAPI";

        $r0[4] = "-XX:+UseG1GC";

        $r0[5] = "-Xmx10M";

        $r0[6] = "-Xlog:gc+plab=debug";

        $r1 = class "Lgc/g1/TestPLABOutput$GCTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r0[7] = $r2;

        $r3 = staticinvoke <jdk.test.lib.process.ProcessTools: java.lang.ProcessBuilder createJavaProcessBuilder(java.lang.String[])>($r0);

        $r4 = new jdk.test.lib.process.OutputAnalyzer;

        $r5 = virtualinvoke $r3.<java.lang.ProcessBuilder: java.lang.Process start()>();

        specialinvoke $r4.<jdk.test.lib.process.OutputAnalyzer: void <init>(java.lang.Process)>($r5);

        virtualinvoke $r4.<jdk.test.lib.process.OutputAnalyzer: jdk.test.lib.process.OutputAnalyzer shouldHaveExitValue(int)>(0);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = virtualinvoke $r4.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*GC\\(0\\) .*allocated: (\\d+).*");

        $r9 = virtualinvoke $r4.<jdk.test.lib.process.OutputAnalyzer: java.lang.String getStdout()>();

        $r10 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r9);

        $z0 = virtualinvoke $r10.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not find any PLAB statistics output");

        throw $r14;

     label1:
        $r11 = virtualinvoke $r10.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        staticinvoke <jdk.test.lib.Asserts: void assertGT(java.lang.Comparable,java.lang.Comparable,java.lang.String)>($r12, $r13, "Did not allocate any memory during test");

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <gc.g1.TestPLABOutput: void runTest()>();

        return;
    }
}
