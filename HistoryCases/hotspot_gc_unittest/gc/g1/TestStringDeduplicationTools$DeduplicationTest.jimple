class TestStringDeduplicationTools$DeduplicationTest extends java.lang.Object
{

    private void <init>()
    {
        TestStringDeduplicationTools$DeduplicationTest r0;

        r0 := @this: TestStringDeduplicationTools$DeduplicationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r0, $r7;
        java.lang.String[] r1;
        java.util.ArrayList $r6;
        int $i0, $i1, $i2;
        java.lang.String $r2, $r3, $r4, r5;

        r1 := @parameter0: java.lang.String[];

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Begin: DeduplicationTest");

        $r2 = r1[0];

        $i0 = staticinvoke <java.lang.Integer: int parseUnsignedInt(java.lang.String)>($r2);

        $r3 = r1[1];

        $i1 = staticinvoke <java.lang.Integer: int parseUnsignedInt(java.lang.String)>($r3);

        $r4 = r1[2];

        $i2 = staticinvoke <java.lang.Integer: int parseUnsignedInt(java.lang.String)>($r4);

        r5 = r1[3];

        $r6 = staticinvoke <gc.g1.TestStringDeduplicationTools: java.util.ArrayList createStrings(int,int)>($i0, $i1);

        staticinvoke <gc.g1.TestStringDeduplicationTools: void forceDeduplication(int,java.lang.String)>($i2, r5);

        staticinvoke <gc.g1.TestStringDeduplicationTools: void verifyStrings(java.util.ArrayList,int)>($r6, $i1);

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("End: DeduplicationTest");

        return;
    }

    public static transient jdk.test.lib.process.OutputAnalyzer run(int, int, java.lang.String, java.lang.String[]) throws java.lang.Exception
    {
        java.lang.Object[] $r21;
        java.lang.String[] $r0, r17, $r20, $r22;
        java.util.ArrayList $r16;
        int i0, i1, $i2, $i3;
        java.lang.String $r3, $r5, $r8, $r11, $r14, r15;
        jdk.test.lib.process.OutputAnalyzer $r23;
        java.util.List $r18, $r19;
        java.lang.StringBuilder $r1, $r2, $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.Class $r4;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r15 := @parameter2: java.lang.String;

        r17 := @parameter3: java.lang.String[];

        $r0 = newarray (java.lang.String)[7];

        $r0[0] = "-XX:+UseStringDeduplication";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("-XX:StringDeduplicationAgeThreshold=");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[1] = $r3;

        $r4 = class "Lgc/g1/TestStringDeduplicationTools$DeduplicationTest;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r0[2] = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[3] = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $i2 = i1 / 2;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[4] = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[5] = $r14;

        $r0[6] = r15;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r17);

        virtualinvoke $r16.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r18);

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        virtualinvoke $r16.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r19);

        $i3 = virtualinvoke $r16.<java.util.ArrayList: int size()>();

        $r20 = newarray (java.lang.String)[$i3];

        $r21 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r20);

        $r22 = (java.lang.String[]) $r21;

        $r23 = staticinvoke <gc.g1.TestStringDeduplicationTools: jdk.test.lib.process.OutputAnalyzer runTest(java.lang.String[])>($r22);

        return $r23;
    }
}
