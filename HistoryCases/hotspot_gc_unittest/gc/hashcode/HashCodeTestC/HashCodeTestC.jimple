public class HashCodeTestC extends nsk.share.gc.GCTestBase
{

    public void <init>()
    {
        HashCodeTestC r0;

        r0 := @this: HashCodeTestC;

        specialinvoke r0.<nsk.share.gc.GCTestBase: void <init>()>();

        return;
    }

    public void run()
    {
        java.lang.Throwable $r13;
        nsk.share.runner.RunParams $r2, $r5;
        gc.hashcode.HCHelper $r8;
        HashCodeTestC r1;
        nsk.share.test.ExecutionController $r12;
        long $l0;
        nsk.share.TestFailure $r9;
        nsk.share.test.StressOptions $r3;
        nsk.share.test.Stresser $r7;
        gc.hashcode.HashCodeTestC.HashCodeTestC $r10, $r11;
        boolean $z0, $z1;

        r1 := @this: HashCodeTestC;

        $r7 = new nsk.share.test.Stresser;

        $r10 = (gc.hashcode.HashCodeTestC.HashCodeTestC) r1;

        $r2 = $r10.<gc.hashcode.HashCodeTestC.HashCodeTestC: nsk.share.runner.RunParams runParams>;

        $r3 = virtualinvoke $r2.<nsk.share.runner.RunParams: nsk.share.test.StressOptions getStressOptions()>();

        specialinvoke $r7.<nsk.share.test.Stresser: void <init>(nsk.share.test.StressOptions)>($r3);

        virtualinvoke $r7.<nsk.share.test.Stresser: void start(long)>(0L);

        $r8 = new gc.hashcode.HCHelper;

        $r11 = (gc.hashcode.HashCodeTestC.HashCodeTestC) r1;

        $r5 = $r11.<gc.hashcode.HashCodeTestC.HashCodeTestC: nsk.share.runner.RunParams runParams>;

        $l0 = virtualinvoke $r5.<nsk.share.runner.RunParams: long getSeed()>();

        specialinvoke $r8.<gc.hashcode.HCHelper: void <init>(int,int,long,double,int)>(512, 3584, $l0, 0.7, 10240);

        virtualinvoke $r8.<gc.hashcode.HCHelper: void setupLists()>();

        virtualinvoke $r8.<gc.hashcode.HCHelper: void clearList(int)>(1);

        $r12 = (nsk.share.test.ExecutionController) $r7;

        staticinvoke <nsk.share.gc.gp.GarbageUtils: int eatMemory(nsk.share.test.ExecutionController)>($r12);

        $z0 = virtualinvoke $r7.<nsk.share.test.Stresser: boolean continueExecution()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke $r8.<gc.hashcode.HCHelper: boolean verifyHashCodes()>();

        virtualinvoke $r8.<gc.hashcode.HCHelper: void cleanupLists()>();

        if $z1 != 0 goto label2;

        $r9 = new nsk.share.TestFailure;

        specialinvoke $r9.<nsk.share.TestFailure: void <init>(java.lang.String)>("Some hash codes didn\'t match");

        $r13 = (java.lang.Throwable) $r9;

        throw $r13;

     label2:
        return;
    }

    public static void main(java.lang.String[])
    {
        gc.hashcode.HashCodeTestC.HashCodeTestC $r2;
        java.lang.String[] r1;
        nsk.share.test.Test $r3;

        r1 := @parameter0: java.lang.String[];

        $r2 = new gc.hashcode.HashCodeTestC.HashCodeTestC;

        specialinvoke $r2.<gc.hashcode.HashCodeTestC.HashCodeTestC: void <init>()>();

        $r3 = (nsk.share.test.Test) $r2;

        staticinvoke <nsk.share.gc.GC: void runTest(nsk.share.test.Test,java.lang.String[])>($r3, r1);

        return;
    }
}
