public class SimpleGC extends nsk.share.gc.GCTestBase implements nsk.share.gc.gp.GarbageProducerAware, nsk.share.gc.gp.MemoryStrategyAware
{
    private nsk.share.gc.gp.GarbageProducer garbageProducer;
    private nsk.share.gc.gp.MemoryStrategy memoryStrategy;
    public static java.lang.Object[] array;

    public void <init>()
    {
        SimpleGC r0;

        r0 := @this: SimpleGC;

        specialinvoke r0.<nsk.share.gc.GCTestBase: void <init>()>();

        return;
    }

    public void run()
    {
        java.lang.StringBuilder $r7, $r11, $r15, $r22, $r27, $r34, $r40, $r46, $r47, $r49, $r50, $r51, $r52, $r53, $r55, $r56, $r57;
        java.lang.Throwable $r42;
        java.lang.Object[] r4;
        long $l0, $l1, $l6;
        java.lang.String $r8, $r12, $r16, $r21, $r23, $r28, $r35, $r41, $r48;
        java.lang.OutOfMemoryError $r43;
        nsk.share.runner.RunParams $r1, $r30;
        boolean $z0, $z1;
        nsk.share.test.Stresser $r54;
        gc.vector.SimpleGC.SimpleGC $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72;
        nsk.share.gc.gp.MemoryStrategy $r2, $r3, $r26;
        nsk.share.test.StressOptions $r31;
        int $i2, $i3, $i4, $i5, $i7, $i8, $i9, i10, i11, i12;
        nsk.share.gc.gp.GarbageProducer $r19, $r36;
        SimpleGC r0;
        nsk.share.log.Log $r6, $r10, $r14, $r18, $r25, $r33, $r39, $r45;
        java.lang.Class $r20;
        java.lang.Object $r37;

        r0 := @this: SimpleGC;

        $r58 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r1 = $r58.<gc.vector.SimpleGC.SimpleGC: nsk.share.runner.RunParams runParams>;

        $l0 = virtualinvoke $r1.<nsk.share.runner.RunParams: long getTestMemory()>();

        $r59 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r2 = $r59.<gc.vector.SimpleGC.SimpleGC: nsk.share.gc.gp.MemoryStrategy memoryStrategy>;

        $l1 = staticinvoke <nsk.share.gc.gp.GarbageUtils: long getArraySize(long,nsk.share.gc.gp.MemoryStrategy)>($l0, $r2);

        $r60 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r3 = $r60.<gc.vector.SimpleGC.SimpleGC: nsk.share.gc.gp.MemoryStrategy memoryStrategy>;

        $i2 = staticinvoke <nsk.share.gc.gp.GarbageUtils: int getArrayCount(long,nsk.share.gc.gp.MemoryStrategy)>($l0, $r3);

        r4 = newarray (java.lang.Object)[$i2];

        <gc.vector.SimpleGC.SimpleGC: java.lang.Object[] array> = r4;

        $r61 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r6 = $r61.<gc.vector.SimpleGC.SimpleGC: nsk.share.log.Log log>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>("Memory to fill out: ");

        $r7 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<nsk.share.log.Log: void info(java.lang.Object)>($r8);

        $r62 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r10 = $r62.<gc.vector.SimpleGC.SimpleGC: nsk.share.log.Log log>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>(java.lang.String)>("Array lenght: ");

        $i3 = lengthof r4;

        $r11 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<nsk.share.log.Log: void info(java.lang.Object)>($r12);

        $r63 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r14 = $r63.<gc.vector.SimpleGC.SimpleGC: nsk.share.log.Log log>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>(java.lang.String)>("Object size: ");

        $r15 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<nsk.share.log.Log: void info(java.lang.Object)>($r16);

        $r64 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r18 = $r64.<gc.vector.SimpleGC.SimpleGC: nsk.share.log.Log log>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>(java.lang.String)>("Garbage producer: ");

        $r65 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r19 = $r65.<gc.vector.SimpleGC.SimpleGC: nsk.share.gc.gp.GarbageProducer garbageProducer>;

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r22 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<nsk.share.log.Log: void info(java.lang.Object)>($r23);

        $r66 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r25 = $r66.<gc.vector.SimpleGC.SimpleGC: nsk.share.log.Log log>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Memory Strategy: ");

        $r67 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r26 = $r67.<gc.vector.SimpleGC.SimpleGC: nsk.share.gc.gp.MemoryStrategy memoryStrategy>;

        $r27 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<nsk.share.log.Log: void info(java.lang.Object)>($r28);

        $r54 = new nsk.share.test.Stresser;

        $r68 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r30 = $r68.<gc.vector.SimpleGC.SimpleGC: nsk.share.runner.RunParams runParams>;

        $r31 = virtualinvoke $r30.<nsk.share.runner.RunParams: nsk.share.test.StressOptions getStressOptions()>();

        specialinvoke $r54.<nsk.share.test.Stresser: void <init>(nsk.share.test.StressOptions)>($r31);

        $i4 = lengthof r4;

        $i5 = 10 * $i4;

        $l6 = (long) $i5;

        virtualinvoke $r54.<nsk.share.test.Stresser: void start(long)>($l6);

        i10 = 0;

     label01:
        goto label08;

     label02:
        i11 = 0;

        goto label04;

     label03:
        $r69 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r36 = $r69.<gc.vector.SimpleGC.SimpleGC: nsk.share.gc.gp.GarbageProducer garbageProducer>;

        $r37 = interfaceinvoke $r36.<nsk.share.gc.gp.GarbageProducer: java.lang.Object create(long)>($l1);

        r4[i11] = $r37;

        i11 = i11 + 1;

     label04:
        $i7 = lengthof r4;

        if i11 >= $i7 goto label05;

        $z0 = virtualinvoke $r54.<nsk.share.test.Stresser: boolean continueExecution()>();

        if $z0 != 0 goto label03;

     label05:
        i12 = 0;

        goto label07;

     label06:
        r4[i12] = null;

        i12 = i12 + 1;

     label07:
        $i8 = lengthof r4;

        if i12 < $i8 goto label06;

        i10 = i10 + 1;

        $i9 = i10 % 1000;

        if $i9 != 0 goto label08;

        $r70 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r33 = $r70.<gc.vector.SimpleGC.SimpleGC: nsk.share.log.Log log>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>(java.lang.String)>("  iteration # ");

        $r34 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<nsk.share.log.Log: void info(java.lang.Object)>($r35);

     label08:
        $z1 = virtualinvoke $r54.<nsk.share.test.Stresser: boolean iteration()>();

        if $z1 != 0 goto label02;

     label09:
        goto label12;

     label10:
        $r43 := @caughtexception;

        $r71 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r45 = $r71.<gc.vector.SimpleGC.SimpleGC: nsk.share.log.Log log>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("OutOfMemory after ");

        $r46 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" iterations");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r45.<nsk.share.log.Log: void info(java.lang.Object)>($r48);

        throw $r43;

     label11:
        $r42 := @caughtexception;

        virtualinvoke $r54.<nsk.share.test.Stresser: void finish()>();

        throw $r42;

     label12:
        virtualinvoke $r54.<nsk.share.test.Stresser: void finish()>();

        $r72 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r39 = $r72.<gc.vector.SimpleGC.SimpleGC: nsk.share.log.Log log>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("Success. Total iterations: ");

        $r40 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r39.<nsk.share.log.Log: void info(java.lang.Object)>($r41);

        return;

        catch java.lang.OutOfMemoryError from label01 to label09 with label10;
        catch java.lang.Throwable from label01 to label11 with label11;
    }

    public final void setGarbageProducer(nsk.share.gc.gp.GarbageProducer)
    {
        SimpleGC r0;
        nsk.share.gc.gp.GarbageProducer r1;
        gc.vector.SimpleGC.SimpleGC $r2;

        r0 := @this: SimpleGC;

        r1 := @parameter0: nsk.share.gc.gp.GarbageProducer;

        $r2 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r2.<gc.vector.SimpleGC.SimpleGC: nsk.share.gc.gp.GarbageProducer garbageProducer> = r1;

        return;
    }

    public final void setMemoryStrategy(nsk.share.gc.gp.MemoryStrategy)
    {
        SimpleGC r0;
        gc.vector.SimpleGC.SimpleGC $r2;
        nsk.share.gc.gp.MemoryStrategy r1;

        r0 := @this: SimpleGC;

        r1 := @parameter0: nsk.share.gc.gp.MemoryStrategy;

        $r2 = (gc.vector.SimpleGC.SimpleGC) r0;

        $r2.<gc.vector.SimpleGC.SimpleGC: nsk.share.gc.gp.MemoryStrategy memoryStrategy> = r1;

        return;
    }

    public static void main(java.lang.String[])
    {
        nsk.share.runner.RunParams $r0;
        nsk.share.test.Test $r4;
        gc.vector.SimpleGC.SimpleGC $r3;
        java.lang.String[] r2;

        r2 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <nsk.share.runner.RunParams: nsk.share.runner.RunParams getInstance()>();

        virtualinvoke $r0.<nsk.share.runner.RunParams: void setRunMemDiagThread(boolean)>(1);

        $r3 = new gc.vector.SimpleGC.SimpleGC;

        specialinvoke $r3.<gc.vector.SimpleGC.SimpleGC: void <init>()>();

        $r4 = (nsk.share.test.Test) $r3;

        staticinvoke <nsk.share.gc.GC: void runTest(nsk.share.test.Test,java.lang.String[])>($r4, r2);

        return;
    }
}
